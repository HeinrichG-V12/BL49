
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000245c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000023e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  00800100  00800100  0000245c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000245c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000248c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  000024cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ae8  00000000  00000000  000026ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000112b  00000000  00000000  00004194  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000015ac  00000000  00000000  000052bf  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004e8  00000000  00000000  0000686c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a7e  00000000  00000000  00006d54  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000929  00000000  00000000  000077d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  000080fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 ed 0f 	jmp	0x1fda	; 0x1fda <__vector_15>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	a6 02       	muls	r26, r22
      7e:	9c 03       	fmulsu	r17, r20
      80:	86 04       	cpc	r8, r6
      82:	54 05       	cpc	r21, r4
      84:	d7 05       	cpc	r29, r7
      86:	67 06       	cpc	r6, r23
      88:	01 07       	cpc	r16, r17
      8a:	27 08       	sbc	r2, r7
      8c:	5a 09       	sbc	r21, r10
      8e:	97 0a       	sbc	r9, r23
      90:	4d 0b       	sbc	r20, r29

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	e8 ee       	ldi	r30, 0xE8	; 232
      a6:	f3 e2       	ldi	r31, 0x23	; 35
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 30       	cpi	r26, 0x00	; 0
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 e0       	ldi	r26, 0x00	; 0
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a0 31       	cpi	r26, 0x10	; 16
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 8a 0e 	call	0x1d14	; 0x1d14 <main>
      c8:	0c 94 f2 11 	jmp	0x23e4	; 0x23e4 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <adc_init>:
 */ 

#include "adc.h"

void adc_init (void)
{
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
	// avcc with cap on aref
	ADCSRB |= (1 << AREFEN);
      d8:	8b e7       	ldi	r24, 0x7B	; 123
      da:	90 e0       	ldi	r25, 0x00	; 0
      dc:	2b e7       	ldi	r18, 0x7B	; 123
      de:	30 e0       	ldi	r19, 0x00	; 0
      e0:	f9 01       	movw	r30, r18
      e2:	20 81       	ld	r18, Z
      e4:	20 62       	ori	r18, 0x20	; 32
      e6:	fc 01       	movw	r30, r24
      e8:	20 83       	st	Z, r18
	ADMUX = (1 << REFS0);
      ea:	8c e7       	ldi	r24, 0x7C	; 124
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	20 e4       	ldi	r18, 0x40	; 64
      f0:	fc 01       	movw	r30, r24
      f2:	20 83       	st	Z, r18
		
	// enable adc, prescalee 128 (125kHz)
	ADCSRA |= (1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)|(1 << ADEN);
      f4:	8a e7       	ldi	r24, 0x7A	; 122
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	2a e7       	ldi	r18, 0x7A	; 122
      fa:	30 e0       	ldi	r19, 0x00	; 0
      fc:	f9 01       	movw	r30, r18
      fe:	20 81       	ld	r18, Z
     100:	27 68       	ori	r18, 0x87	; 135
     102:	fc 01       	movw	r30, r24
     104:	20 83       	st	Z, r18
}
     106:	00 00       	nop
     108:	df 91       	pop	r29
     10a:	cf 91       	pop	r28
     10c:	08 95       	ret

0000010e <adc_read>:

uint16_t adc_read (uint8_t channel)
{
     10e:	cf 93       	push	r28
     110:	df 93       	push	r29
     112:	1f 92       	push	r1
     114:	cd b7       	in	r28, 0x3d	; 61
     116:	de b7       	in	r29, 0x3e	; 62
     118:	89 83       	std	Y+1, r24	; 0x01
	//select ADC channel with safety mask
	ADMUX = (ADMUX & 0xF0) | (channel & 0x0F);
     11a:	8c e7       	ldi	r24, 0x7C	; 124
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	2c e7       	ldi	r18, 0x7C	; 124
     120:	30 e0       	ldi	r19, 0x00	; 0
     122:	f9 01       	movw	r30, r18
     124:	20 81       	ld	r18, Z
     126:	32 2f       	mov	r19, r18
     128:	30 7f       	andi	r19, 0xF0	; 240
     12a:	29 81       	ldd	r18, Y+1	; 0x01
     12c:	2f 70       	andi	r18, 0x0F	; 15
     12e:	23 2b       	or	r18, r19
     130:	fc 01       	movw	r30, r24
     132:	20 83       	st	Z, r18
	ADCSRA |= (1<<ADSC);		// start single conversion
     134:	8a e7       	ldi	r24, 0x7A	; 122
     136:	90 e0       	ldi	r25, 0x00	; 0
     138:	2a e7       	ldi	r18, 0x7A	; 122
     13a:	30 e0       	ldi	r19, 0x00	; 0
     13c:	f9 01       	movw	r30, r18
     13e:	20 81       	ld	r18, Z
     140:	20 64       	ori	r18, 0x40	; 64
     142:	fc 01       	movw	r30, r24
     144:	20 83       	st	Z, r18
	while(ADCSRA & (1<<ADSC));	// wait till done
     146:	00 00       	nop
     148:	8a e7       	ldi	r24, 0x7A	; 122
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	fc 01       	movw	r30, r24
     14e:	80 81       	ld	r24, Z
     150:	88 2f       	mov	r24, r24
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	80 74       	andi	r24, 0x40	; 64
     156:	99 27       	eor	r25, r25
     158:	89 2b       	or	r24, r25
     15a:	b1 f7       	brne	.-20     	; 0x148 <adc_read+0x3a>
	return ADC;
     15c:	88 e7       	ldi	r24, 0x78	; 120
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	fc 01       	movw	r30, r24
     162:	80 81       	ld	r24, Z
     164:	91 81       	ldd	r25, Z+1	; 0x01
}
     166:	0f 90       	pop	r0
     168:	df 91       	pop	r29
     16a:	cf 91       	pop	r28
     16c:	08 95       	ret

0000016e <adc_readAvg>:

uint16_t adc_readAvg (uint8_t channel, uint8_t samples)
{
     16e:	cf 93       	push	r28
     170:	df 93       	push	r29
     172:	cd b7       	in	r28, 0x3d	; 61
     174:	de b7       	in	r29, 0x3e	; 62
     176:	27 97       	sbiw	r28, 0x07	; 7
     178:	0f b6       	in	r0, 0x3f	; 63
     17a:	f8 94       	cli
     17c:	de bf       	out	0x3e, r29	; 62
     17e:	0f be       	out	0x3f, r0	; 63
     180:	cd bf       	out	0x3d, r28	; 61
     182:	8e 83       	std	Y+6, r24	; 0x06
     184:	6f 83       	std	Y+7, r22	; 0x07
	uint32_t buf = 0;
     186:	19 82       	std	Y+1, r1	; 0x01
     188:	1a 82       	std	Y+2, r1	; 0x02
     18a:	1b 82       	std	Y+3, r1	; 0x03
     18c:	1c 82       	std	Y+4, r1	; 0x04
	
	for (uint8_t i = 0; i < samples; i++)
     18e:	1d 82       	std	Y+5, r1	; 0x05
     190:	15 c0       	rjmp	.+42     	; 0x1bc <adc_readAvg+0x4e>
	{
		buf += adc_read(channel);
     192:	8e 81       	ldd	r24, Y+6	; 0x06
     194:	0e 94 87 00 	call	0x10e	; 0x10e <adc_read>
     198:	cc 01       	movw	r24, r24
     19a:	a0 e0       	ldi	r26, 0x00	; 0
     19c:	b0 e0       	ldi	r27, 0x00	; 0
     19e:	29 81       	ldd	r18, Y+1	; 0x01
     1a0:	3a 81       	ldd	r19, Y+2	; 0x02
     1a2:	4b 81       	ldd	r20, Y+3	; 0x03
     1a4:	5c 81       	ldd	r21, Y+4	; 0x04
     1a6:	82 0f       	add	r24, r18
     1a8:	93 1f       	adc	r25, r19
     1aa:	a4 1f       	adc	r26, r20
     1ac:	b5 1f       	adc	r27, r21
     1ae:	89 83       	std	Y+1, r24	; 0x01
     1b0:	9a 83       	std	Y+2, r25	; 0x02
     1b2:	ab 83       	std	Y+3, r26	; 0x03
     1b4:	bc 83       	std	Y+4, r27	; 0x04

uint16_t adc_readAvg (uint8_t channel, uint8_t samples)
{
	uint32_t buf = 0;
	
	for (uint8_t i = 0; i < samples; i++)
     1b6:	8d 81       	ldd	r24, Y+5	; 0x05
     1b8:	8f 5f       	subi	r24, 0xFF	; 255
     1ba:	8d 83       	std	Y+5, r24	; 0x05
     1bc:	9d 81       	ldd	r25, Y+5	; 0x05
     1be:	8f 81       	ldd	r24, Y+7	; 0x07
     1c0:	98 17       	cp	r25, r24
     1c2:	38 f3       	brcs	.-50     	; 0x192 <adc_readAvg+0x24>
	{
		buf += adc_read(channel);
	}
	return (uint16_t) (buf / samples);
     1c4:	8f 81       	ldd	r24, Y+7	; 0x07
     1c6:	28 2f       	mov	r18, r24
     1c8:	30 e0       	ldi	r19, 0x00	; 0
     1ca:	40 e0       	ldi	r20, 0x00	; 0
     1cc:	50 e0       	ldi	r21, 0x00	; 0
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	9a 81       	ldd	r25, Y+2	; 0x02
     1d2:	ab 81       	ldd	r26, Y+3	; 0x03
     1d4:	bc 81       	ldd	r27, Y+4	; 0x04
     1d6:	bc 01       	movw	r22, r24
     1d8:	cd 01       	movw	r24, r26
     1da:	0e 94 b0 11 	call	0x2360	; 0x2360 <__udivmodsi4>
     1de:	da 01       	movw	r26, r20
     1e0:	c9 01       	movw	r24, r18
}
     1e2:	27 96       	adiw	r28, 0x07	; 7
     1e4:	0f b6       	in	r0, 0x3f	; 63
     1e6:	f8 94       	cli
     1e8:	de bf       	out	0x3e, r29	; 62
     1ea:	0f be       	out	0x3f, r0	; 63
     1ec:	cd bf       	out	0x3d, r28	; 61
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	08 95       	ret

000001f4 <adc_read_UA>:

uint16_t adc_read_UA (void)
{
     1f4:	cf 93       	push	r28
     1f6:	df 93       	push	r29
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
	return adc_readAvg (8, 5);
     1fc:	65 e0       	ldi	r22, 0x05	; 5
     1fe:	88 e0       	ldi	r24, 0x08	; 8
     200:	0e 94 b7 00 	call	0x16e	; 0x16e <adc_readAvg>
}
     204:	df 91       	pop	r29
     206:	cf 91       	pop	r28
     208:	08 95       	ret

0000020a <adc_read_UR>:

uint16_t adc_read_UR (void)
{
     20a:	cf 93       	push	r28
     20c:	df 93       	push	r29
     20e:	cd b7       	in	r28, 0x3d	; 61
     210:	de b7       	in	r29, 0x3e	; 62
	return adc_readAvg (9, 5);
     212:	65 e0       	ldi	r22, 0x05	; 5
     214:	89 e0       	ldi	r24, 0x09	; 9
     216:	0e 94 b7 00 	call	0x16e	; 0x16e <adc_readAvg>
}
     21a:	df 91       	pop	r29
     21c:	cf 91       	pop	r28
     21e:	08 95       	ret

00000220 <adc_read_reference>:

uint16_t adc_read_reference (void)
{
     220:	cf 93       	push	r28
     222:	df 93       	push	r29
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
	return adc_readAvg (3, 5);
     228:	65 e0       	ldi	r22, 0x05	; 5
     22a:	83 e0       	ldi	r24, 0x03	; 3
     22c:	0e 94 b7 00 	call	0x16e	; 0x16e <adc_readAvg>
}
     230:	df 91       	pop	r29
     232:	cf 91       	pop	r28
     234:	08 95       	ret

00000236 <adc_read_battery>:

uint16_t adc_read_battery (void)
{
     236:	cf 93       	push	r28
     238:	df 93       	push	r29
     23a:	cd b7       	in	r28, 0x3d	; 61
     23c:	de b7       	in	r29, 0x3e	; 62
	return adc_readAvg (5, 5);
     23e:	65 e0       	ldi	r22, 0x05	; 5
     240:	85 e0       	ldi	r24, 0x05	; 5
     242:	0e 94 b7 00 	call	0x16e	; 0x16e <adc_readAvg>
     246:	df 91       	pop	r29
     248:	cf 91       	pop	r28
     24a:	08 95       	ret

0000024c <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     24c:	cf 93       	push	r28
     24e:	df 93       	push	r29
     250:	00 d0       	rcall	.+0      	; 0x252 <can_clear_all_mob+0x6>
     252:	1f 92       	push	r1
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	19 82       	std	Y+1, r1	; 0x01
     25a:	1d c0       	rjmp	.+58     	; 0x296 <can_clear_all_mob+0x4a>
     25c:	8d ee       	ldi	r24, 0xED	; 237
     25e:	90 e0       	ldi	r25, 0x00	; 0
     260:	29 81       	ldd	r18, Y+1	; 0x01
     262:	22 95       	swap	r18
     264:	20 7f       	andi	r18, 0xF0	; 240
     266:	fc 01       	movw	r30, r24
     268:	20 83       	st	Z, r18
     26a:	8e ee       	ldi	r24, 0xEE	; 238
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	9b 83       	std	Y+3, r25	; 0x03
     270:	8a 83       	std	Y+2, r24	; 0x02
     272:	09 c0       	rjmp	.+18     	; 0x286 <can_clear_all_mob+0x3a>
     274:	8a 81       	ldd	r24, Y+2	; 0x02
     276:	9b 81       	ldd	r25, Y+3	; 0x03
     278:	fc 01       	movw	r30, r24
     27a:	10 82       	st	Z, r1
     27c:	8a 81       	ldd	r24, Y+2	; 0x02
     27e:	9b 81       	ldd	r25, Y+3	; 0x03
     280:	01 96       	adiw	r24, 0x01	; 1
     282:	9b 83       	std	Y+3, r25	; 0x03
     284:	8a 83       	std	Y+2, r24	; 0x02
     286:	8a 81       	ldd	r24, Y+2	; 0x02
     288:	9b 81       	ldd	r25, Y+3	; 0x03
     28a:	88 3f       	cpi	r24, 0xF8	; 248
     28c:	91 05       	cpc	r25, r1
     28e:	90 f3       	brcs	.-28     	; 0x274 <can_clear_all_mob+0x28>
     290:	89 81       	ldd	r24, Y+1	; 0x01
     292:	8f 5f       	subi	r24, 0xFF	; 255
     294:	89 83       	std	Y+1, r24	; 0x01
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	86 30       	cpi	r24, 0x06	; 6
     29a:	00 f3       	brcs	.-64     	; 0x25c <can_clear_all_mob+0x10>
     29c:	00 00       	nop
     29e:	0f 90       	pop	r0
     2a0:	0f 90       	pop	r0
     2a2:	0f 90       	pop	r0
     2a4:	df 91       	pop	r29
     2a6:	cf 91       	pop	r28
     2a8:	08 95       	ret

000002aa <can_get_mob_free>:
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	00 d0       	rcall	.+0      	; 0x2b0 <can_get_mob_free+0x6>
     2b0:	cd b7       	in	r28, 0x3d	; 61
     2b2:	de b7       	in	r29, 0x3e	; 62
     2b4:	8d ee       	ldi	r24, 0xED	; 237
     2b6:	90 e0       	ldi	r25, 0x00	; 0
     2b8:	fc 01       	movw	r30, r24
     2ba:	80 81       	ld	r24, Z
     2bc:	8a 83       	std	Y+2, r24	; 0x02
     2be:	19 82       	std	Y+1, r1	; 0x01
     2c0:	1b c0       	rjmp	.+54     	; 0x2f8 <can_get_mob_free+0x4e>
     2c2:	8d ee       	ldi	r24, 0xED	; 237
     2c4:	90 e0       	ldi	r25, 0x00	; 0
     2c6:	29 81       	ldd	r18, Y+1	; 0x01
     2c8:	22 95       	swap	r18
     2ca:	20 7f       	andi	r18, 0xF0	; 240
     2cc:	fc 01       	movw	r30, r24
     2ce:	20 83       	st	Z, r18
     2d0:	8f ee       	ldi	r24, 0xEF	; 239
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	80 81       	ld	r24, Z
     2d8:	88 2f       	mov	r24, r24
     2da:	90 e0       	ldi	r25, 0x00	; 0
     2dc:	80 7c       	andi	r24, 0xC0	; 192
     2de:	99 27       	eor	r25, r25
     2e0:	89 2b       	or	r24, r25
     2e2:	39 f4       	brne	.+14     	; 0x2f2 <can_get_mob_free+0x48>
     2e4:	8d ee       	ldi	r24, 0xED	; 237
     2e6:	90 e0       	ldi	r25, 0x00	; 0
     2e8:	2a 81       	ldd	r18, Y+2	; 0x02
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
     2ee:	89 81       	ldd	r24, Y+1	; 0x01
     2f0:	0c c0       	rjmp	.+24     	; 0x30a <can_get_mob_free+0x60>
     2f2:	89 81       	ldd	r24, Y+1	; 0x01
     2f4:	8f 5f       	subi	r24, 0xFF	; 255
     2f6:	89 83       	std	Y+1, r24	; 0x01
     2f8:	89 81       	ldd	r24, Y+1	; 0x01
     2fa:	86 30       	cpi	r24, 0x06	; 6
     2fc:	10 f3       	brcs	.-60     	; 0x2c2 <can_get_mob_free+0x18>
     2fe:	8d ee       	ldi	r24, 0xED	; 237
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	2a 81       	ldd	r18, Y+2	; 0x02
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
     308:	8f ef       	ldi	r24, 0xFF	; 255
     30a:	0f 90       	pop	r0
     30c:	0f 90       	pop	r0
     30e:	df 91       	pop	r29
     310:	cf 91       	pop	r28
     312:	08 95       	ret

00000314 <can_get_mob_status>:
     314:	cf 93       	push	r28
     316:	df 93       	push	r29
     318:	00 d0       	rcall	.+0      	; 0x31a <can_get_mob_status+0x6>
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	8f ee       	ldi	r24, 0xEF	; 239
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	fc 01       	movw	r30, r24
     324:	80 81       	ld	r24, Z
     326:	88 2f       	mov	r24, r24
     328:	90 e0       	ldi	r25, 0x00	; 0
     32a:	80 7c       	andi	r24, 0xC0	; 192
     32c:	99 27       	eor	r25, r25
     32e:	89 2b       	or	r24, r25
     330:	11 f4       	brne	.+4      	; 0x336 <can_get_mob_status+0x22>
     332:	8f ef       	ldi	r24, 0xFF	; 255
     334:	1c c0       	rjmp	.+56     	; 0x36e <can_get_mob_status+0x5a>
     336:	8e ee       	ldi	r24, 0xEE	; 238
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	fc 01       	movw	r30, r24
     33c:	80 81       	ld	r24, Z
     33e:	89 83       	std	Y+1, r24	; 0x01
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	80 7e       	andi	r24, 0xE0	; 224
     344:	8a 83       	std	Y+2, r24	; 0x02
     346:	8a 81       	ldd	r24, Y+2	; 0x02
     348:	80 32       	cpi	r24, 0x20	; 32
     34a:	31 f0       	breq	.+12     	; 0x358 <can_get_mob_status+0x44>
     34c:	8a 81       	ldd	r24, Y+2	; 0x02
     34e:	80 34       	cpi	r24, 0x40	; 64
     350:	19 f0       	breq	.+6      	; 0x358 <can_get_mob_status+0x44>
     352:	8a 81       	ldd	r24, Y+2	; 0x02
     354:	80 3a       	cpi	r24, 0xA0	; 160
     356:	11 f4       	brne	.+4      	; 0x35c <can_get_mob_status+0x48>
     358:	8a 81       	ldd	r24, Y+2	; 0x02
     35a:	09 c0       	rjmp	.+18     	; 0x36e <can_get_mob_status+0x5a>
     35c:	89 81       	ldd	r24, Y+1	; 0x01
     35e:	8f 71       	andi	r24, 0x1F	; 31
     360:	8a 83       	std	Y+2, r24	; 0x02
     362:	8a 81       	ldd	r24, Y+2	; 0x02
     364:	88 23       	and	r24, r24
     366:	11 f0       	breq	.+4      	; 0x36c <can_get_mob_status+0x58>
     368:	8a 81       	ldd	r24, Y+2	; 0x02
     36a:	01 c0       	rjmp	.+2      	; 0x36e <can_get_mob_status+0x5a>
     36c:	80 e0       	ldi	r24, 0x00	; 0
     36e:	0f 90       	pop	r0
     370:	0f 90       	pop	r0
     372:	df 91       	pop	r29
     374:	cf 91       	pop	r28
     376:	08 95       	ret

00000378 <can_get_data>:
     378:	cf 93       	push	r28
     37a:	df 93       	push	r29
     37c:	00 d0       	rcall	.+0      	; 0x37e <can_get_data+0x6>
     37e:	1f 92       	push	r1
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
     384:	9b 83       	std	Y+3, r25	; 0x03
     386:	8a 83       	std	Y+2, r24	; 0x02
     388:	19 82       	std	Y+1, r1	; 0x01
     38a:	10 c0       	rjmp	.+32     	; 0x3ac <can_get_data+0x34>
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	88 2f       	mov	r24, r24
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	2a 81       	ldd	r18, Y+2	; 0x02
     394:	3b 81       	ldd	r19, Y+3	; 0x03
     396:	82 0f       	add	r24, r18
     398:	93 1f       	adc	r25, r19
     39a:	2a ef       	ldi	r18, 0xFA	; 250
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	f9 01       	movw	r30, r18
     3a0:	20 81       	ld	r18, Z
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
     3a6:	89 81       	ldd	r24, Y+1	; 0x01
     3a8:	8f 5f       	subi	r24, 0xFF	; 255
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	89 81       	ldd	r24, Y+1	; 0x01
     3ae:	28 2f       	mov	r18, r24
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	8f ee       	ldi	r24, 0xEF	; 239
     3b4:	90 e0       	ldi	r25, 0x00	; 0
     3b6:	fc 01       	movw	r30, r24
     3b8:	80 81       	ld	r24, Z
     3ba:	88 2f       	mov	r24, r24
     3bc:	90 e0       	ldi	r25, 0x00	; 0
     3be:	8f 70       	andi	r24, 0x0F	; 15
     3c0:	99 27       	eor	r25, r25
     3c2:	28 17       	cp	r18, r24
     3c4:	39 07       	cpc	r19, r25
     3c6:	14 f3       	brlt	.-60     	; 0x38c <can_get_data+0x14>
     3c8:	00 00       	nop
     3ca:	0f 90       	pop	r0
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	df 91       	pop	r29
     3d2:	cf 91       	pop	r28
     3d4:	08 95       	ret

000003d6 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	1f 92       	push	r1
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     3e2:	88 ed       	ldi	r24, 0xD8	; 216
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	21 e0       	ldi	r18, 0x01	; 1
     3e8:	fc 01       	movw	r30, r24
     3ea:	20 83       	st	Z, r18
    Can_conf_bt();
     3ec:	82 ee       	ldi	r24, 0xE2	; 226
     3ee:	90 e0       	ldi	r25, 0x00	; 0
     3f0:	26 e0       	ldi	r18, 0x06	; 6
     3f2:	fc 01       	movw	r30, r24
     3f4:	20 83       	st	Z, r18
     3f6:	83 ee       	ldi	r24, 0xE3	; 227
     3f8:	90 e0       	ldi	r25, 0x00	; 0
     3fa:	24 e0       	ldi	r18, 0x04	; 4
     3fc:	fc 01       	movw	r30, r24
     3fe:	20 83       	st	Z, r18
     400:	84 ee       	ldi	r24, 0xE4	; 228
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	23 e1       	ldi	r18, 0x13	; 19
     406:	fc 01       	movw	r30, r24
     408:	20 83       	st	Z, r18
    return 1;
     40a:	81 e0       	ldi	r24, 0x01	; 1
     40c:	0f 90       	pop	r0
     40e:	df 91       	pop	r29
     410:	cf 91       	pop	r28
     412:	08 95       	ret

00000414 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     414:	cf 93       	push	r28
     416:	df 93       	push	r29
     418:	1f 92       	push	r1
     41a:	cd b7       	in	r28, 0x3d	; 61
     41c:	de b7       	in	r29, 0x3e	; 62
     41e:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     420:	89 81       	ldd	r24, Y+1	; 0x01
     422:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <can_fixed_baudrate>
     426:	88 23       	and	r24, r24
     428:	11 f4       	brne	.+4      	; 0x42e <can_init+0x1a>
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0c c0       	rjmp	.+24     	; 0x446 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     42e:	0e 94 26 01 	call	0x24c	; 0x24c <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     432:	88 ed       	ldi	r24, 0xD8	; 216
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	28 ed       	ldi	r18, 0xD8	; 216
     438:	30 e0       	ldi	r19, 0x00	; 0
     43a:	f9 01       	movw	r30, r18
     43c:	20 81       	ld	r18, Z
     43e:	22 60       	ori	r18, 0x02	; 2
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
    return (1);
     444:	81 e0       	ldi	r24, 0x01	; 1
}
     446:	0f 90       	pop	r0
     448:	df 91       	pop	r29
     44a:	cf 91       	pop	r28
     44c:	08 95       	ret

0000044e <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	2a 97       	sbiw	r28, 0x0a	; 10
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	f8 94       	cli
     45c:	de bf       	out	0x3e, r29	; 62
     45e:	0f be       	out	0x3f, r0	; 63
     460:	cd bf       	out	0x3d, r28	; 61
     462:	9a 87       	std	Y+10, r25	; 0x0a
     464:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     466:	89 85       	ldd	r24, Y+9	; 0x09
     468:	9a 85       	ldd	r25, Y+10	; 0x0a
     46a:	fc 01       	movw	r30, r24
     46c:	81 81       	ldd	r24, Z+1	; 0x01
     46e:	8c 30       	cpi	r24, 0x0C	; 12
     470:	39 f5       	brne	.+78     	; 0x4c0 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     472:	89 85       	ldd	r24, Y+9	; 0x09
     474:	9a 85       	ldd	r25, Y+10	; 0x0a
     476:	fc 01       	movw	r30, r24
     478:	81 85       	ldd	r24, Z+9	; 0x09
     47a:	80 36       	cpi	r24, 0x60	; 96
     47c:	d9 f4       	brne	.+54     	; 0x4b4 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     47e:	8d ee       	ldi	r24, 0xED	; 237
     480:	90 e0       	ldi	r25, 0x00	; 0
     482:	29 85       	ldd	r18, Y+9	; 0x09
     484:	3a 85       	ldd	r19, Y+10	; 0x0a
     486:	f9 01       	movw	r30, r18
     488:	20 81       	ld	r18, Z
     48a:	22 95       	swap	r18
     48c:	20 7f       	andi	r18, 0xF0	; 240
     48e:	fc 01       	movw	r30, r24
     490:	20 83       	st	Z, r18
      Can_mob_abort();
     492:	8f ee       	ldi	r24, 0xEF	; 239
     494:	90 e0       	ldi	r25, 0x00	; 0
     496:	2f ee       	ldi	r18, 0xEF	; 239
     498:	30 e0       	ldi	r19, 0x00	; 0
     49a:	f9 01       	movw	r30, r18
     49c:	20 81       	ld	r18, Z
     49e:	2f 73       	andi	r18, 0x3F	; 63
     4a0:	fc 01       	movw	r30, r24
     4a2:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     4a4:	8e ee       	ldi	r24, 0xEE	; 238
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	fc 01       	movw	r30, r24
     4aa:	10 82       	st	Z, r1
      cmd->handle = 0;
     4ac:	89 85       	ldd	r24, Y+9	; 0x09
     4ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b0:	fc 01       	movw	r30, r24
     4b2:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     4b4:	89 85       	ldd	r24, Y+9	; 0x09
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	fc 01       	movw	r30, r24
     4ba:	11 86       	std	Z+9, r1	; 0x09
     4bc:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__stack+0x1067>
  }
  else
  {
    mob_handle = can_get_mob_free();
     4c0:	0e 94 55 01 	call	0x2aa	; 0x2aa <can_get_mob_free>
     4c4:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     4c6:	8c 81       	ldd	r24, Y+4	; 0x04
     4c8:	8f 3f       	cpi	r24, 0xFF	; 255
     4ca:	11 f4       	brne	.+4      	; 0x4d0 <can_cmd+0x82>
     4cc:	0c 94 ac 0c 	jmp	0x1958	; 0x1958 <__stack+0x1059>
    {
      cmd->status = MOB_PENDING; 
     4d0:	89 85       	ldd	r24, Y+9	; 0x09
     4d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     4d4:	20 e6       	ldi	r18, 0x60	; 96
     4d6:	fc 01       	movw	r30, r24
     4d8:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     4da:	89 85       	ldd	r24, Y+9	; 0x09
     4dc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4de:	2c 81       	ldd	r18, Y+4	; 0x04
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     4e4:	8d ee       	ldi	r24, 0xED	; 237
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	2c 81       	ldd	r18, Y+4	; 0x04
     4ea:	22 95       	swap	r18
     4ec:	20 7f       	andi	r18, 0xF0	; 240
     4ee:	fc 01       	movw	r30, r24
     4f0:	20 83       	st	Z, r18
      Can_clear_mob();
     4f2:	8e ee       	ldi	r24, 0xEE	; 238
     4f4:	90 e0       	ldi	r25, 0x00	; 0
     4f6:	9b 83       	std	Y+3, r25	; 0x03
     4f8:	8a 83       	std	Y+2, r24	; 0x02
     4fa:	09 c0       	rjmp	.+18     	; 0x50e <can_cmd+0xc0>
     4fc:	8a 81       	ldd	r24, Y+2	; 0x02
     4fe:	9b 81       	ldd	r25, Y+3	; 0x03
     500:	fc 01       	movw	r30, r24
     502:	10 82       	st	Z, r1
     504:	8a 81       	ldd	r24, Y+2	; 0x02
     506:	9b 81       	ldd	r25, Y+3	; 0x03
     508:	01 96       	adiw	r24, 0x01	; 1
     50a:	9b 83       	std	Y+3, r25	; 0x03
     50c:	8a 83       	std	Y+2, r24	; 0x02
     50e:	8a 81       	ldd	r24, Y+2	; 0x02
     510:	9b 81       	ldd	r25, Y+3	; 0x03
     512:	88 3f       	cpi	r24, 0xF8	; 248
     514:	91 05       	cpc	r25, r1
     516:	90 f3       	brcs	.-28     	; 0x4fc <can_cmd+0xae>
          
      switch (cmd->cmd)
     518:	89 85       	ldd	r24, Y+9	; 0x09
     51a:	9a 85       	ldd	r25, Y+10	; 0x0a
     51c:	fc 01       	movw	r30, r24
     51e:	81 81       	ldd	r24, Z+1	; 0x01
     520:	88 2f       	mov	r24, r24
     522:	90 e0       	ldi	r25, 0x00	; 0
     524:	09 2e       	mov	r0, r25
     526:	00 0c       	add	r0, r0
     528:	aa 0b       	sbc	r26, r26
     52a:	bb 0b       	sbc	r27, r27
     52c:	41 e0       	ldi	r20, 0x01	; 1
     52e:	50 e0       	ldi	r21, 0x00	; 0
     530:	2a e0       	ldi	r18, 0x0A	; 10
     532:	30 e0       	ldi	r19, 0x00	; 0
     534:	84 1b       	sub	r24, r20
     536:	95 0b       	sbc	r25, r21
     538:	28 17       	cp	r18, r24
     53a:	39 07       	cpc	r19, r25
     53c:	10 f4       	brcc	.+4      	; 0x542 <can_cmd+0xf4>
     53e:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <__stack+0x104d>
     542:	82 5c       	subi	r24, 0xC2	; 194
     544:	9f 4f       	sbci	r25, 0xFF	; 255
     546:	fc 01       	movw	r30, r24
     548:	0c 94 d2 11 	jmp	0x23a4	; 0x23a4 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     54c:	89 85       	ldd	r24, Y+9	; 0x09
     54e:	9a 85       	ldd	r25, Y+10	; 0x0a
     550:	fc 01       	movw	r30, r24
     552:	83 85       	ldd	r24, Z+11	; 0x0b
     554:	88 23       	and	r24, r24
     556:	09 f4       	brne	.+2      	; 0x55a <can_cmd+0x10c>
     558:	69 c0       	rjmp	.+210    	; 0x62c <can_cmd+0x1de>
     55a:	83 ef       	ldi	r24, 0xF3	; 243
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	29 85       	ldd	r18, Y+9	; 0x09
     560:	3a 85       	ldd	r19, Y+10	; 0x0a
     562:	2e 5f       	subi	r18, 0xFE	; 254
     564:	3f 4f       	sbci	r19, 0xFF	; 255
     566:	2d 5f       	subi	r18, 0xFD	; 253
     568:	3f 4f       	sbci	r19, 0xFF	; 255
     56a:	f9 01       	movw	r30, r18
     56c:	20 81       	ld	r18, Z
     56e:	42 2f       	mov	r20, r18
     570:	44 0f       	add	r20, r20
     572:	44 0f       	add	r20, r20
     574:	44 0f       	add	r20, r20
     576:	29 85       	ldd	r18, Y+9	; 0x09
     578:	3a 85       	ldd	r19, Y+10	; 0x0a
     57a:	2e 5f       	subi	r18, 0xFE	; 254
     57c:	3f 4f       	sbci	r19, 0xFF	; 255
     57e:	2e 5f       	subi	r18, 0xFE	; 254
     580:	3f 4f       	sbci	r19, 0xFF	; 255
     582:	f9 01       	movw	r30, r18
     584:	20 81       	ld	r18, Z
     586:	22 95       	swap	r18
     588:	26 95       	lsr	r18
     58a:	27 70       	andi	r18, 0x07	; 7
     58c:	24 0f       	add	r18, r20
     58e:	fc 01       	movw	r30, r24
     590:	20 83       	st	Z, r18
     592:	82 ef       	ldi	r24, 0xF2	; 242
     594:	90 e0       	ldi	r25, 0x00	; 0
     596:	29 85       	ldd	r18, Y+9	; 0x09
     598:	3a 85       	ldd	r19, Y+10	; 0x0a
     59a:	2e 5f       	subi	r18, 0xFE	; 254
     59c:	3f 4f       	sbci	r19, 0xFF	; 255
     59e:	2e 5f       	subi	r18, 0xFE	; 254
     5a0:	3f 4f       	sbci	r19, 0xFF	; 255
     5a2:	f9 01       	movw	r30, r18
     5a4:	20 81       	ld	r18, Z
     5a6:	42 2f       	mov	r20, r18
     5a8:	44 0f       	add	r20, r20
     5aa:	44 0f       	add	r20, r20
     5ac:	44 0f       	add	r20, r20
     5ae:	29 85       	ldd	r18, Y+9	; 0x09
     5b0:	3a 85       	ldd	r19, Y+10	; 0x0a
     5b2:	2e 5f       	subi	r18, 0xFE	; 254
     5b4:	3f 4f       	sbci	r19, 0xFF	; 255
     5b6:	2f 5f       	subi	r18, 0xFF	; 255
     5b8:	3f 4f       	sbci	r19, 0xFF	; 255
     5ba:	f9 01       	movw	r30, r18
     5bc:	20 81       	ld	r18, Z
     5be:	22 95       	swap	r18
     5c0:	26 95       	lsr	r18
     5c2:	27 70       	andi	r18, 0x07	; 7
     5c4:	24 0f       	add	r18, r20
     5c6:	fc 01       	movw	r30, r24
     5c8:	20 83       	st	Z, r18
     5ca:	81 ef       	ldi	r24, 0xF1	; 241
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	29 85       	ldd	r18, Y+9	; 0x09
     5d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     5d2:	2e 5f       	subi	r18, 0xFE	; 254
     5d4:	3f 4f       	sbci	r19, 0xFF	; 255
     5d6:	2f 5f       	subi	r18, 0xFF	; 255
     5d8:	3f 4f       	sbci	r19, 0xFF	; 255
     5da:	f9 01       	movw	r30, r18
     5dc:	20 81       	ld	r18, Z
     5de:	42 2f       	mov	r20, r18
     5e0:	44 0f       	add	r20, r20
     5e2:	44 0f       	add	r20, r20
     5e4:	44 0f       	add	r20, r20
     5e6:	29 85       	ldd	r18, Y+9	; 0x09
     5e8:	3a 85       	ldd	r19, Y+10	; 0x0a
     5ea:	2e 5f       	subi	r18, 0xFE	; 254
     5ec:	3f 4f       	sbci	r19, 0xFF	; 255
     5ee:	f9 01       	movw	r30, r18
     5f0:	20 81       	ld	r18, Z
     5f2:	22 95       	swap	r18
     5f4:	26 95       	lsr	r18
     5f6:	27 70       	andi	r18, 0x07	; 7
     5f8:	24 0f       	add	r18, r20
     5fa:	fc 01       	movw	r30, r24
     5fc:	20 83       	st	Z, r18
     5fe:	80 ef       	ldi	r24, 0xF0	; 240
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	29 85       	ldd	r18, Y+9	; 0x09
     604:	3a 85       	ldd	r19, Y+10	; 0x0a
     606:	2e 5f       	subi	r18, 0xFE	; 254
     608:	3f 4f       	sbci	r19, 0xFF	; 255
     60a:	f9 01       	movw	r30, r18
     60c:	20 81       	ld	r18, Z
     60e:	22 0f       	add	r18, r18
     610:	22 0f       	add	r18, r18
     612:	22 0f       	add	r18, r18
     614:	fc 01       	movw	r30, r24
     616:	20 83       	st	Z, r18
     618:	8f ee       	ldi	r24, 0xEF	; 239
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	2f ee       	ldi	r18, 0xEF	; 239
     61e:	30 e0       	ldi	r19, 0x00	; 0
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	20 61       	ori	r18, 0x10	; 16
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	30 c0       	rjmp	.+96     	; 0x68c <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     62c:	83 ef       	ldi	r24, 0xF3	; 243
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	29 85       	ldd	r18, Y+9	; 0x09
     632:	3a 85       	ldd	r19, Y+10	; 0x0a
     634:	2e 5f       	subi	r18, 0xFE	; 254
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	2f 5f       	subi	r18, 0xFF	; 255
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	42 2f       	mov	r20, r18
     642:	42 95       	swap	r20
     644:	44 0f       	add	r20, r20
     646:	40 7e       	andi	r20, 0xE0	; 224
     648:	29 85       	ldd	r18, Y+9	; 0x09
     64a:	3a 85       	ldd	r19, Y+10	; 0x0a
     64c:	2e 5f       	subi	r18, 0xFE	; 254
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	f9 01       	movw	r30, r18
     652:	20 81       	ld	r18, Z
     654:	26 95       	lsr	r18
     656:	26 95       	lsr	r18
     658:	26 95       	lsr	r18
     65a:	24 0f       	add	r18, r20
     65c:	fc 01       	movw	r30, r24
     65e:	20 83       	st	Z, r18
     660:	82 ef       	ldi	r24, 0xF2	; 242
     662:	90 e0       	ldi	r25, 0x00	; 0
     664:	29 85       	ldd	r18, Y+9	; 0x09
     666:	3a 85       	ldd	r19, Y+10	; 0x0a
     668:	2e 5f       	subi	r18, 0xFE	; 254
     66a:	3f 4f       	sbci	r19, 0xFF	; 255
     66c:	f9 01       	movw	r30, r18
     66e:	20 81       	ld	r18, Z
     670:	22 95       	swap	r18
     672:	22 0f       	add	r18, r18
     674:	20 7e       	andi	r18, 0xE0	; 224
     676:	fc 01       	movw	r30, r24
     678:	20 83       	st	Z, r18
     67a:	8f ee       	ldi	r24, 0xEF	; 239
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	2f ee       	ldi	r18, 0xEF	; 239
     680:	30 e0       	ldi	r19, 0x00	; 0
     682:	f9 01       	movw	r30, r18
     684:	20 81       	ld	r18, Z
     686:	2f 7e       	andi	r18, 0xEF	; 239
     688:	fc 01       	movw	r30, r24
     68a:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     68c:	19 82       	std	Y+1, r1	; 0x01
     68e:	13 c0       	rjmp	.+38     	; 0x6b6 <can_cmd+0x268>
     690:	8a ef       	ldi	r24, 0xFA	; 250
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	29 85       	ldd	r18, Y+9	; 0x09
     696:	3a 85       	ldd	r19, Y+10	; 0x0a
     698:	f9 01       	movw	r30, r18
     69a:	47 81       	ldd	r20, Z+7	; 0x07
     69c:	50 85       	ldd	r21, Z+8	; 0x08
     69e:	29 81       	ldd	r18, Y+1	; 0x01
     6a0:	22 2f       	mov	r18, r18
     6a2:	30 e0       	ldi	r19, 0x00	; 0
     6a4:	24 0f       	add	r18, r20
     6a6:	35 1f       	adc	r19, r21
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	fc 01       	movw	r30, r24
     6ae:	20 83       	st	Z, r18
     6b0:	89 81       	ldd	r24, Y+1	; 0x01
     6b2:	8f 5f       	subi	r24, 0xFF	; 255
     6b4:	89 83       	std	Y+1, r24	; 0x01
     6b6:	89 85       	ldd	r24, Y+9	; 0x09
     6b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     6ba:	fc 01       	movw	r30, r24
     6bc:	96 81       	ldd	r25, Z+6	; 0x06
     6be:	89 81       	ldd	r24, Y+1	; 0x01
     6c0:	89 17       	cp	r24, r25
     6c2:	30 f3       	brcs	.-52     	; 0x690 <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     6c4:	89 85       	ldd	r24, Y+9	; 0x09
     6c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     6c8:	fc 01       	movw	r30, r24
     6ca:	82 85       	ldd	r24, Z+10	; 0x0a
     6cc:	88 23       	and	r24, r24
     6ce:	51 f0       	breq	.+20     	; 0x6e4 <can_cmd+0x296>
     6d0:	80 ef       	ldi	r24, 0xF0	; 240
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	20 ef       	ldi	r18, 0xF0	; 240
     6d6:	30 e0       	ldi	r19, 0x00	; 0
     6d8:	f9 01       	movw	r30, r18
     6da:	20 81       	ld	r18, Z
     6dc:	24 60       	ori	r18, 0x04	; 4
     6de:	fc 01       	movw	r30, r24
     6e0:	20 83       	st	Z, r18
     6e2:	09 c0       	rjmp	.+18     	; 0x6f6 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     6e4:	80 ef       	ldi	r24, 0xF0	; 240
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	20 ef       	ldi	r18, 0xF0	; 240
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	f9 01       	movw	r30, r18
     6ee:	20 81       	ld	r18, Z
     6f0:	2b 7f       	andi	r18, 0xFB	; 251
     6f2:	fc 01       	movw	r30, r24
     6f4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     6f6:	8f ee       	ldi	r24, 0xEF	; 239
     6f8:	90 e0       	ldi	r25, 0x00	; 0
     6fa:	2f ee       	ldi	r18, 0xEF	; 239
     6fc:	30 e0       	ldi	r19, 0x00	; 0
     6fe:	f9 01       	movw	r30, r18
     700:	40 81       	ld	r20, Z
     702:	29 85       	ldd	r18, Y+9	; 0x09
     704:	3a 85       	ldd	r19, Y+10	; 0x0a
     706:	f9 01       	movw	r30, r18
     708:	26 81       	ldd	r18, Z+6	; 0x06
     70a:	24 2b       	or	r18, r20
     70c:	fc 01       	movw	r30, r24
     70e:	20 83       	st	Z, r18
          Can_config_tx();
     710:	8f ee       	ldi	r24, 0xEF	; 239
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	2f ee       	ldi	r18, 0xEF	; 239
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	f9 01       	movw	r30, r18
     71a:	20 81       	ld	r18, Z
     71c:	2f 73       	andi	r18, 0x3F	; 63
     71e:	fc 01       	movw	r30, r24
     720:	20 83       	st	Z, r18
     722:	8f ee       	ldi	r24, 0xEF	; 239
     724:	90 e0       	ldi	r25, 0x00	; 0
     726:	2f ee       	ldi	r18, 0xEF	; 239
     728:	30 e0       	ldi	r19, 0x00	; 0
     72a:	f9 01       	movw	r30, r18
     72c:	20 81       	ld	r18, Z
     72e:	20 64       	ori	r18, 0x40	; 64
     730:	fc 01       	movw	r30, r24
     732:	20 83       	st	Z, r18
          break;
     734:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     738:	89 85       	ldd	r24, Y+9	; 0x09
     73a:	9a 85       	ldd	r25, Y+10	; 0x0a
     73c:	fc 01       	movw	r30, r24
     73e:	83 85       	ldd	r24, Z+11	; 0x0b
     740:	88 23       	and	r24, r24
     742:	09 f4       	brne	.+2      	; 0x746 <can_cmd+0x2f8>
     744:	69 c0       	rjmp	.+210    	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     746:	83 ef       	ldi	r24, 0xF3	; 243
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	29 85       	ldd	r18, Y+9	; 0x09
     74c:	3a 85       	ldd	r19, Y+10	; 0x0a
     74e:	2e 5f       	subi	r18, 0xFE	; 254
     750:	3f 4f       	sbci	r19, 0xFF	; 255
     752:	2d 5f       	subi	r18, 0xFD	; 253
     754:	3f 4f       	sbci	r19, 0xFF	; 255
     756:	f9 01       	movw	r30, r18
     758:	20 81       	ld	r18, Z
     75a:	42 2f       	mov	r20, r18
     75c:	44 0f       	add	r20, r20
     75e:	44 0f       	add	r20, r20
     760:	44 0f       	add	r20, r20
     762:	29 85       	ldd	r18, Y+9	; 0x09
     764:	3a 85       	ldd	r19, Y+10	; 0x0a
     766:	2e 5f       	subi	r18, 0xFE	; 254
     768:	3f 4f       	sbci	r19, 0xFF	; 255
     76a:	2e 5f       	subi	r18, 0xFE	; 254
     76c:	3f 4f       	sbci	r19, 0xFF	; 255
     76e:	f9 01       	movw	r30, r18
     770:	20 81       	ld	r18, Z
     772:	22 95       	swap	r18
     774:	26 95       	lsr	r18
     776:	27 70       	andi	r18, 0x07	; 7
     778:	24 0f       	add	r18, r20
     77a:	fc 01       	movw	r30, r24
     77c:	20 83       	st	Z, r18
     77e:	82 ef       	ldi	r24, 0xF2	; 242
     780:	90 e0       	ldi	r25, 0x00	; 0
     782:	29 85       	ldd	r18, Y+9	; 0x09
     784:	3a 85       	ldd	r19, Y+10	; 0x0a
     786:	2e 5f       	subi	r18, 0xFE	; 254
     788:	3f 4f       	sbci	r19, 0xFF	; 255
     78a:	2e 5f       	subi	r18, 0xFE	; 254
     78c:	3f 4f       	sbci	r19, 0xFF	; 255
     78e:	f9 01       	movw	r30, r18
     790:	20 81       	ld	r18, Z
     792:	42 2f       	mov	r20, r18
     794:	44 0f       	add	r20, r20
     796:	44 0f       	add	r20, r20
     798:	44 0f       	add	r20, r20
     79a:	29 85       	ldd	r18, Y+9	; 0x09
     79c:	3a 85       	ldd	r19, Y+10	; 0x0a
     79e:	2e 5f       	subi	r18, 0xFE	; 254
     7a0:	3f 4f       	sbci	r19, 0xFF	; 255
     7a2:	2f 5f       	subi	r18, 0xFF	; 255
     7a4:	3f 4f       	sbci	r19, 0xFF	; 255
     7a6:	f9 01       	movw	r30, r18
     7a8:	20 81       	ld	r18, Z
     7aa:	22 95       	swap	r18
     7ac:	26 95       	lsr	r18
     7ae:	27 70       	andi	r18, 0x07	; 7
     7b0:	24 0f       	add	r18, r20
     7b2:	fc 01       	movw	r30, r24
     7b4:	20 83       	st	Z, r18
     7b6:	81 ef       	ldi	r24, 0xF1	; 241
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	29 85       	ldd	r18, Y+9	; 0x09
     7bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     7be:	2e 5f       	subi	r18, 0xFE	; 254
     7c0:	3f 4f       	sbci	r19, 0xFF	; 255
     7c2:	2f 5f       	subi	r18, 0xFF	; 255
     7c4:	3f 4f       	sbci	r19, 0xFF	; 255
     7c6:	f9 01       	movw	r30, r18
     7c8:	20 81       	ld	r18, Z
     7ca:	42 2f       	mov	r20, r18
     7cc:	44 0f       	add	r20, r20
     7ce:	44 0f       	add	r20, r20
     7d0:	44 0f       	add	r20, r20
     7d2:	29 85       	ldd	r18, Y+9	; 0x09
     7d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d6:	2e 5f       	subi	r18, 0xFE	; 254
     7d8:	3f 4f       	sbci	r19, 0xFF	; 255
     7da:	f9 01       	movw	r30, r18
     7dc:	20 81       	ld	r18, Z
     7de:	22 95       	swap	r18
     7e0:	26 95       	lsr	r18
     7e2:	27 70       	andi	r18, 0x07	; 7
     7e4:	24 0f       	add	r18, r20
     7e6:	fc 01       	movw	r30, r24
     7e8:	20 83       	st	Z, r18
     7ea:	80 ef       	ldi	r24, 0xF0	; 240
     7ec:	90 e0       	ldi	r25, 0x00	; 0
     7ee:	29 85       	ldd	r18, Y+9	; 0x09
     7f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     7f2:	2e 5f       	subi	r18, 0xFE	; 254
     7f4:	3f 4f       	sbci	r19, 0xFF	; 255
     7f6:	f9 01       	movw	r30, r18
     7f8:	20 81       	ld	r18, Z
     7fa:	22 0f       	add	r18, r18
     7fc:	22 0f       	add	r18, r18
     7fe:	22 0f       	add	r18, r18
     800:	fc 01       	movw	r30, r24
     802:	20 83       	st	Z, r18
     804:	8f ee       	ldi	r24, 0xEF	; 239
     806:	90 e0       	ldi	r25, 0x00	; 0
     808:	2f ee       	ldi	r18, 0xEF	; 239
     80a:	30 e0       	ldi	r19, 0x00	; 0
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	20 61       	ori	r18, 0x10	; 16
     812:	fc 01       	movw	r30, r24
     814:	20 83       	st	Z, r18
     816:	30 c0       	rjmp	.+96     	; 0x878 <__DATA_REGION_LENGTH__+0x78>
          else              { Can_set_std_id(cmd->id.std);}
     818:	83 ef       	ldi	r24, 0xF3	; 243
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	29 85       	ldd	r18, Y+9	; 0x09
     81e:	3a 85       	ldd	r19, Y+10	; 0x0a
     820:	2e 5f       	subi	r18, 0xFE	; 254
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	2f 5f       	subi	r18, 0xFF	; 255
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	f9 01       	movw	r30, r18
     82a:	20 81       	ld	r18, Z
     82c:	42 2f       	mov	r20, r18
     82e:	42 95       	swap	r20
     830:	44 0f       	add	r20, r20
     832:	40 7e       	andi	r20, 0xE0	; 224
     834:	29 85       	ldd	r18, Y+9	; 0x09
     836:	3a 85       	ldd	r19, Y+10	; 0x0a
     838:	2e 5f       	subi	r18, 0xFE	; 254
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	f9 01       	movw	r30, r18
     83e:	20 81       	ld	r18, Z
     840:	26 95       	lsr	r18
     842:	26 95       	lsr	r18
     844:	26 95       	lsr	r18
     846:	24 0f       	add	r18, r20
     848:	fc 01       	movw	r30, r24
     84a:	20 83       	st	Z, r18
     84c:	82 ef       	ldi	r24, 0xF2	; 242
     84e:	90 e0       	ldi	r25, 0x00	; 0
     850:	29 85       	ldd	r18, Y+9	; 0x09
     852:	3a 85       	ldd	r19, Y+10	; 0x0a
     854:	2e 5f       	subi	r18, 0xFE	; 254
     856:	3f 4f       	sbci	r19, 0xFF	; 255
     858:	f9 01       	movw	r30, r18
     85a:	20 81       	ld	r18, Z
     85c:	22 95       	swap	r18
     85e:	22 0f       	add	r18, r18
     860:	20 7e       	andi	r18, 0xE0	; 224
     862:	fc 01       	movw	r30, r24
     864:	20 83       	st	Z, r18
     866:	8f ee       	ldi	r24, 0xEF	; 239
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	2f ee       	ldi	r18, 0xEF	; 239
     86c:	30 e0       	ldi	r19, 0x00	; 0
     86e:	f9 01       	movw	r30, r18
     870:	20 81       	ld	r18, Z
     872:	2f 7e       	andi	r18, 0xEF	; 239
     874:	fc 01       	movw	r30, r24
     876:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     878:	19 82       	std	Y+1, r1	; 0x01
     87a:	13 c0       	rjmp	.+38     	; 0x8a2 <__DATA_REGION_LENGTH__+0xa2>
     87c:	8a ef       	ldi	r24, 0xFA	; 250
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	29 85       	ldd	r18, Y+9	; 0x09
     882:	3a 85       	ldd	r19, Y+10	; 0x0a
     884:	f9 01       	movw	r30, r18
     886:	47 81       	ldd	r20, Z+7	; 0x07
     888:	50 85       	ldd	r21, Z+8	; 0x08
     88a:	29 81       	ldd	r18, Y+1	; 0x01
     88c:	22 2f       	mov	r18, r18
     88e:	30 e0       	ldi	r19, 0x00	; 0
     890:	24 0f       	add	r18, r20
     892:	35 1f       	adc	r19, r21
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	fc 01       	movw	r30, r24
     89a:	20 83       	st	Z, r18
     89c:	89 81       	ldd	r24, Y+1	; 0x01
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	89 83       	std	Y+1, r24	; 0x01
     8a2:	89 85       	ldd	r24, Y+9	; 0x09
     8a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     8a6:	fc 01       	movw	r30, r24
     8a8:	96 81       	ldd	r25, Z+6	; 0x06
     8aa:	89 81       	ldd	r24, Y+1	; 0x01
     8ac:	89 17       	cp	r24, r25
     8ae:	30 f3       	brcs	.-52     	; 0x87c <__DATA_REGION_LENGTH__+0x7c>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     8b0:	89 85       	ldd	r24, Y+9	; 0x09
     8b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     8b4:	fc 01       	movw	r30, r24
     8b6:	12 86       	std	Z+10, r1	; 0x0a
     8b8:	80 ef       	ldi	r24, 0xF0	; 240
     8ba:	90 e0       	ldi	r25, 0x00	; 0
     8bc:	20 ef       	ldi	r18, 0xF0	; 240
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	f9 01       	movw	r30, r18
     8c2:	20 81       	ld	r18, Z
     8c4:	2b 7f       	andi	r18, 0xFB	; 251
     8c6:	fc 01       	movw	r30, r24
     8c8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     8ca:	8f ee       	ldi	r24, 0xEF	; 239
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	2f ee       	ldi	r18, 0xEF	; 239
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	f9 01       	movw	r30, r18
     8d4:	40 81       	ld	r20, Z
     8d6:	29 85       	ldd	r18, Y+9	; 0x09
     8d8:	3a 85       	ldd	r19, Y+10	; 0x0a
     8da:	f9 01       	movw	r30, r18
     8dc:	26 81       	ldd	r18, Z+6	; 0x06
     8de:	24 2b       	or	r18, r20
     8e0:	fc 01       	movw	r30, r24
     8e2:	20 83       	st	Z, r18
          Can_config_tx();
     8e4:	8f ee       	ldi	r24, 0xEF	; 239
     8e6:	90 e0       	ldi	r25, 0x00	; 0
     8e8:	2f ee       	ldi	r18, 0xEF	; 239
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	f9 01       	movw	r30, r18
     8ee:	20 81       	ld	r18, Z
     8f0:	2f 73       	andi	r18, 0x3F	; 63
     8f2:	fc 01       	movw	r30, r24
     8f4:	20 83       	st	Z, r18
     8f6:	8f ee       	ldi	r24, 0xEF	; 239
     8f8:	90 e0       	ldi	r25, 0x00	; 0
     8fa:	2f ee       	ldi	r18, 0xEF	; 239
     8fc:	30 e0       	ldi	r19, 0x00	; 0
     8fe:	f9 01       	movw	r30, r18
     900:	20 81       	ld	r18, Z
     902:	20 64       	ori	r18, 0x40	; 64
     904:	fc 01       	movw	r30, r24
     906:	20 83       	st	Z, r18
          break;
     908:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     90c:	89 85       	ldd	r24, Y+9	; 0x09
     90e:	9a 85       	ldd	r25, Y+10	; 0x0a
     910:	fc 01       	movw	r30, r24
     912:	83 85       	ldd	r24, Z+11	; 0x0b
     914:	88 23       	and	r24, r24
     916:	09 f4       	brne	.+2      	; 0x91a <__stack+0x1b>
     918:	69 c0       	rjmp	.+210    	; 0x9ec <__stack+0xed>
     91a:	83 ef       	ldi	r24, 0xF3	; 243
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	29 85       	ldd	r18, Y+9	; 0x09
     920:	3a 85       	ldd	r19, Y+10	; 0x0a
     922:	2e 5f       	subi	r18, 0xFE	; 254
     924:	3f 4f       	sbci	r19, 0xFF	; 255
     926:	2d 5f       	subi	r18, 0xFD	; 253
     928:	3f 4f       	sbci	r19, 0xFF	; 255
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	42 2f       	mov	r20, r18
     930:	44 0f       	add	r20, r20
     932:	44 0f       	add	r20, r20
     934:	44 0f       	add	r20, r20
     936:	29 85       	ldd	r18, Y+9	; 0x09
     938:	3a 85       	ldd	r19, Y+10	; 0x0a
     93a:	2e 5f       	subi	r18, 0xFE	; 254
     93c:	3f 4f       	sbci	r19, 0xFF	; 255
     93e:	2e 5f       	subi	r18, 0xFE	; 254
     940:	3f 4f       	sbci	r19, 0xFF	; 255
     942:	f9 01       	movw	r30, r18
     944:	20 81       	ld	r18, Z
     946:	22 95       	swap	r18
     948:	26 95       	lsr	r18
     94a:	27 70       	andi	r18, 0x07	; 7
     94c:	24 0f       	add	r18, r20
     94e:	fc 01       	movw	r30, r24
     950:	20 83       	st	Z, r18
     952:	82 ef       	ldi	r24, 0xF2	; 242
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	29 85       	ldd	r18, Y+9	; 0x09
     958:	3a 85       	ldd	r19, Y+10	; 0x0a
     95a:	2e 5f       	subi	r18, 0xFE	; 254
     95c:	3f 4f       	sbci	r19, 0xFF	; 255
     95e:	2e 5f       	subi	r18, 0xFE	; 254
     960:	3f 4f       	sbci	r19, 0xFF	; 255
     962:	f9 01       	movw	r30, r18
     964:	20 81       	ld	r18, Z
     966:	42 2f       	mov	r20, r18
     968:	44 0f       	add	r20, r20
     96a:	44 0f       	add	r20, r20
     96c:	44 0f       	add	r20, r20
     96e:	29 85       	ldd	r18, Y+9	; 0x09
     970:	3a 85       	ldd	r19, Y+10	; 0x0a
     972:	2e 5f       	subi	r18, 0xFE	; 254
     974:	3f 4f       	sbci	r19, 0xFF	; 255
     976:	2f 5f       	subi	r18, 0xFF	; 255
     978:	3f 4f       	sbci	r19, 0xFF	; 255
     97a:	f9 01       	movw	r30, r18
     97c:	20 81       	ld	r18, Z
     97e:	22 95       	swap	r18
     980:	26 95       	lsr	r18
     982:	27 70       	andi	r18, 0x07	; 7
     984:	24 0f       	add	r18, r20
     986:	fc 01       	movw	r30, r24
     988:	20 83       	st	Z, r18
     98a:	81 ef       	ldi	r24, 0xF1	; 241
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	29 85       	ldd	r18, Y+9	; 0x09
     990:	3a 85       	ldd	r19, Y+10	; 0x0a
     992:	2e 5f       	subi	r18, 0xFE	; 254
     994:	3f 4f       	sbci	r19, 0xFF	; 255
     996:	2f 5f       	subi	r18, 0xFF	; 255
     998:	3f 4f       	sbci	r19, 0xFF	; 255
     99a:	f9 01       	movw	r30, r18
     99c:	20 81       	ld	r18, Z
     99e:	42 2f       	mov	r20, r18
     9a0:	44 0f       	add	r20, r20
     9a2:	44 0f       	add	r20, r20
     9a4:	44 0f       	add	r20, r20
     9a6:	29 85       	ldd	r18, Y+9	; 0x09
     9a8:	3a 85       	ldd	r19, Y+10	; 0x0a
     9aa:	2e 5f       	subi	r18, 0xFE	; 254
     9ac:	3f 4f       	sbci	r19, 0xFF	; 255
     9ae:	f9 01       	movw	r30, r18
     9b0:	20 81       	ld	r18, Z
     9b2:	22 95       	swap	r18
     9b4:	26 95       	lsr	r18
     9b6:	27 70       	andi	r18, 0x07	; 7
     9b8:	24 0f       	add	r18, r20
     9ba:	fc 01       	movw	r30, r24
     9bc:	20 83       	st	Z, r18
     9be:	80 ef       	ldi	r24, 0xF0	; 240
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	29 85       	ldd	r18, Y+9	; 0x09
     9c4:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c6:	2e 5f       	subi	r18, 0xFE	; 254
     9c8:	3f 4f       	sbci	r19, 0xFF	; 255
     9ca:	f9 01       	movw	r30, r18
     9cc:	20 81       	ld	r18, Z
     9ce:	22 0f       	add	r18, r18
     9d0:	22 0f       	add	r18, r18
     9d2:	22 0f       	add	r18, r18
     9d4:	fc 01       	movw	r30, r24
     9d6:	20 83       	st	Z, r18
     9d8:	8f ee       	ldi	r24, 0xEF	; 239
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	2f ee       	ldi	r18, 0xEF	; 239
     9de:	30 e0       	ldi	r19, 0x00	; 0
     9e0:	f9 01       	movw	r30, r18
     9e2:	20 81       	ld	r18, Z
     9e4:	20 61       	ori	r18, 0x10	; 16
     9e6:	fc 01       	movw	r30, r24
     9e8:	20 83       	st	Z, r18
     9ea:	30 c0       	rjmp	.+96     	; 0xa4c <__stack+0x14d>
          else              { Can_set_std_id(cmd->id.std);}
     9ec:	83 ef       	ldi	r24, 0xF3	; 243
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	29 85       	ldd	r18, Y+9	; 0x09
     9f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f4:	2e 5f       	subi	r18, 0xFE	; 254
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	2f 5f       	subi	r18, 0xFF	; 255
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	20 81       	ld	r18, Z
     a00:	42 2f       	mov	r20, r18
     a02:	42 95       	swap	r20
     a04:	44 0f       	add	r20, r20
     a06:	40 7e       	andi	r20, 0xE0	; 224
     a08:	29 85       	ldd	r18, Y+9	; 0x09
     a0a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a0c:	2e 5f       	subi	r18, 0xFE	; 254
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	f9 01       	movw	r30, r18
     a12:	20 81       	ld	r18, Z
     a14:	26 95       	lsr	r18
     a16:	26 95       	lsr	r18
     a18:	26 95       	lsr	r18
     a1a:	24 0f       	add	r18, r20
     a1c:	fc 01       	movw	r30, r24
     a1e:	20 83       	st	Z, r18
     a20:	82 ef       	ldi	r24, 0xF2	; 242
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	29 85       	ldd	r18, Y+9	; 0x09
     a26:	3a 85       	ldd	r19, Y+10	; 0x0a
     a28:	2e 5f       	subi	r18, 0xFE	; 254
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	f9 01       	movw	r30, r18
     a2e:	20 81       	ld	r18, Z
     a30:	22 95       	swap	r18
     a32:	22 0f       	add	r18, r18
     a34:	20 7e       	andi	r18, 0xE0	; 224
     a36:	fc 01       	movw	r30, r24
     a38:	20 83       	st	Z, r18
     a3a:	8f ee       	ldi	r24, 0xEF	; 239
     a3c:	90 e0       	ldi	r25, 0x00	; 0
     a3e:	2f ee       	ldi	r18, 0xEF	; 239
     a40:	30 e0       	ldi	r19, 0x00	; 0
     a42:	f9 01       	movw	r30, r18
     a44:	20 81       	ld	r18, Z
     a46:	2f 7e       	andi	r18, 0xEF	; 239
     a48:	fc 01       	movw	r30, r24
     a4a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     a4c:	89 85       	ldd	r24, Y+9	; 0x09
     a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     a50:	21 e0       	ldi	r18, 0x01	; 1
     a52:	fc 01       	movw	r30, r24
     a54:	22 87       	std	Z+10, r18	; 0x0a
     a56:	80 ef       	ldi	r24, 0xF0	; 240
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	20 ef       	ldi	r18, 0xF0	; 240
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	f9 01       	movw	r30, r18
     a60:	20 81       	ld	r18, Z
     a62:	24 60       	ori	r18, 0x04	; 4
     a64:	fc 01       	movw	r30, r24
     a66:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     a68:	8f ee       	ldi	r24, 0xEF	; 239
     a6a:	90 e0       	ldi	r25, 0x00	; 0
     a6c:	2f ee       	ldi	r18, 0xEF	; 239
     a6e:	30 e0       	ldi	r19, 0x00	; 0
     a70:	f9 01       	movw	r30, r18
     a72:	40 81       	ld	r20, Z
     a74:	29 85       	ldd	r18, Y+9	; 0x09
     a76:	3a 85       	ldd	r19, Y+10	; 0x0a
     a78:	f9 01       	movw	r30, r18
     a7a:	26 81       	ldd	r18, Z+6	; 0x06
     a7c:	24 2b       	or	r18, r20
     a7e:	fc 01       	movw	r30, r24
     a80:	20 83       	st	Z, r18
          Can_config_tx();
     a82:	8f ee       	ldi	r24, 0xEF	; 239
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	2f ee       	ldi	r18, 0xEF	; 239
     a88:	30 e0       	ldi	r19, 0x00	; 0
     a8a:	f9 01       	movw	r30, r18
     a8c:	20 81       	ld	r18, Z
     a8e:	2f 73       	andi	r18, 0x3F	; 63
     a90:	fc 01       	movw	r30, r24
     a92:	20 83       	st	Z, r18
     a94:	8f ee       	ldi	r24, 0xEF	; 239
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	2f ee       	ldi	r18, 0xEF	; 239
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	20 64       	ori	r18, 0x40	; 64
     aa2:	fc 01       	movw	r30, r24
     aa4:	20 83       	st	Z, r18
          break;
     aa6:	5f c7       	rjmp	.+3774   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     aa8:	1d 82       	std	Y+5, r1	; 0x05
     aaa:	1e 82       	std	Y+6, r1	; 0x06
     aac:	1f 82       	std	Y+7, r1	; 0x07
     aae:	18 86       	std	Y+8, r1	; 0x08
     ab0:	27 ef       	ldi	r18, 0xF7	; 247
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	ce 01       	movw	r24, r28
     ab6:	05 96       	adiw	r24, 0x05	; 5
     ab8:	03 96       	adiw	r24, 0x03	; 3
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	48 2f       	mov	r20, r24
     ac0:	44 0f       	add	r20, r20
     ac2:	44 0f       	add	r20, r20
     ac4:	44 0f       	add	r20, r20
     ac6:	ce 01       	movw	r24, r28
     ac8:	05 96       	adiw	r24, 0x05	; 5
     aca:	02 96       	adiw	r24, 0x02	; 2
     acc:	fc 01       	movw	r30, r24
     ace:	80 81       	ld	r24, Z
     ad0:	82 95       	swap	r24
     ad2:	86 95       	lsr	r24
     ad4:	87 70       	andi	r24, 0x07	; 7
     ad6:	84 0f       	add	r24, r20
     ad8:	f9 01       	movw	r30, r18
     ada:	80 83       	st	Z, r24
     adc:	26 ef       	ldi	r18, 0xF6	; 246
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	ce 01       	movw	r24, r28
     ae2:	05 96       	adiw	r24, 0x05	; 5
     ae4:	02 96       	adiw	r24, 0x02	; 2
     ae6:	fc 01       	movw	r30, r24
     ae8:	80 81       	ld	r24, Z
     aea:	48 2f       	mov	r20, r24
     aec:	44 0f       	add	r20, r20
     aee:	44 0f       	add	r20, r20
     af0:	44 0f       	add	r20, r20
     af2:	ce 01       	movw	r24, r28
     af4:	05 96       	adiw	r24, 0x05	; 5
     af6:	01 96       	adiw	r24, 0x01	; 1
     af8:	fc 01       	movw	r30, r24
     afa:	80 81       	ld	r24, Z
     afc:	82 95       	swap	r24
     afe:	86 95       	lsr	r24
     b00:	87 70       	andi	r24, 0x07	; 7
     b02:	84 0f       	add	r24, r20
     b04:	f9 01       	movw	r30, r18
     b06:	80 83       	st	Z, r24
     b08:	25 ef       	ldi	r18, 0xF5	; 245
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	ce 01       	movw	r24, r28
     b0e:	05 96       	adiw	r24, 0x05	; 5
     b10:	01 96       	adiw	r24, 0x01	; 1
     b12:	fc 01       	movw	r30, r24
     b14:	80 81       	ld	r24, Z
     b16:	48 2f       	mov	r20, r24
     b18:	44 0f       	add	r20, r20
     b1a:	44 0f       	add	r20, r20
     b1c:	44 0f       	add	r20, r20
     b1e:	ce 01       	movw	r24, r28
     b20:	05 96       	adiw	r24, 0x05	; 5
     b22:	fc 01       	movw	r30, r24
     b24:	80 81       	ld	r24, Z
     b26:	82 95       	swap	r24
     b28:	86 95       	lsr	r24
     b2a:	87 70       	andi	r24, 0x07	; 7
     b2c:	84 0f       	add	r24, r20
     b2e:	f9 01       	movw	r30, r18
     b30:	80 83       	st	Z, r24
     b32:	84 ef       	ldi	r24, 0xF4	; 244
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	9e 01       	movw	r18, r28
     b38:	2b 5f       	subi	r18, 0xFB	; 251
     b3a:	3f 4f       	sbci	r19, 0xFF	; 255
     b3c:	f9 01       	movw	r30, r18
     b3e:	20 81       	ld	r18, Z
     b40:	22 0f       	add	r18, r18
     b42:	22 0f       	add	r18, r18
     b44:	22 0f       	add	r18, r18
     b46:	fc 01       	movw	r30, r24
     b48:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b4a:	8f ee       	ldi	r24, 0xEF	; 239
     b4c:	90 e0       	ldi	r25, 0x00	; 0
     b4e:	2f ee       	ldi	r18, 0xEF	; 239
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	f9 01       	movw	r30, r18
     b54:	40 81       	ld	r20, Z
     b56:	29 85       	ldd	r18, Y+9	; 0x09
     b58:	3a 85       	ldd	r19, Y+10	; 0x0a
     b5a:	f9 01       	movw	r30, r18
     b5c:	26 81       	ldd	r18, Z+6	; 0x06
     b5e:	24 2b       	or	r18, r20
     b60:	fc 01       	movw	r30, r24
     b62:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     b64:	84 ef       	ldi	r24, 0xF4	; 244
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	24 ef       	ldi	r18, 0xF4	; 244
     b6a:	30 e0       	ldi	r19, 0x00	; 0
     b6c:	f9 01       	movw	r30, r18
     b6e:	20 81       	ld	r18, Z
     b70:	2b 7f       	andi	r18, 0xFB	; 251
     b72:	fc 01       	movw	r30, r24
     b74:	20 83       	st	Z, r18
          Can_clear_idemsk();
     b76:	84 ef       	ldi	r24, 0xF4	; 244
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	24 ef       	ldi	r18, 0xF4	; 244
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	f9 01       	movw	r30, r18
     b80:	20 81       	ld	r18, Z
     b82:	2e 7f       	andi	r18, 0xFE	; 254
     b84:	fc 01       	movw	r30, r24
     b86:	20 83       	st	Z, r18
          Can_config_rx();       
     b88:	8f ee       	ldi	r24, 0xEF	; 239
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	2f ee       	ldi	r18, 0xEF	; 239
     b8e:	30 e0       	ldi	r19, 0x00	; 0
     b90:	f9 01       	movw	r30, r18
     b92:	20 81       	ld	r18, Z
     b94:	2f 73       	andi	r18, 0x3F	; 63
     b96:	fc 01       	movw	r30, r24
     b98:	20 83       	st	Z, r18
     b9a:	8f ee       	ldi	r24, 0xEF	; 239
     b9c:	90 e0       	ldi	r25, 0x00	; 0
     b9e:	2f ee       	ldi	r18, 0xEF	; 239
     ba0:	30 e0       	ldi	r19, 0x00	; 0
     ba2:	f9 01       	movw	r30, r18
     ba4:	20 81       	ld	r18, Z
     ba6:	20 68       	ori	r18, 0x80	; 128
     ba8:	fc 01       	movw	r30, r24
     baa:	20 83       	st	Z, r18
          break;
     bac:	dc c6       	rjmp	.+3512   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     bae:	1d 82       	std	Y+5, r1	; 0x05
     bb0:	1e 82       	std	Y+6, r1	; 0x06
     bb2:	1f 82       	std	Y+7, r1	; 0x07
     bb4:	18 86       	std	Y+8, r1	; 0x08
     bb6:	27 ef       	ldi	r18, 0xF7	; 247
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	ce 01       	movw	r24, r28
     bbc:	05 96       	adiw	r24, 0x05	; 5
     bbe:	03 96       	adiw	r24, 0x03	; 3
     bc0:	fc 01       	movw	r30, r24
     bc2:	80 81       	ld	r24, Z
     bc4:	48 2f       	mov	r20, r24
     bc6:	44 0f       	add	r20, r20
     bc8:	44 0f       	add	r20, r20
     bca:	44 0f       	add	r20, r20
     bcc:	ce 01       	movw	r24, r28
     bce:	05 96       	adiw	r24, 0x05	; 5
     bd0:	02 96       	adiw	r24, 0x02	; 2
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	82 95       	swap	r24
     bd8:	86 95       	lsr	r24
     bda:	87 70       	andi	r24, 0x07	; 7
     bdc:	84 0f       	add	r24, r20
     bde:	f9 01       	movw	r30, r18
     be0:	80 83       	st	Z, r24
     be2:	26 ef       	ldi	r18, 0xF6	; 246
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	ce 01       	movw	r24, r28
     be8:	05 96       	adiw	r24, 0x05	; 5
     bea:	02 96       	adiw	r24, 0x02	; 2
     bec:	fc 01       	movw	r30, r24
     bee:	80 81       	ld	r24, Z
     bf0:	48 2f       	mov	r20, r24
     bf2:	44 0f       	add	r20, r20
     bf4:	44 0f       	add	r20, r20
     bf6:	44 0f       	add	r20, r20
     bf8:	ce 01       	movw	r24, r28
     bfa:	05 96       	adiw	r24, 0x05	; 5
     bfc:	01 96       	adiw	r24, 0x01	; 1
     bfe:	fc 01       	movw	r30, r24
     c00:	80 81       	ld	r24, Z
     c02:	82 95       	swap	r24
     c04:	86 95       	lsr	r24
     c06:	87 70       	andi	r24, 0x07	; 7
     c08:	84 0f       	add	r24, r20
     c0a:	f9 01       	movw	r30, r18
     c0c:	80 83       	st	Z, r24
     c0e:	25 ef       	ldi	r18, 0xF5	; 245
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	ce 01       	movw	r24, r28
     c14:	05 96       	adiw	r24, 0x05	; 5
     c16:	01 96       	adiw	r24, 0x01	; 1
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	48 2f       	mov	r20, r24
     c1e:	44 0f       	add	r20, r20
     c20:	44 0f       	add	r20, r20
     c22:	44 0f       	add	r20, r20
     c24:	ce 01       	movw	r24, r28
     c26:	05 96       	adiw	r24, 0x05	; 5
     c28:	fc 01       	movw	r30, r24
     c2a:	80 81       	ld	r24, Z
     c2c:	82 95       	swap	r24
     c2e:	86 95       	lsr	r24
     c30:	87 70       	andi	r24, 0x07	; 7
     c32:	84 0f       	add	r24, r20
     c34:	f9 01       	movw	r30, r18
     c36:	80 83       	st	Z, r24
     c38:	84 ef       	ldi	r24, 0xF4	; 244
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	9e 01       	movw	r18, r28
     c3e:	2b 5f       	subi	r18, 0xFB	; 251
     c40:	3f 4f       	sbci	r19, 0xFF	; 255
     c42:	f9 01       	movw	r30, r18
     c44:	20 81       	ld	r18, Z
     c46:	22 0f       	add	r18, r18
     c48:	22 0f       	add	r18, r18
     c4a:	22 0f       	add	r18, r18
     c4c:	fc 01       	movw	r30, r24
     c4e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c50:	8f ee       	ldi	r24, 0xEF	; 239
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	2f ee       	ldi	r18, 0xEF	; 239
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	f9 01       	movw	r30, r18
     c5a:	40 81       	ld	r20, Z
     c5c:	29 85       	ldd	r18, Y+9	; 0x09
     c5e:	3a 85       	ldd	r19, Y+10	; 0x0a
     c60:	f9 01       	movw	r30, r18
     c62:	26 81       	ldd	r18, Z+6	; 0x06
     c64:	24 2b       	or	r18, r20
     c66:	fc 01       	movw	r30, r24
     c68:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     c6a:	89 85       	ldd	r24, Y+9	; 0x09
     c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     c6e:	fc 01       	movw	r30, r24
     c70:	12 86       	std	Z+10, r1	; 0x0a
     c72:	84 ef       	ldi	r24, 0xF4	; 244
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	24 ef       	ldi	r18, 0xF4	; 244
     c78:	30 e0       	ldi	r19, 0x00	; 0
     c7a:	f9 01       	movw	r30, r18
     c7c:	20 81       	ld	r18, Z
     c7e:	24 60       	ori	r18, 0x04	; 4
     c80:	fc 01       	movw	r30, r24
     c82:	20 83       	st	Z, r18
     c84:	80 ef       	ldi	r24, 0xF0	; 240
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	20 ef       	ldi	r18, 0xF0	; 240
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	f9 01       	movw	r30, r18
     c8e:	20 81       	ld	r18, Z
     c90:	2b 7f       	andi	r18, 0xFB	; 251
     c92:	fc 01       	movw	r30, r24
     c94:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c96:	84 ef       	ldi	r24, 0xF4	; 244
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	24 ef       	ldi	r18, 0xF4	; 244
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	f9 01       	movw	r30, r18
     ca0:	20 81       	ld	r18, Z
     ca2:	2e 7f       	andi	r18, 0xFE	; 254
     ca4:	fc 01       	movw	r30, r24
     ca6:	20 83       	st	Z, r18
          Can_config_rx();       
     ca8:	8f ee       	ldi	r24, 0xEF	; 239
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	2f ee       	ldi	r18, 0xEF	; 239
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	f9 01       	movw	r30, r18
     cb2:	20 81       	ld	r18, Z
     cb4:	2f 73       	andi	r18, 0x3F	; 63
     cb6:	fc 01       	movw	r30, r24
     cb8:	20 83       	st	Z, r18
     cba:	8f ee       	ldi	r24, 0xEF	; 239
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	2f ee       	ldi	r18, 0xEF	; 239
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	f9 01       	movw	r30, r18
     cc4:	20 81       	ld	r18, Z
     cc6:	20 68       	ori	r18, 0x80	; 128
     cc8:	fc 01       	movw	r30, r24
     cca:	20 83       	st	Z, r18
          break;
     ccc:	4c c6       	rjmp	.+3224   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     cce:	1d 82       	std	Y+5, r1	; 0x05
     cd0:	1e 82       	std	Y+6, r1	; 0x06
     cd2:	1f 82       	std	Y+7, r1	; 0x07
     cd4:	18 86       	std	Y+8, r1	; 0x08
     cd6:	27 ef       	ldi	r18, 0xF7	; 247
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	ce 01       	movw	r24, r28
     cdc:	05 96       	adiw	r24, 0x05	; 5
     cde:	03 96       	adiw	r24, 0x03	; 3
     ce0:	fc 01       	movw	r30, r24
     ce2:	80 81       	ld	r24, Z
     ce4:	48 2f       	mov	r20, r24
     ce6:	44 0f       	add	r20, r20
     ce8:	44 0f       	add	r20, r20
     cea:	44 0f       	add	r20, r20
     cec:	ce 01       	movw	r24, r28
     cee:	05 96       	adiw	r24, 0x05	; 5
     cf0:	02 96       	adiw	r24, 0x02	; 2
     cf2:	fc 01       	movw	r30, r24
     cf4:	80 81       	ld	r24, Z
     cf6:	82 95       	swap	r24
     cf8:	86 95       	lsr	r24
     cfa:	87 70       	andi	r24, 0x07	; 7
     cfc:	84 0f       	add	r24, r20
     cfe:	f9 01       	movw	r30, r18
     d00:	80 83       	st	Z, r24
     d02:	26 ef       	ldi	r18, 0xF6	; 246
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	ce 01       	movw	r24, r28
     d08:	05 96       	adiw	r24, 0x05	; 5
     d0a:	02 96       	adiw	r24, 0x02	; 2
     d0c:	fc 01       	movw	r30, r24
     d0e:	80 81       	ld	r24, Z
     d10:	48 2f       	mov	r20, r24
     d12:	44 0f       	add	r20, r20
     d14:	44 0f       	add	r20, r20
     d16:	44 0f       	add	r20, r20
     d18:	ce 01       	movw	r24, r28
     d1a:	05 96       	adiw	r24, 0x05	; 5
     d1c:	01 96       	adiw	r24, 0x01	; 1
     d1e:	fc 01       	movw	r30, r24
     d20:	80 81       	ld	r24, Z
     d22:	82 95       	swap	r24
     d24:	86 95       	lsr	r24
     d26:	87 70       	andi	r24, 0x07	; 7
     d28:	84 0f       	add	r24, r20
     d2a:	f9 01       	movw	r30, r18
     d2c:	80 83       	st	Z, r24
     d2e:	25 ef       	ldi	r18, 0xF5	; 245
     d30:	30 e0       	ldi	r19, 0x00	; 0
     d32:	ce 01       	movw	r24, r28
     d34:	05 96       	adiw	r24, 0x05	; 5
     d36:	01 96       	adiw	r24, 0x01	; 1
     d38:	fc 01       	movw	r30, r24
     d3a:	80 81       	ld	r24, Z
     d3c:	48 2f       	mov	r20, r24
     d3e:	44 0f       	add	r20, r20
     d40:	44 0f       	add	r20, r20
     d42:	44 0f       	add	r20, r20
     d44:	ce 01       	movw	r24, r28
     d46:	05 96       	adiw	r24, 0x05	; 5
     d48:	fc 01       	movw	r30, r24
     d4a:	80 81       	ld	r24, Z
     d4c:	82 95       	swap	r24
     d4e:	86 95       	lsr	r24
     d50:	87 70       	andi	r24, 0x07	; 7
     d52:	84 0f       	add	r24, r20
     d54:	f9 01       	movw	r30, r18
     d56:	80 83       	st	Z, r24
     d58:	84 ef       	ldi	r24, 0xF4	; 244
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	9e 01       	movw	r18, r28
     d5e:	2b 5f       	subi	r18, 0xFB	; 251
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	f9 01       	movw	r30, r18
     d64:	20 81       	ld	r18, Z
     d66:	22 0f       	add	r18, r18
     d68:	22 0f       	add	r18, r18
     d6a:	22 0f       	add	r18, r18
     d6c:	fc 01       	movw	r30, r24
     d6e:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d70:	8f ee       	ldi	r24, 0xEF	; 239
     d72:	90 e0       	ldi	r25, 0x00	; 0
     d74:	2f ee       	ldi	r18, 0xEF	; 239
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	f9 01       	movw	r30, r18
     d7a:	40 81       	ld	r20, Z
     d7c:	29 85       	ldd	r18, Y+9	; 0x09
     d7e:	3a 85       	ldd	r19, Y+10	; 0x0a
     d80:	f9 01       	movw	r30, r18
     d82:	26 81       	ldd	r18, Z+6	; 0x06
     d84:	24 2b       	or	r18, r20
     d86:	fc 01       	movw	r30, r24
     d88:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     d8a:	89 85       	ldd	r24, Y+9	; 0x09
     d8c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d8e:	21 e0       	ldi	r18, 0x01	; 1
     d90:	fc 01       	movw	r30, r24
     d92:	22 87       	std	Z+10, r18	; 0x0a
     d94:	84 ef       	ldi	r24, 0xF4	; 244
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	24 ef       	ldi	r18, 0xF4	; 244
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	f9 01       	movw	r30, r18
     d9e:	20 81       	ld	r18, Z
     da0:	24 60       	ori	r18, 0x04	; 4
     da2:	fc 01       	movw	r30, r24
     da4:	20 83       	st	Z, r18
     da6:	80 ef       	ldi	r24, 0xF0	; 240
     da8:	90 e0       	ldi	r25, 0x00	; 0
     daa:	20 ef       	ldi	r18, 0xF0	; 240
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	f9 01       	movw	r30, r18
     db0:	20 81       	ld	r18, Z
     db2:	24 60       	ori	r18, 0x04	; 4
     db4:	fc 01       	movw	r30, r24
     db6:	20 83       	st	Z, r18
          Can_clear_rplv();
     db8:	8f ee       	ldi	r24, 0xEF	; 239
     dba:	90 e0       	ldi	r25, 0x00	; 0
     dbc:	2f ee       	ldi	r18, 0xEF	; 239
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	f9 01       	movw	r30, r18
     dc2:	20 81       	ld	r18, Z
     dc4:	2f 7d       	andi	r18, 0xDF	; 223
     dc6:	fc 01       	movw	r30, r24
     dc8:	20 83       	st	Z, r18
          Can_clear_idemsk();
     dca:	84 ef       	ldi	r24, 0xF4	; 244
     dcc:	90 e0       	ldi	r25, 0x00	; 0
     dce:	24 ef       	ldi	r18, 0xF4	; 244
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	f9 01       	movw	r30, r18
     dd4:	20 81       	ld	r18, Z
     dd6:	2e 7f       	andi	r18, 0xFE	; 254
     dd8:	fc 01       	movw	r30, r24
     dda:	20 83       	st	Z, r18
          Can_config_rx();       
     ddc:	8f ee       	ldi	r24, 0xEF	; 239
     dde:	90 e0       	ldi	r25, 0x00	; 0
     de0:	2f ee       	ldi	r18, 0xEF	; 239
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	f9 01       	movw	r30, r18
     de6:	20 81       	ld	r18, Z
     de8:	2f 73       	andi	r18, 0x3F	; 63
     dea:	fc 01       	movw	r30, r24
     dec:	20 83       	st	Z, r18
     dee:	8f ee       	ldi	r24, 0xEF	; 239
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	2f ee       	ldi	r18, 0xEF	; 239
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	f9 01       	movw	r30, r18
     df8:	20 81       	ld	r18, Z
     dfa:	20 68       	ori	r18, 0x80	; 128
     dfc:	fc 01       	movw	r30, r24
     dfe:	20 83       	st	Z, r18
          break;
     e00:	b2 c5       	rjmp	.+2916   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     e02:	89 85       	ldd	r24, Y+9	; 0x09
     e04:	9a 85       	ldd	r25, Y+10	; 0x0a
     e06:	fc 01       	movw	r30, r24
     e08:	83 85       	ldd	r24, Z+11	; 0x0b
     e0a:	88 23       	and	r24, r24
     e0c:	09 f4       	brne	.+2      	; 0xe10 <__stack+0x511>
     e0e:	69 c0       	rjmp	.+210    	; 0xee2 <__stack+0x5e3>
     e10:	83 ef       	ldi	r24, 0xF3	; 243
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	29 85       	ldd	r18, Y+9	; 0x09
     e16:	3a 85       	ldd	r19, Y+10	; 0x0a
     e18:	2e 5f       	subi	r18, 0xFE	; 254
     e1a:	3f 4f       	sbci	r19, 0xFF	; 255
     e1c:	2d 5f       	subi	r18, 0xFD	; 253
     e1e:	3f 4f       	sbci	r19, 0xFF	; 255
     e20:	f9 01       	movw	r30, r18
     e22:	20 81       	ld	r18, Z
     e24:	42 2f       	mov	r20, r18
     e26:	44 0f       	add	r20, r20
     e28:	44 0f       	add	r20, r20
     e2a:	44 0f       	add	r20, r20
     e2c:	29 85       	ldd	r18, Y+9	; 0x09
     e2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e30:	2e 5f       	subi	r18, 0xFE	; 254
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	2e 5f       	subi	r18, 0xFE	; 254
     e36:	3f 4f       	sbci	r19, 0xFF	; 255
     e38:	f9 01       	movw	r30, r18
     e3a:	20 81       	ld	r18, Z
     e3c:	22 95       	swap	r18
     e3e:	26 95       	lsr	r18
     e40:	27 70       	andi	r18, 0x07	; 7
     e42:	24 0f       	add	r18, r20
     e44:	fc 01       	movw	r30, r24
     e46:	20 83       	st	Z, r18
     e48:	82 ef       	ldi	r24, 0xF2	; 242
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	29 85       	ldd	r18, Y+9	; 0x09
     e4e:	3a 85       	ldd	r19, Y+10	; 0x0a
     e50:	2e 5f       	subi	r18, 0xFE	; 254
     e52:	3f 4f       	sbci	r19, 0xFF	; 255
     e54:	2e 5f       	subi	r18, 0xFE	; 254
     e56:	3f 4f       	sbci	r19, 0xFF	; 255
     e58:	f9 01       	movw	r30, r18
     e5a:	20 81       	ld	r18, Z
     e5c:	42 2f       	mov	r20, r18
     e5e:	44 0f       	add	r20, r20
     e60:	44 0f       	add	r20, r20
     e62:	44 0f       	add	r20, r20
     e64:	29 85       	ldd	r18, Y+9	; 0x09
     e66:	3a 85       	ldd	r19, Y+10	; 0x0a
     e68:	2e 5f       	subi	r18, 0xFE	; 254
     e6a:	3f 4f       	sbci	r19, 0xFF	; 255
     e6c:	2f 5f       	subi	r18, 0xFF	; 255
     e6e:	3f 4f       	sbci	r19, 0xFF	; 255
     e70:	f9 01       	movw	r30, r18
     e72:	20 81       	ld	r18, Z
     e74:	22 95       	swap	r18
     e76:	26 95       	lsr	r18
     e78:	27 70       	andi	r18, 0x07	; 7
     e7a:	24 0f       	add	r18, r20
     e7c:	fc 01       	movw	r30, r24
     e7e:	20 83       	st	Z, r18
     e80:	81 ef       	ldi	r24, 0xF1	; 241
     e82:	90 e0       	ldi	r25, 0x00	; 0
     e84:	29 85       	ldd	r18, Y+9	; 0x09
     e86:	3a 85       	ldd	r19, Y+10	; 0x0a
     e88:	2e 5f       	subi	r18, 0xFE	; 254
     e8a:	3f 4f       	sbci	r19, 0xFF	; 255
     e8c:	2f 5f       	subi	r18, 0xFF	; 255
     e8e:	3f 4f       	sbci	r19, 0xFF	; 255
     e90:	f9 01       	movw	r30, r18
     e92:	20 81       	ld	r18, Z
     e94:	42 2f       	mov	r20, r18
     e96:	44 0f       	add	r20, r20
     e98:	44 0f       	add	r20, r20
     e9a:	44 0f       	add	r20, r20
     e9c:	29 85       	ldd	r18, Y+9	; 0x09
     e9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     ea0:	2e 5f       	subi	r18, 0xFE	; 254
     ea2:	3f 4f       	sbci	r19, 0xFF	; 255
     ea4:	f9 01       	movw	r30, r18
     ea6:	20 81       	ld	r18, Z
     ea8:	22 95       	swap	r18
     eaa:	26 95       	lsr	r18
     eac:	27 70       	andi	r18, 0x07	; 7
     eae:	24 0f       	add	r18, r20
     eb0:	fc 01       	movw	r30, r24
     eb2:	20 83       	st	Z, r18
     eb4:	80 ef       	ldi	r24, 0xF0	; 240
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	29 85       	ldd	r18, Y+9	; 0x09
     eba:	3a 85       	ldd	r19, Y+10	; 0x0a
     ebc:	2e 5f       	subi	r18, 0xFE	; 254
     ebe:	3f 4f       	sbci	r19, 0xFF	; 255
     ec0:	f9 01       	movw	r30, r18
     ec2:	20 81       	ld	r18, Z
     ec4:	22 0f       	add	r18, r18
     ec6:	22 0f       	add	r18, r18
     ec8:	22 0f       	add	r18, r18
     eca:	fc 01       	movw	r30, r24
     ecc:	20 83       	st	Z, r18
     ece:	8f ee       	ldi	r24, 0xEF	; 239
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	2f ee       	ldi	r18, 0xEF	; 239
     ed4:	30 e0       	ldi	r19, 0x00	; 0
     ed6:	f9 01       	movw	r30, r18
     ed8:	20 81       	ld	r18, Z
     eda:	20 61       	ori	r18, 0x10	; 16
     edc:	fc 01       	movw	r30, r24
     ede:	20 83       	st	Z, r18
     ee0:	30 c0       	rjmp	.+96     	; 0xf42 <__stack+0x643>
          else              { Can_set_std_id(cmd->id.std);}
     ee2:	83 ef       	ldi	r24, 0xF3	; 243
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	29 85       	ldd	r18, Y+9	; 0x09
     ee8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eea:	2e 5f       	subi	r18, 0xFE	; 254
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	2f 5f       	subi	r18, 0xFF	; 255
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	42 2f       	mov	r20, r18
     ef8:	42 95       	swap	r20
     efa:	44 0f       	add	r20, r20
     efc:	40 7e       	andi	r20, 0xE0	; 224
     efe:	29 85       	ldd	r18, Y+9	; 0x09
     f00:	3a 85       	ldd	r19, Y+10	; 0x0a
     f02:	2e 5f       	subi	r18, 0xFE	; 254
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	f9 01       	movw	r30, r18
     f08:	20 81       	ld	r18, Z
     f0a:	26 95       	lsr	r18
     f0c:	26 95       	lsr	r18
     f0e:	26 95       	lsr	r18
     f10:	24 0f       	add	r18, r20
     f12:	fc 01       	movw	r30, r24
     f14:	20 83       	st	Z, r18
     f16:	82 ef       	ldi	r24, 0xF2	; 242
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	29 85       	ldd	r18, Y+9	; 0x09
     f1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f1e:	2e 5f       	subi	r18, 0xFE	; 254
     f20:	3f 4f       	sbci	r19, 0xFF	; 255
     f22:	f9 01       	movw	r30, r18
     f24:	20 81       	ld	r18, Z
     f26:	22 95       	swap	r18
     f28:	22 0f       	add	r18, r18
     f2a:	20 7e       	andi	r18, 0xE0	; 224
     f2c:	fc 01       	movw	r30, r24
     f2e:	20 83       	st	Z, r18
     f30:	8f ee       	ldi	r24, 0xEF	; 239
     f32:	90 e0       	ldi	r25, 0x00	; 0
     f34:	2f ee       	ldi	r18, 0xEF	; 239
     f36:	30 e0       	ldi	r19, 0x00	; 0
     f38:	f9 01       	movw	r30, r18
     f3a:	20 81       	ld	r18, Z
     f3c:	2f 7e       	andi	r18, 0xEF	; 239
     f3e:	fc 01       	movw	r30, r24
     f40:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     f42:	8f ef       	ldi	r24, 0xFF	; 255
     f44:	9f ef       	ldi	r25, 0xFF	; 255
     f46:	dc 01       	movw	r26, r24
     f48:	8d 83       	std	Y+5, r24	; 0x05
     f4a:	9e 83       	std	Y+6, r25	; 0x06
     f4c:	af 83       	std	Y+7, r26	; 0x07
     f4e:	b8 87       	std	Y+8, r27	; 0x08
     f50:	27 ef       	ldi	r18, 0xF7	; 247
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	ce 01       	movw	r24, r28
     f56:	05 96       	adiw	r24, 0x05	; 5
     f58:	03 96       	adiw	r24, 0x03	; 3
     f5a:	fc 01       	movw	r30, r24
     f5c:	80 81       	ld	r24, Z
     f5e:	48 2f       	mov	r20, r24
     f60:	44 0f       	add	r20, r20
     f62:	44 0f       	add	r20, r20
     f64:	44 0f       	add	r20, r20
     f66:	ce 01       	movw	r24, r28
     f68:	05 96       	adiw	r24, 0x05	; 5
     f6a:	02 96       	adiw	r24, 0x02	; 2
     f6c:	fc 01       	movw	r30, r24
     f6e:	80 81       	ld	r24, Z
     f70:	82 95       	swap	r24
     f72:	86 95       	lsr	r24
     f74:	87 70       	andi	r24, 0x07	; 7
     f76:	84 0f       	add	r24, r20
     f78:	f9 01       	movw	r30, r18
     f7a:	80 83       	st	Z, r24
     f7c:	26 ef       	ldi	r18, 0xF6	; 246
     f7e:	30 e0       	ldi	r19, 0x00	; 0
     f80:	ce 01       	movw	r24, r28
     f82:	05 96       	adiw	r24, 0x05	; 5
     f84:	02 96       	adiw	r24, 0x02	; 2
     f86:	fc 01       	movw	r30, r24
     f88:	80 81       	ld	r24, Z
     f8a:	48 2f       	mov	r20, r24
     f8c:	44 0f       	add	r20, r20
     f8e:	44 0f       	add	r20, r20
     f90:	44 0f       	add	r20, r20
     f92:	ce 01       	movw	r24, r28
     f94:	05 96       	adiw	r24, 0x05	; 5
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	fc 01       	movw	r30, r24
     f9a:	80 81       	ld	r24, Z
     f9c:	82 95       	swap	r24
     f9e:	86 95       	lsr	r24
     fa0:	87 70       	andi	r24, 0x07	; 7
     fa2:	84 0f       	add	r24, r20
     fa4:	f9 01       	movw	r30, r18
     fa6:	80 83       	st	Z, r24
     fa8:	25 ef       	ldi	r18, 0xF5	; 245
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	ce 01       	movw	r24, r28
     fae:	05 96       	adiw	r24, 0x05	; 5
     fb0:	01 96       	adiw	r24, 0x01	; 1
     fb2:	fc 01       	movw	r30, r24
     fb4:	80 81       	ld	r24, Z
     fb6:	48 2f       	mov	r20, r24
     fb8:	44 0f       	add	r20, r20
     fba:	44 0f       	add	r20, r20
     fbc:	44 0f       	add	r20, r20
     fbe:	ce 01       	movw	r24, r28
     fc0:	05 96       	adiw	r24, 0x05	; 5
     fc2:	fc 01       	movw	r30, r24
     fc4:	80 81       	ld	r24, Z
     fc6:	82 95       	swap	r24
     fc8:	86 95       	lsr	r24
     fca:	87 70       	andi	r24, 0x07	; 7
     fcc:	84 0f       	add	r24, r20
     fce:	f9 01       	movw	r30, r18
     fd0:	80 83       	st	Z, r24
     fd2:	84 ef       	ldi	r24, 0xF4	; 244
     fd4:	90 e0       	ldi	r25, 0x00	; 0
     fd6:	9e 01       	movw	r18, r28
     fd8:	2b 5f       	subi	r18, 0xFB	; 251
     fda:	3f 4f       	sbci	r19, 0xFF	; 255
     fdc:	f9 01       	movw	r30, r18
     fde:	20 81       	ld	r18, Z
     fe0:	22 0f       	add	r18, r18
     fe2:	22 0f       	add	r18, r18
     fe4:	22 0f       	add	r18, r18
     fe6:	fc 01       	movw	r30, r24
     fe8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     fea:	8f ee       	ldi	r24, 0xEF	; 239
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	2f ee       	ldi	r18, 0xEF	; 239
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	f9 01       	movw	r30, r18
     ff4:	40 81       	ld	r20, Z
     ff6:	29 85       	ldd	r18, Y+9	; 0x09
     ff8:	3a 85       	ldd	r19, Y+10	; 0x0a
     ffa:	f9 01       	movw	r30, r18
     ffc:	26 81       	ldd	r18, Z+6	; 0x06
     ffe:	24 2b       	or	r18, r20
    1000:	fc 01       	movw	r30, r24
    1002:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    1004:	84 ef       	ldi	r24, 0xF4	; 244
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	24 ef       	ldi	r18, 0xF4	; 244
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	f9 01       	movw	r30, r18
    100e:	20 81       	ld	r18, Z
    1010:	2b 7f       	andi	r18, 0xFB	; 251
    1012:	fc 01       	movw	r30, r24
    1014:	20 83       	st	Z, r18
          Can_set_idemsk();
    1016:	84 ef       	ldi	r24, 0xF4	; 244
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	24 ef       	ldi	r18, 0xF4	; 244
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	f9 01       	movw	r30, r18
    1020:	20 81       	ld	r18, Z
    1022:	21 60       	ori	r18, 0x01	; 1
    1024:	fc 01       	movw	r30, r24
    1026:	20 83       	st	Z, r18
          Can_config_rx();       
    1028:	8f ee       	ldi	r24, 0xEF	; 239
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	2f ee       	ldi	r18, 0xEF	; 239
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	f9 01       	movw	r30, r18
    1032:	20 81       	ld	r18, Z
    1034:	2f 73       	andi	r18, 0x3F	; 63
    1036:	fc 01       	movw	r30, r24
    1038:	20 83       	st	Z, r18
    103a:	8f ee       	ldi	r24, 0xEF	; 239
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	2f ee       	ldi	r18, 0xEF	; 239
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	f9 01       	movw	r30, r18
    1044:	20 81       	ld	r18, Z
    1046:	20 68       	ori	r18, 0x80	; 128
    1048:	fc 01       	movw	r30, r24
    104a:	20 83       	st	Z, r18
          break;
    104c:	8c c4       	rjmp	.+2328   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    104e:	89 85       	ldd	r24, Y+9	; 0x09
    1050:	9a 85       	ldd	r25, Y+10	; 0x0a
    1052:	fc 01       	movw	r30, r24
    1054:	83 85       	ldd	r24, Z+11	; 0x0b
    1056:	88 23       	and	r24, r24
    1058:	09 f4       	brne	.+2      	; 0x105c <__stack+0x75d>
    105a:	69 c0       	rjmp	.+210    	; 0x112e <__stack+0x82f>
    105c:	83 ef       	ldi	r24, 0xF3	; 243
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	29 85       	ldd	r18, Y+9	; 0x09
    1062:	3a 85       	ldd	r19, Y+10	; 0x0a
    1064:	2e 5f       	subi	r18, 0xFE	; 254
    1066:	3f 4f       	sbci	r19, 0xFF	; 255
    1068:	2d 5f       	subi	r18, 0xFD	; 253
    106a:	3f 4f       	sbci	r19, 0xFF	; 255
    106c:	f9 01       	movw	r30, r18
    106e:	20 81       	ld	r18, Z
    1070:	42 2f       	mov	r20, r18
    1072:	44 0f       	add	r20, r20
    1074:	44 0f       	add	r20, r20
    1076:	44 0f       	add	r20, r20
    1078:	29 85       	ldd	r18, Y+9	; 0x09
    107a:	3a 85       	ldd	r19, Y+10	; 0x0a
    107c:	2e 5f       	subi	r18, 0xFE	; 254
    107e:	3f 4f       	sbci	r19, 0xFF	; 255
    1080:	2e 5f       	subi	r18, 0xFE	; 254
    1082:	3f 4f       	sbci	r19, 0xFF	; 255
    1084:	f9 01       	movw	r30, r18
    1086:	20 81       	ld	r18, Z
    1088:	22 95       	swap	r18
    108a:	26 95       	lsr	r18
    108c:	27 70       	andi	r18, 0x07	; 7
    108e:	24 0f       	add	r18, r20
    1090:	fc 01       	movw	r30, r24
    1092:	20 83       	st	Z, r18
    1094:	82 ef       	ldi	r24, 0xF2	; 242
    1096:	90 e0       	ldi	r25, 0x00	; 0
    1098:	29 85       	ldd	r18, Y+9	; 0x09
    109a:	3a 85       	ldd	r19, Y+10	; 0x0a
    109c:	2e 5f       	subi	r18, 0xFE	; 254
    109e:	3f 4f       	sbci	r19, 0xFF	; 255
    10a0:	2e 5f       	subi	r18, 0xFE	; 254
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	f9 01       	movw	r30, r18
    10a6:	20 81       	ld	r18, Z
    10a8:	42 2f       	mov	r20, r18
    10aa:	44 0f       	add	r20, r20
    10ac:	44 0f       	add	r20, r20
    10ae:	44 0f       	add	r20, r20
    10b0:	29 85       	ldd	r18, Y+9	; 0x09
    10b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10b4:	2e 5f       	subi	r18, 0xFE	; 254
    10b6:	3f 4f       	sbci	r19, 0xFF	; 255
    10b8:	2f 5f       	subi	r18, 0xFF	; 255
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	f9 01       	movw	r30, r18
    10be:	20 81       	ld	r18, Z
    10c0:	22 95       	swap	r18
    10c2:	26 95       	lsr	r18
    10c4:	27 70       	andi	r18, 0x07	; 7
    10c6:	24 0f       	add	r18, r20
    10c8:	fc 01       	movw	r30, r24
    10ca:	20 83       	st	Z, r18
    10cc:	81 ef       	ldi	r24, 0xF1	; 241
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	29 85       	ldd	r18, Y+9	; 0x09
    10d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    10d4:	2e 5f       	subi	r18, 0xFE	; 254
    10d6:	3f 4f       	sbci	r19, 0xFF	; 255
    10d8:	2f 5f       	subi	r18, 0xFF	; 255
    10da:	3f 4f       	sbci	r19, 0xFF	; 255
    10dc:	f9 01       	movw	r30, r18
    10de:	20 81       	ld	r18, Z
    10e0:	42 2f       	mov	r20, r18
    10e2:	44 0f       	add	r20, r20
    10e4:	44 0f       	add	r20, r20
    10e6:	44 0f       	add	r20, r20
    10e8:	29 85       	ldd	r18, Y+9	; 0x09
    10ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    10ec:	2e 5f       	subi	r18, 0xFE	; 254
    10ee:	3f 4f       	sbci	r19, 0xFF	; 255
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	22 95       	swap	r18
    10f6:	26 95       	lsr	r18
    10f8:	27 70       	andi	r18, 0x07	; 7
    10fa:	24 0f       	add	r18, r20
    10fc:	fc 01       	movw	r30, r24
    10fe:	20 83       	st	Z, r18
    1100:	80 ef       	ldi	r24, 0xF0	; 240
    1102:	90 e0       	ldi	r25, 0x00	; 0
    1104:	29 85       	ldd	r18, Y+9	; 0x09
    1106:	3a 85       	ldd	r19, Y+10	; 0x0a
    1108:	2e 5f       	subi	r18, 0xFE	; 254
    110a:	3f 4f       	sbci	r19, 0xFF	; 255
    110c:	f9 01       	movw	r30, r18
    110e:	20 81       	ld	r18, Z
    1110:	22 0f       	add	r18, r18
    1112:	22 0f       	add	r18, r18
    1114:	22 0f       	add	r18, r18
    1116:	fc 01       	movw	r30, r24
    1118:	20 83       	st	Z, r18
    111a:	8f ee       	ldi	r24, 0xEF	; 239
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	2f ee       	ldi	r18, 0xEF	; 239
    1120:	30 e0       	ldi	r19, 0x00	; 0
    1122:	f9 01       	movw	r30, r18
    1124:	20 81       	ld	r18, Z
    1126:	20 61       	ori	r18, 0x10	; 16
    1128:	fc 01       	movw	r30, r24
    112a:	20 83       	st	Z, r18
    112c:	30 c0       	rjmp	.+96     	; 0x118e <__stack+0x88f>
          else              { Can_set_std_id(cmd->id.std);}
    112e:	83 ef       	ldi	r24, 0xF3	; 243
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	29 85       	ldd	r18, Y+9	; 0x09
    1134:	3a 85       	ldd	r19, Y+10	; 0x0a
    1136:	2e 5f       	subi	r18, 0xFE	; 254
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	2f 5f       	subi	r18, 0xFF	; 255
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	f9 01       	movw	r30, r18
    1140:	20 81       	ld	r18, Z
    1142:	42 2f       	mov	r20, r18
    1144:	42 95       	swap	r20
    1146:	44 0f       	add	r20, r20
    1148:	40 7e       	andi	r20, 0xE0	; 224
    114a:	29 85       	ldd	r18, Y+9	; 0x09
    114c:	3a 85       	ldd	r19, Y+10	; 0x0a
    114e:	2e 5f       	subi	r18, 0xFE	; 254
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	f9 01       	movw	r30, r18
    1154:	20 81       	ld	r18, Z
    1156:	26 95       	lsr	r18
    1158:	26 95       	lsr	r18
    115a:	26 95       	lsr	r18
    115c:	24 0f       	add	r18, r20
    115e:	fc 01       	movw	r30, r24
    1160:	20 83       	st	Z, r18
    1162:	82 ef       	ldi	r24, 0xF2	; 242
    1164:	90 e0       	ldi	r25, 0x00	; 0
    1166:	29 85       	ldd	r18, Y+9	; 0x09
    1168:	3a 85       	ldd	r19, Y+10	; 0x0a
    116a:	2e 5f       	subi	r18, 0xFE	; 254
    116c:	3f 4f       	sbci	r19, 0xFF	; 255
    116e:	f9 01       	movw	r30, r18
    1170:	20 81       	ld	r18, Z
    1172:	22 95       	swap	r18
    1174:	22 0f       	add	r18, r18
    1176:	20 7e       	andi	r18, 0xE0	; 224
    1178:	fc 01       	movw	r30, r24
    117a:	20 83       	st	Z, r18
    117c:	8f ee       	ldi	r24, 0xEF	; 239
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	2f ee       	ldi	r18, 0xEF	; 239
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	f9 01       	movw	r30, r18
    1186:	20 81       	ld	r18, Z
    1188:	2f 7e       	andi	r18, 0xEF	; 239
    118a:	fc 01       	movw	r30, r24
    118c:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    118e:	8f ef       	ldi	r24, 0xFF	; 255
    1190:	9f ef       	ldi	r25, 0xFF	; 255
    1192:	dc 01       	movw	r26, r24
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	af 83       	std	Y+7, r26	; 0x07
    119a:	b8 87       	std	Y+8, r27	; 0x08
    119c:	27 ef       	ldi	r18, 0xF7	; 247
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	03 96       	adiw	r24, 0x03	; 3
    11a6:	fc 01       	movw	r30, r24
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	44 0f       	add	r20, r20
    11ae:	44 0f       	add	r20, r20
    11b0:	44 0f       	add	r20, r20
    11b2:	ce 01       	movw	r24, r28
    11b4:	05 96       	adiw	r24, 0x05	; 5
    11b6:	02 96       	adiw	r24, 0x02	; 2
    11b8:	fc 01       	movw	r30, r24
    11ba:	80 81       	ld	r24, Z
    11bc:	82 95       	swap	r24
    11be:	86 95       	lsr	r24
    11c0:	87 70       	andi	r24, 0x07	; 7
    11c2:	84 0f       	add	r24, r20
    11c4:	f9 01       	movw	r30, r18
    11c6:	80 83       	st	Z, r24
    11c8:	26 ef       	ldi	r18, 0xF6	; 246
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	ce 01       	movw	r24, r28
    11ce:	05 96       	adiw	r24, 0x05	; 5
    11d0:	02 96       	adiw	r24, 0x02	; 2
    11d2:	fc 01       	movw	r30, r24
    11d4:	80 81       	ld	r24, Z
    11d6:	48 2f       	mov	r20, r24
    11d8:	44 0f       	add	r20, r20
    11da:	44 0f       	add	r20, r20
    11dc:	44 0f       	add	r20, r20
    11de:	ce 01       	movw	r24, r28
    11e0:	05 96       	adiw	r24, 0x05	; 5
    11e2:	01 96       	adiw	r24, 0x01	; 1
    11e4:	fc 01       	movw	r30, r24
    11e6:	80 81       	ld	r24, Z
    11e8:	82 95       	swap	r24
    11ea:	86 95       	lsr	r24
    11ec:	87 70       	andi	r24, 0x07	; 7
    11ee:	84 0f       	add	r24, r20
    11f0:	f9 01       	movw	r30, r18
    11f2:	80 83       	st	Z, r24
    11f4:	25 ef       	ldi	r18, 0xF5	; 245
    11f6:	30 e0       	ldi	r19, 0x00	; 0
    11f8:	ce 01       	movw	r24, r28
    11fa:	05 96       	adiw	r24, 0x05	; 5
    11fc:	01 96       	adiw	r24, 0x01	; 1
    11fe:	fc 01       	movw	r30, r24
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	44 0f       	add	r20, r20
    1206:	44 0f       	add	r20, r20
    1208:	44 0f       	add	r20, r20
    120a:	ce 01       	movw	r24, r28
    120c:	05 96       	adiw	r24, 0x05	; 5
    120e:	fc 01       	movw	r30, r24
    1210:	80 81       	ld	r24, Z
    1212:	82 95       	swap	r24
    1214:	86 95       	lsr	r24
    1216:	87 70       	andi	r24, 0x07	; 7
    1218:	84 0f       	add	r24, r20
    121a:	f9 01       	movw	r30, r18
    121c:	80 83       	st	Z, r24
    121e:	84 ef       	ldi	r24, 0xF4	; 244
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	9e 01       	movw	r18, r28
    1224:	2b 5f       	subi	r18, 0xFB	; 251
    1226:	3f 4f       	sbci	r19, 0xFF	; 255
    1228:	f9 01       	movw	r30, r18
    122a:	20 81       	ld	r18, Z
    122c:	22 0f       	add	r18, r18
    122e:	22 0f       	add	r18, r18
    1230:	22 0f       	add	r18, r18
    1232:	fc 01       	movw	r30, r24
    1234:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1236:	8f ee       	ldi	r24, 0xEF	; 239
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	2f ee       	ldi	r18, 0xEF	; 239
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	f9 01       	movw	r30, r18
    1240:	40 81       	ld	r20, Z
    1242:	29 85       	ldd	r18, Y+9	; 0x09
    1244:	3a 85       	ldd	r19, Y+10	; 0x0a
    1246:	f9 01       	movw	r30, r18
    1248:	26 81       	ldd	r18, Z+6	; 0x06
    124a:	24 2b       	or	r18, r20
    124c:	fc 01       	movw	r30, r24
    124e:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	fc 01       	movw	r30, r24
    1256:	12 86       	std	Z+10, r1	; 0x0a
    1258:	84 ef       	ldi	r24, 0xF4	; 244
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	24 ef       	ldi	r18, 0xF4	; 244
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	f9 01       	movw	r30, r18
    1262:	20 81       	ld	r18, Z
    1264:	24 60       	ori	r18, 0x04	; 4
    1266:	fc 01       	movw	r30, r24
    1268:	20 83       	st	Z, r18
    126a:	80 ef       	ldi	r24, 0xF0	; 240
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	20 ef       	ldi	r18, 0xF0	; 240
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	f9 01       	movw	r30, r18
    1274:	20 81       	ld	r18, Z
    1276:	2b 7f       	andi	r18, 0xFB	; 251
    1278:	fc 01       	movw	r30, r24
    127a:	20 83       	st	Z, r18
          Can_set_idemsk();
    127c:	84 ef       	ldi	r24, 0xF4	; 244
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	24 ef       	ldi	r18, 0xF4	; 244
    1282:	30 e0       	ldi	r19, 0x00	; 0
    1284:	f9 01       	movw	r30, r18
    1286:	20 81       	ld	r18, Z
    1288:	21 60       	ori	r18, 0x01	; 1
    128a:	fc 01       	movw	r30, r24
    128c:	20 83       	st	Z, r18
          Can_config_rx();       
    128e:	8f ee       	ldi	r24, 0xEF	; 239
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	2f ee       	ldi	r18, 0xEF	; 239
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	f9 01       	movw	r30, r18
    1298:	20 81       	ld	r18, Z
    129a:	2f 73       	andi	r18, 0x3F	; 63
    129c:	fc 01       	movw	r30, r24
    129e:	20 83       	st	Z, r18
    12a0:	8f ee       	ldi	r24, 0xEF	; 239
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	2f ee       	ldi	r18, 0xEF	; 239
    12a6:	30 e0       	ldi	r19, 0x00	; 0
    12a8:	f9 01       	movw	r30, r18
    12aa:	20 81       	ld	r18, Z
    12ac:	20 68       	ori	r18, 0x80	; 128
    12ae:	fc 01       	movw	r30, r24
    12b0:	20 83       	st	Z, r18
          break;
    12b2:	59 c3       	rjmp	.+1714   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    12b4:	89 85       	ldd	r24, Y+9	; 0x09
    12b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    12b8:	fc 01       	movw	r30, r24
    12ba:	83 85       	ldd	r24, Z+11	; 0x0b
    12bc:	88 23       	and	r24, r24
    12be:	09 f4       	brne	.+2      	; 0x12c2 <__stack+0x9c3>
    12c0:	69 c0       	rjmp	.+210    	; 0x1394 <__stack+0xa95>
    12c2:	83 ef       	ldi	r24, 0xF3	; 243
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	29 85       	ldd	r18, Y+9	; 0x09
    12c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    12ca:	2e 5f       	subi	r18, 0xFE	; 254
    12cc:	3f 4f       	sbci	r19, 0xFF	; 255
    12ce:	2d 5f       	subi	r18, 0xFD	; 253
    12d0:	3f 4f       	sbci	r19, 0xFF	; 255
    12d2:	f9 01       	movw	r30, r18
    12d4:	20 81       	ld	r18, Z
    12d6:	42 2f       	mov	r20, r18
    12d8:	44 0f       	add	r20, r20
    12da:	44 0f       	add	r20, r20
    12dc:	44 0f       	add	r20, r20
    12de:	29 85       	ldd	r18, Y+9	; 0x09
    12e0:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e2:	2e 5f       	subi	r18, 0xFE	; 254
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	2e 5f       	subi	r18, 0xFE	; 254
    12e8:	3f 4f       	sbci	r19, 0xFF	; 255
    12ea:	f9 01       	movw	r30, r18
    12ec:	20 81       	ld	r18, Z
    12ee:	22 95       	swap	r18
    12f0:	26 95       	lsr	r18
    12f2:	27 70       	andi	r18, 0x07	; 7
    12f4:	24 0f       	add	r18, r20
    12f6:	fc 01       	movw	r30, r24
    12f8:	20 83       	st	Z, r18
    12fa:	82 ef       	ldi	r24, 0xF2	; 242
    12fc:	90 e0       	ldi	r25, 0x00	; 0
    12fe:	29 85       	ldd	r18, Y+9	; 0x09
    1300:	3a 85       	ldd	r19, Y+10	; 0x0a
    1302:	2e 5f       	subi	r18, 0xFE	; 254
    1304:	3f 4f       	sbci	r19, 0xFF	; 255
    1306:	2e 5f       	subi	r18, 0xFE	; 254
    1308:	3f 4f       	sbci	r19, 0xFF	; 255
    130a:	f9 01       	movw	r30, r18
    130c:	20 81       	ld	r18, Z
    130e:	42 2f       	mov	r20, r18
    1310:	44 0f       	add	r20, r20
    1312:	44 0f       	add	r20, r20
    1314:	44 0f       	add	r20, r20
    1316:	29 85       	ldd	r18, Y+9	; 0x09
    1318:	3a 85       	ldd	r19, Y+10	; 0x0a
    131a:	2e 5f       	subi	r18, 0xFE	; 254
    131c:	3f 4f       	sbci	r19, 0xFF	; 255
    131e:	2f 5f       	subi	r18, 0xFF	; 255
    1320:	3f 4f       	sbci	r19, 0xFF	; 255
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	22 95       	swap	r18
    1328:	26 95       	lsr	r18
    132a:	27 70       	andi	r18, 0x07	; 7
    132c:	24 0f       	add	r18, r20
    132e:	fc 01       	movw	r30, r24
    1330:	20 83       	st	Z, r18
    1332:	81 ef       	ldi	r24, 0xF1	; 241
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	29 85       	ldd	r18, Y+9	; 0x09
    1338:	3a 85       	ldd	r19, Y+10	; 0x0a
    133a:	2e 5f       	subi	r18, 0xFE	; 254
    133c:	3f 4f       	sbci	r19, 0xFF	; 255
    133e:	2f 5f       	subi	r18, 0xFF	; 255
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	f9 01       	movw	r30, r18
    1344:	20 81       	ld	r18, Z
    1346:	42 2f       	mov	r20, r18
    1348:	44 0f       	add	r20, r20
    134a:	44 0f       	add	r20, r20
    134c:	44 0f       	add	r20, r20
    134e:	29 85       	ldd	r18, Y+9	; 0x09
    1350:	3a 85       	ldd	r19, Y+10	; 0x0a
    1352:	2e 5f       	subi	r18, 0xFE	; 254
    1354:	3f 4f       	sbci	r19, 0xFF	; 255
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	22 95       	swap	r18
    135c:	26 95       	lsr	r18
    135e:	27 70       	andi	r18, 0x07	; 7
    1360:	24 0f       	add	r18, r20
    1362:	fc 01       	movw	r30, r24
    1364:	20 83       	st	Z, r18
    1366:	80 ef       	ldi	r24, 0xF0	; 240
    1368:	90 e0       	ldi	r25, 0x00	; 0
    136a:	29 85       	ldd	r18, Y+9	; 0x09
    136c:	3a 85       	ldd	r19, Y+10	; 0x0a
    136e:	2e 5f       	subi	r18, 0xFE	; 254
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	22 0f       	add	r18, r18
    1378:	22 0f       	add	r18, r18
    137a:	22 0f       	add	r18, r18
    137c:	fc 01       	movw	r30, r24
    137e:	20 83       	st	Z, r18
    1380:	8f ee       	ldi	r24, 0xEF	; 239
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	2f ee       	ldi	r18, 0xEF	; 239
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	20 61       	ori	r18, 0x10	; 16
    138e:	fc 01       	movw	r30, r24
    1390:	20 83       	st	Z, r18
    1392:	30 c0       	rjmp	.+96     	; 0x13f4 <__stack+0xaf5>
          else              { Can_set_std_id(cmd->id.std);}
    1394:	83 ef       	ldi	r24, 0xF3	; 243
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	29 85       	ldd	r18, Y+9	; 0x09
    139a:	3a 85       	ldd	r19, Y+10	; 0x0a
    139c:	2e 5f       	subi	r18, 0xFE	; 254
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	2f 5f       	subi	r18, 0xFF	; 255
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	f9 01       	movw	r30, r18
    13a6:	20 81       	ld	r18, Z
    13a8:	42 2f       	mov	r20, r18
    13aa:	42 95       	swap	r20
    13ac:	44 0f       	add	r20, r20
    13ae:	40 7e       	andi	r20, 0xE0	; 224
    13b0:	29 85       	ldd	r18, Y+9	; 0x09
    13b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b4:	2e 5f       	subi	r18, 0xFE	; 254
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	f9 01       	movw	r30, r18
    13ba:	20 81       	ld	r18, Z
    13bc:	26 95       	lsr	r18
    13be:	26 95       	lsr	r18
    13c0:	26 95       	lsr	r18
    13c2:	24 0f       	add	r18, r20
    13c4:	fc 01       	movw	r30, r24
    13c6:	20 83       	st	Z, r18
    13c8:	82 ef       	ldi	r24, 0xF2	; 242
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	29 85       	ldd	r18, Y+9	; 0x09
    13ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d0:	2e 5f       	subi	r18, 0xFE	; 254
    13d2:	3f 4f       	sbci	r19, 0xFF	; 255
    13d4:	f9 01       	movw	r30, r18
    13d6:	20 81       	ld	r18, Z
    13d8:	22 95       	swap	r18
    13da:	22 0f       	add	r18, r18
    13dc:	20 7e       	andi	r18, 0xE0	; 224
    13de:	fc 01       	movw	r30, r24
    13e0:	20 83       	st	Z, r18
    13e2:	8f ee       	ldi	r24, 0xEF	; 239
    13e4:	90 e0       	ldi	r25, 0x00	; 0
    13e6:	2f ee       	ldi	r18, 0xEF	; 239
    13e8:	30 e0       	ldi	r19, 0x00	; 0
    13ea:	f9 01       	movw	r30, r18
    13ec:	20 81       	ld	r18, Z
    13ee:	2f 7e       	andi	r18, 0xEF	; 239
    13f0:	fc 01       	movw	r30, r24
    13f2:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    13f4:	8f ef       	ldi	r24, 0xFF	; 255
    13f6:	9f ef       	ldi	r25, 0xFF	; 255
    13f8:	dc 01       	movw	r26, r24
    13fa:	8d 83       	std	Y+5, r24	; 0x05
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	af 83       	std	Y+7, r26	; 0x07
    1400:	b8 87       	std	Y+8, r27	; 0x08
    1402:	27 ef       	ldi	r18, 0xF7	; 247
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	ce 01       	movw	r24, r28
    1408:	05 96       	adiw	r24, 0x05	; 5
    140a:	03 96       	adiw	r24, 0x03	; 3
    140c:	fc 01       	movw	r30, r24
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	44 0f       	add	r20, r20
    1414:	44 0f       	add	r20, r20
    1416:	44 0f       	add	r20, r20
    1418:	ce 01       	movw	r24, r28
    141a:	05 96       	adiw	r24, 0x05	; 5
    141c:	02 96       	adiw	r24, 0x02	; 2
    141e:	fc 01       	movw	r30, r24
    1420:	80 81       	ld	r24, Z
    1422:	82 95       	swap	r24
    1424:	86 95       	lsr	r24
    1426:	87 70       	andi	r24, 0x07	; 7
    1428:	84 0f       	add	r24, r20
    142a:	f9 01       	movw	r30, r18
    142c:	80 83       	st	Z, r24
    142e:	26 ef       	ldi	r18, 0xF6	; 246
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	ce 01       	movw	r24, r28
    1434:	05 96       	adiw	r24, 0x05	; 5
    1436:	02 96       	adiw	r24, 0x02	; 2
    1438:	fc 01       	movw	r30, r24
    143a:	80 81       	ld	r24, Z
    143c:	48 2f       	mov	r20, r24
    143e:	44 0f       	add	r20, r20
    1440:	44 0f       	add	r20, r20
    1442:	44 0f       	add	r20, r20
    1444:	ce 01       	movw	r24, r28
    1446:	05 96       	adiw	r24, 0x05	; 5
    1448:	01 96       	adiw	r24, 0x01	; 1
    144a:	fc 01       	movw	r30, r24
    144c:	80 81       	ld	r24, Z
    144e:	82 95       	swap	r24
    1450:	86 95       	lsr	r24
    1452:	87 70       	andi	r24, 0x07	; 7
    1454:	84 0f       	add	r24, r20
    1456:	f9 01       	movw	r30, r18
    1458:	80 83       	st	Z, r24
    145a:	25 ef       	ldi	r18, 0xF5	; 245
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	ce 01       	movw	r24, r28
    1460:	05 96       	adiw	r24, 0x05	; 5
    1462:	01 96       	adiw	r24, 0x01	; 1
    1464:	fc 01       	movw	r30, r24
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	44 0f       	add	r20, r20
    146c:	44 0f       	add	r20, r20
    146e:	44 0f       	add	r20, r20
    1470:	ce 01       	movw	r24, r28
    1472:	05 96       	adiw	r24, 0x05	; 5
    1474:	fc 01       	movw	r30, r24
    1476:	80 81       	ld	r24, Z
    1478:	82 95       	swap	r24
    147a:	86 95       	lsr	r24
    147c:	87 70       	andi	r24, 0x07	; 7
    147e:	84 0f       	add	r24, r20
    1480:	f9 01       	movw	r30, r18
    1482:	80 83       	st	Z, r24
    1484:	84 ef       	ldi	r24, 0xF4	; 244
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9e 01       	movw	r18, r28
    148a:	2b 5f       	subi	r18, 0xFB	; 251
    148c:	3f 4f       	sbci	r19, 0xFF	; 255
    148e:	f9 01       	movw	r30, r18
    1490:	20 81       	ld	r18, Z
    1492:	22 0f       	add	r18, r18
    1494:	22 0f       	add	r18, r18
    1496:	22 0f       	add	r18, r18
    1498:	fc 01       	movw	r30, r24
    149a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    149c:	8f ee       	ldi	r24, 0xEF	; 239
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	2f ee       	ldi	r18, 0xEF	; 239
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	f9 01       	movw	r30, r18
    14a6:	40 81       	ld	r20, Z
    14a8:	29 85       	ldd	r18, Y+9	; 0x09
    14aa:	3a 85       	ldd	r19, Y+10	; 0x0a
    14ac:	f9 01       	movw	r30, r18
    14ae:	26 81       	ldd	r18, Z+6	; 0x06
    14b0:	24 2b       	or	r18, r20
    14b2:	fc 01       	movw	r30, r24
    14b4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    14b6:	89 85       	ldd	r24, Y+9	; 0x09
    14b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ba:	21 e0       	ldi	r18, 0x01	; 1
    14bc:	fc 01       	movw	r30, r24
    14be:	22 87       	std	Z+10, r18	; 0x0a
    14c0:	84 ef       	ldi	r24, 0xF4	; 244
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	24 ef       	ldi	r18, 0xF4	; 244
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	f9 01       	movw	r30, r18
    14ca:	20 81       	ld	r18, Z
    14cc:	24 60       	ori	r18, 0x04	; 4
    14ce:	fc 01       	movw	r30, r24
    14d0:	20 83       	st	Z, r18
    14d2:	80 ef       	ldi	r24, 0xF0	; 240
    14d4:	90 e0       	ldi	r25, 0x00	; 0
    14d6:	20 ef       	ldi	r18, 0xF0	; 240
    14d8:	30 e0       	ldi	r19, 0x00	; 0
    14da:	f9 01       	movw	r30, r18
    14dc:	20 81       	ld	r18, Z
    14de:	24 60       	ori	r18, 0x04	; 4
    14e0:	fc 01       	movw	r30, r24
    14e2:	20 83       	st	Z, r18
          Can_clear_rplv();
    14e4:	8f ee       	ldi	r24, 0xEF	; 239
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	2f ee       	ldi	r18, 0xEF	; 239
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	f9 01       	movw	r30, r18
    14ee:	20 81       	ld	r18, Z
    14f0:	2f 7d       	andi	r18, 0xDF	; 223
    14f2:	fc 01       	movw	r30, r24
    14f4:	20 83       	st	Z, r18
          Can_set_idemsk();
    14f6:	84 ef       	ldi	r24, 0xF4	; 244
    14f8:	90 e0       	ldi	r25, 0x00	; 0
    14fa:	24 ef       	ldi	r18, 0xF4	; 244
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	f9 01       	movw	r30, r18
    1500:	20 81       	ld	r18, Z
    1502:	21 60       	ori	r18, 0x01	; 1
    1504:	fc 01       	movw	r30, r24
    1506:	20 83       	st	Z, r18
          Can_config_rx();       
    1508:	8f ee       	ldi	r24, 0xEF	; 239
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	2f ee       	ldi	r18, 0xEF	; 239
    150e:	30 e0       	ldi	r19, 0x00	; 0
    1510:	f9 01       	movw	r30, r18
    1512:	20 81       	ld	r18, Z
    1514:	2f 73       	andi	r18, 0x3F	; 63
    1516:	fc 01       	movw	r30, r24
    1518:	20 83       	st	Z, r18
    151a:	8f ee       	ldi	r24, 0xEF	; 239
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	2f ee       	ldi	r18, 0xEF	; 239
    1520:	30 e0       	ldi	r19, 0x00	; 0
    1522:	f9 01       	movw	r30, r18
    1524:	20 81       	ld	r18, Z
    1526:	20 68       	ori	r18, 0x80	; 128
    1528:	fc 01       	movw	r30, r24
    152a:	20 83       	st	Z, r18
          break;
    152c:	1c c2       	rjmp	.+1080   	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    152e:	19 82       	std	Y+1, r1	; 0x01
    1530:	13 c0       	rjmp	.+38     	; 0x1558 <__stack+0xc59>
    1532:	8a ef       	ldi	r24, 0xFA	; 250
    1534:	90 e0       	ldi	r25, 0x00	; 0
    1536:	29 85       	ldd	r18, Y+9	; 0x09
    1538:	3a 85       	ldd	r19, Y+10	; 0x0a
    153a:	f9 01       	movw	r30, r18
    153c:	47 81       	ldd	r20, Z+7	; 0x07
    153e:	50 85       	ldd	r21, Z+8	; 0x08
    1540:	29 81       	ldd	r18, Y+1	; 0x01
    1542:	22 2f       	mov	r18, r18
    1544:	30 e0       	ldi	r19, 0x00	; 0
    1546:	24 0f       	add	r18, r20
    1548:	35 1f       	adc	r19, r21
    154a:	f9 01       	movw	r30, r18
    154c:	20 81       	ld	r18, Z
    154e:	fc 01       	movw	r30, r24
    1550:	20 83       	st	Z, r18
    1552:	89 81       	ldd	r24, Y+1	; 0x01
    1554:	8f 5f       	subi	r24, 0xFF	; 255
    1556:	89 83       	std	Y+1, r24	; 0x01
    1558:	89 85       	ldd	r24, Y+9	; 0x09
    155a:	9a 85       	ldd	r25, Y+10	; 0x0a
    155c:	fc 01       	movw	r30, r24
    155e:	96 81       	ldd	r25, Z+6	; 0x06
    1560:	89 81       	ldd	r24, Y+1	; 0x01
    1562:	89 17       	cp	r24, r25
    1564:	30 f3       	brcs	.-52     	; 0x1532 <__stack+0xc33>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1566:	1d 82       	std	Y+5, r1	; 0x05
    1568:	1e 82       	std	Y+6, r1	; 0x06
    156a:	1f 82       	std	Y+7, r1	; 0x07
    156c:	18 86       	std	Y+8, r1	; 0x08
    156e:	27 ef       	ldi	r18, 0xF7	; 247
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	ce 01       	movw	r24, r28
    1574:	05 96       	adiw	r24, 0x05	; 5
    1576:	03 96       	adiw	r24, 0x03	; 3
    1578:	fc 01       	movw	r30, r24
    157a:	80 81       	ld	r24, Z
    157c:	48 2f       	mov	r20, r24
    157e:	44 0f       	add	r20, r20
    1580:	44 0f       	add	r20, r20
    1582:	44 0f       	add	r20, r20
    1584:	ce 01       	movw	r24, r28
    1586:	05 96       	adiw	r24, 0x05	; 5
    1588:	02 96       	adiw	r24, 0x02	; 2
    158a:	fc 01       	movw	r30, r24
    158c:	80 81       	ld	r24, Z
    158e:	82 95       	swap	r24
    1590:	86 95       	lsr	r24
    1592:	87 70       	andi	r24, 0x07	; 7
    1594:	84 0f       	add	r24, r20
    1596:	f9 01       	movw	r30, r18
    1598:	80 83       	st	Z, r24
    159a:	26 ef       	ldi	r18, 0xF6	; 246
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	ce 01       	movw	r24, r28
    15a0:	05 96       	adiw	r24, 0x05	; 5
    15a2:	02 96       	adiw	r24, 0x02	; 2
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	48 2f       	mov	r20, r24
    15aa:	44 0f       	add	r20, r20
    15ac:	44 0f       	add	r20, r20
    15ae:	44 0f       	add	r20, r20
    15b0:	ce 01       	movw	r24, r28
    15b2:	05 96       	adiw	r24, 0x05	; 5
    15b4:	01 96       	adiw	r24, 0x01	; 1
    15b6:	fc 01       	movw	r30, r24
    15b8:	80 81       	ld	r24, Z
    15ba:	82 95       	swap	r24
    15bc:	86 95       	lsr	r24
    15be:	87 70       	andi	r24, 0x07	; 7
    15c0:	84 0f       	add	r24, r20
    15c2:	f9 01       	movw	r30, r18
    15c4:	80 83       	st	Z, r24
    15c6:	25 ef       	ldi	r18, 0xF5	; 245
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	ce 01       	movw	r24, r28
    15cc:	05 96       	adiw	r24, 0x05	; 5
    15ce:	01 96       	adiw	r24, 0x01	; 1
    15d0:	fc 01       	movw	r30, r24
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	44 0f       	add	r20, r20
    15d8:	44 0f       	add	r20, r20
    15da:	44 0f       	add	r20, r20
    15dc:	ce 01       	movw	r24, r28
    15de:	05 96       	adiw	r24, 0x05	; 5
    15e0:	fc 01       	movw	r30, r24
    15e2:	80 81       	ld	r24, Z
    15e4:	82 95       	swap	r24
    15e6:	86 95       	lsr	r24
    15e8:	87 70       	andi	r24, 0x07	; 7
    15ea:	84 0f       	add	r24, r20
    15ec:	f9 01       	movw	r30, r18
    15ee:	80 83       	st	Z, r24
    15f0:	84 ef       	ldi	r24, 0xF4	; 244
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	9e 01       	movw	r18, r28
    15f6:	2b 5f       	subi	r18, 0xFB	; 251
    15f8:	3f 4f       	sbci	r19, 0xFF	; 255
    15fa:	f9 01       	movw	r30, r18
    15fc:	20 81       	ld	r18, Z
    15fe:	22 0f       	add	r18, r18
    1600:	22 0f       	add	r18, r18
    1602:	22 0f       	add	r18, r18
    1604:	fc 01       	movw	r30, r24
    1606:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1608:	8f ee       	ldi	r24, 0xEF	; 239
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	2f ee       	ldi	r18, 0xEF	; 239
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	f9 01       	movw	r30, r18
    1612:	40 81       	ld	r20, Z
    1614:	29 85       	ldd	r18, Y+9	; 0x09
    1616:	3a 85       	ldd	r19, Y+10	; 0x0a
    1618:	f9 01       	movw	r30, r18
    161a:	26 81       	ldd	r18, Z+6	; 0x06
    161c:	24 2b       	or	r18, r20
    161e:	fc 01       	movw	r30, r24
    1620:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1622:	89 85       	ldd	r24, Y+9	; 0x09
    1624:	9a 85       	ldd	r25, Y+10	; 0x0a
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	fc 01       	movw	r30, r24
    162a:	22 87       	std	Z+10, r18	; 0x0a
    162c:	84 ef       	ldi	r24, 0xF4	; 244
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	24 ef       	ldi	r18, 0xF4	; 244
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	f9 01       	movw	r30, r18
    1636:	20 81       	ld	r18, Z
    1638:	24 60       	ori	r18, 0x04	; 4
    163a:	fc 01       	movw	r30, r24
    163c:	20 83       	st	Z, r18
    163e:	80 ef       	ldi	r24, 0xF0	; 240
    1640:	90 e0       	ldi	r25, 0x00	; 0
    1642:	20 ef       	ldi	r18, 0xF0	; 240
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	f9 01       	movw	r30, r18
    1648:	20 81       	ld	r18, Z
    164a:	24 60       	ori	r18, 0x04	; 4
    164c:	fc 01       	movw	r30, r24
    164e:	20 83       	st	Z, r18
          Can_set_rplv();
    1650:	8f ee       	ldi	r24, 0xEF	; 239
    1652:	90 e0       	ldi	r25, 0x00	; 0
    1654:	2f ee       	ldi	r18, 0xEF	; 239
    1656:	30 e0       	ldi	r19, 0x00	; 0
    1658:	f9 01       	movw	r30, r18
    165a:	20 81       	ld	r18, Z
    165c:	20 62       	ori	r18, 0x20	; 32
    165e:	fc 01       	movw	r30, r24
    1660:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1662:	84 ef       	ldi	r24, 0xF4	; 244
    1664:	90 e0       	ldi	r25, 0x00	; 0
    1666:	24 ef       	ldi	r18, 0xF4	; 244
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	f9 01       	movw	r30, r18
    166c:	20 81       	ld	r18, Z
    166e:	2e 7f       	andi	r18, 0xFE	; 254
    1670:	fc 01       	movw	r30, r24
    1672:	20 83       	st	Z, r18
          Can_config_rx();       
    1674:	8f ee       	ldi	r24, 0xEF	; 239
    1676:	90 e0       	ldi	r25, 0x00	; 0
    1678:	2f ee       	ldi	r18, 0xEF	; 239
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	f9 01       	movw	r30, r18
    167e:	20 81       	ld	r18, Z
    1680:	2f 73       	andi	r18, 0x3F	; 63
    1682:	fc 01       	movw	r30, r24
    1684:	20 83       	st	Z, r18
    1686:	8f ee       	ldi	r24, 0xEF	; 239
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	2f ee       	ldi	r18, 0xEF	; 239
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	f9 01       	movw	r30, r18
    1690:	20 81       	ld	r18, Z
    1692:	20 68       	ori	r18, 0x80	; 128
    1694:	fc 01       	movw	r30, r24
    1696:	20 83       	st	Z, r18
          break;
    1698:	66 c1       	rjmp	.+716    	; 0x1966 <__stack+0x1067>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    169a:	89 85       	ldd	r24, Y+9	; 0x09
    169c:	9a 85       	ldd	r25, Y+10	; 0x0a
    169e:	fc 01       	movw	r30, r24
    16a0:	83 85       	ldd	r24, Z+11	; 0x0b
    16a2:	88 23       	and	r24, r24
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <__stack+0xda9>
    16a6:	69 c0       	rjmp	.+210    	; 0x177a <__stack+0xe7b>
    16a8:	83 ef       	ldi	r24, 0xF3	; 243
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	29 85       	ldd	r18, Y+9	; 0x09
    16ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b0:	2e 5f       	subi	r18, 0xFE	; 254
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	2d 5f       	subi	r18, 0xFD	; 253
    16b6:	3f 4f       	sbci	r19, 0xFF	; 255
    16b8:	f9 01       	movw	r30, r18
    16ba:	20 81       	ld	r18, Z
    16bc:	42 2f       	mov	r20, r18
    16be:	44 0f       	add	r20, r20
    16c0:	44 0f       	add	r20, r20
    16c2:	44 0f       	add	r20, r20
    16c4:	29 85       	ldd	r18, Y+9	; 0x09
    16c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16c8:	2e 5f       	subi	r18, 0xFE	; 254
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	2e 5f       	subi	r18, 0xFE	; 254
    16ce:	3f 4f       	sbci	r19, 0xFF	; 255
    16d0:	f9 01       	movw	r30, r18
    16d2:	20 81       	ld	r18, Z
    16d4:	22 95       	swap	r18
    16d6:	26 95       	lsr	r18
    16d8:	27 70       	andi	r18, 0x07	; 7
    16da:	24 0f       	add	r18, r20
    16dc:	fc 01       	movw	r30, r24
    16de:	20 83       	st	Z, r18
    16e0:	82 ef       	ldi	r24, 0xF2	; 242
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	29 85       	ldd	r18, Y+9	; 0x09
    16e6:	3a 85       	ldd	r19, Y+10	; 0x0a
    16e8:	2e 5f       	subi	r18, 0xFE	; 254
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	2e 5f       	subi	r18, 0xFE	; 254
    16ee:	3f 4f       	sbci	r19, 0xFF	; 255
    16f0:	f9 01       	movw	r30, r18
    16f2:	20 81       	ld	r18, Z
    16f4:	42 2f       	mov	r20, r18
    16f6:	44 0f       	add	r20, r20
    16f8:	44 0f       	add	r20, r20
    16fa:	44 0f       	add	r20, r20
    16fc:	29 85       	ldd	r18, Y+9	; 0x09
    16fe:	3a 85       	ldd	r19, Y+10	; 0x0a
    1700:	2e 5f       	subi	r18, 0xFE	; 254
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	2f 5f       	subi	r18, 0xFF	; 255
    1706:	3f 4f       	sbci	r19, 0xFF	; 255
    1708:	f9 01       	movw	r30, r18
    170a:	20 81       	ld	r18, Z
    170c:	22 95       	swap	r18
    170e:	26 95       	lsr	r18
    1710:	27 70       	andi	r18, 0x07	; 7
    1712:	24 0f       	add	r18, r20
    1714:	fc 01       	movw	r30, r24
    1716:	20 83       	st	Z, r18
    1718:	81 ef       	ldi	r24, 0xF1	; 241
    171a:	90 e0       	ldi	r25, 0x00	; 0
    171c:	29 85       	ldd	r18, Y+9	; 0x09
    171e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1720:	2e 5f       	subi	r18, 0xFE	; 254
    1722:	3f 4f       	sbci	r19, 0xFF	; 255
    1724:	2f 5f       	subi	r18, 0xFF	; 255
    1726:	3f 4f       	sbci	r19, 0xFF	; 255
    1728:	f9 01       	movw	r30, r18
    172a:	20 81       	ld	r18, Z
    172c:	42 2f       	mov	r20, r18
    172e:	44 0f       	add	r20, r20
    1730:	44 0f       	add	r20, r20
    1732:	44 0f       	add	r20, r20
    1734:	29 85       	ldd	r18, Y+9	; 0x09
    1736:	3a 85       	ldd	r19, Y+10	; 0x0a
    1738:	2e 5f       	subi	r18, 0xFE	; 254
    173a:	3f 4f       	sbci	r19, 0xFF	; 255
    173c:	f9 01       	movw	r30, r18
    173e:	20 81       	ld	r18, Z
    1740:	22 95       	swap	r18
    1742:	26 95       	lsr	r18
    1744:	27 70       	andi	r18, 0x07	; 7
    1746:	24 0f       	add	r18, r20
    1748:	fc 01       	movw	r30, r24
    174a:	20 83       	st	Z, r18
    174c:	80 ef       	ldi	r24, 0xF0	; 240
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	29 85       	ldd	r18, Y+9	; 0x09
    1752:	3a 85       	ldd	r19, Y+10	; 0x0a
    1754:	2e 5f       	subi	r18, 0xFE	; 254
    1756:	3f 4f       	sbci	r19, 0xFF	; 255
    1758:	f9 01       	movw	r30, r18
    175a:	20 81       	ld	r18, Z
    175c:	22 0f       	add	r18, r18
    175e:	22 0f       	add	r18, r18
    1760:	22 0f       	add	r18, r18
    1762:	fc 01       	movw	r30, r24
    1764:	20 83       	st	Z, r18
    1766:	8f ee       	ldi	r24, 0xEF	; 239
    1768:	90 e0       	ldi	r25, 0x00	; 0
    176a:	2f ee       	ldi	r18, 0xEF	; 239
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	20 61       	ori	r18, 0x10	; 16
    1774:	fc 01       	movw	r30, r24
    1776:	20 83       	st	Z, r18
    1778:	30 c0       	rjmp	.+96     	; 0x17da <__stack+0xedb>
          else              { Can_set_std_id(cmd->id.std);}
    177a:	83 ef       	ldi	r24, 0xF3	; 243
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	29 85       	ldd	r18, Y+9	; 0x09
    1780:	3a 85       	ldd	r19, Y+10	; 0x0a
    1782:	2e 5f       	subi	r18, 0xFE	; 254
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	2f 5f       	subi	r18, 0xFF	; 255
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	42 2f       	mov	r20, r18
    1790:	42 95       	swap	r20
    1792:	44 0f       	add	r20, r20
    1794:	40 7e       	andi	r20, 0xE0	; 224
    1796:	29 85       	ldd	r18, Y+9	; 0x09
    1798:	3a 85       	ldd	r19, Y+10	; 0x0a
    179a:	2e 5f       	subi	r18, 0xFE	; 254
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	f9 01       	movw	r30, r18
    17a0:	20 81       	ld	r18, Z
    17a2:	26 95       	lsr	r18
    17a4:	26 95       	lsr	r18
    17a6:	26 95       	lsr	r18
    17a8:	24 0f       	add	r18, r20
    17aa:	fc 01       	movw	r30, r24
    17ac:	20 83       	st	Z, r18
    17ae:	82 ef       	ldi	r24, 0xF2	; 242
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	29 85       	ldd	r18, Y+9	; 0x09
    17b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17b6:	2e 5f       	subi	r18, 0xFE	; 254
    17b8:	3f 4f       	sbci	r19, 0xFF	; 255
    17ba:	f9 01       	movw	r30, r18
    17bc:	20 81       	ld	r18, Z
    17be:	22 95       	swap	r18
    17c0:	22 0f       	add	r18, r18
    17c2:	20 7e       	andi	r18, 0xE0	; 224
    17c4:	fc 01       	movw	r30, r24
    17c6:	20 83       	st	Z, r18
    17c8:	8f ee       	ldi	r24, 0xEF	; 239
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	2f ee       	ldi	r18, 0xEF	; 239
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	f9 01       	movw	r30, r18
    17d2:	20 81       	ld	r18, Z
    17d4:	2f 7e       	andi	r18, 0xEF	; 239
    17d6:	fc 01       	movw	r30, r24
    17d8:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	13 c0       	rjmp	.+38     	; 0x1804 <__stack+0xf05>
    17de:	8a ef       	ldi	r24, 0xFA	; 250
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	29 85       	ldd	r18, Y+9	; 0x09
    17e4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17e6:	f9 01       	movw	r30, r18
    17e8:	47 81       	ldd	r20, Z+7	; 0x07
    17ea:	50 85       	ldd	r21, Z+8	; 0x08
    17ec:	29 81       	ldd	r18, Y+1	; 0x01
    17ee:	22 2f       	mov	r18, r18
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	24 0f       	add	r18, r20
    17f4:	35 1f       	adc	r19, r21
    17f6:	f9 01       	movw	r30, r18
    17f8:	20 81       	ld	r18, Z
    17fa:	fc 01       	movw	r30, r24
    17fc:	20 83       	st	Z, r18
    17fe:	89 81       	ldd	r24, Y+1	; 0x01
    1800:	8f 5f       	subi	r24, 0xFF	; 255
    1802:	89 83       	std	Y+1, r24	; 0x01
    1804:	89 85       	ldd	r24, Y+9	; 0x09
    1806:	9a 85       	ldd	r25, Y+10	; 0x0a
    1808:	fc 01       	movw	r30, r24
    180a:	96 81       	ldd	r25, Z+6	; 0x06
    180c:	89 81       	ldd	r24, Y+1	; 0x01
    180e:	89 17       	cp	r24, r25
    1810:	30 f3       	brcs	.-52     	; 0x17de <__stack+0xedf>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1812:	8f ef       	ldi	r24, 0xFF	; 255
    1814:	9f ef       	ldi	r25, 0xFF	; 255
    1816:	dc 01       	movw	r26, r24
    1818:	8d 83       	std	Y+5, r24	; 0x05
    181a:	9e 83       	std	Y+6, r25	; 0x06
    181c:	af 83       	std	Y+7, r26	; 0x07
    181e:	b8 87       	std	Y+8, r27	; 0x08
    1820:	27 ef       	ldi	r18, 0xF7	; 247
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	ce 01       	movw	r24, r28
    1826:	05 96       	adiw	r24, 0x05	; 5
    1828:	03 96       	adiw	r24, 0x03	; 3
    182a:	fc 01       	movw	r30, r24
    182c:	80 81       	ld	r24, Z
    182e:	48 2f       	mov	r20, r24
    1830:	44 0f       	add	r20, r20
    1832:	44 0f       	add	r20, r20
    1834:	44 0f       	add	r20, r20
    1836:	ce 01       	movw	r24, r28
    1838:	05 96       	adiw	r24, 0x05	; 5
    183a:	02 96       	adiw	r24, 0x02	; 2
    183c:	fc 01       	movw	r30, r24
    183e:	80 81       	ld	r24, Z
    1840:	82 95       	swap	r24
    1842:	86 95       	lsr	r24
    1844:	87 70       	andi	r24, 0x07	; 7
    1846:	84 0f       	add	r24, r20
    1848:	f9 01       	movw	r30, r18
    184a:	80 83       	st	Z, r24
    184c:	26 ef       	ldi	r18, 0xF6	; 246
    184e:	30 e0       	ldi	r19, 0x00	; 0
    1850:	ce 01       	movw	r24, r28
    1852:	05 96       	adiw	r24, 0x05	; 5
    1854:	02 96       	adiw	r24, 0x02	; 2
    1856:	fc 01       	movw	r30, r24
    1858:	80 81       	ld	r24, Z
    185a:	48 2f       	mov	r20, r24
    185c:	44 0f       	add	r20, r20
    185e:	44 0f       	add	r20, r20
    1860:	44 0f       	add	r20, r20
    1862:	ce 01       	movw	r24, r28
    1864:	05 96       	adiw	r24, 0x05	; 5
    1866:	01 96       	adiw	r24, 0x01	; 1
    1868:	fc 01       	movw	r30, r24
    186a:	80 81       	ld	r24, Z
    186c:	82 95       	swap	r24
    186e:	86 95       	lsr	r24
    1870:	87 70       	andi	r24, 0x07	; 7
    1872:	84 0f       	add	r24, r20
    1874:	f9 01       	movw	r30, r18
    1876:	80 83       	st	Z, r24
    1878:	25 ef       	ldi	r18, 0xF5	; 245
    187a:	30 e0       	ldi	r19, 0x00	; 0
    187c:	ce 01       	movw	r24, r28
    187e:	05 96       	adiw	r24, 0x05	; 5
    1880:	01 96       	adiw	r24, 0x01	; 1
    1882:	fc 01       	movw	r30, r24
    1884:	80 81       	ld	r24, Z
    1886:	48 2f       	mov	r20, r24
    1888:	44 0f       	add	r20, r20
    188a:	44 0f       	add	r20, r20
    188c:	44 0f       	add	r20, r20
    188e:	ce 01       	movw	r24, r28
    1890:	05 96       	adiw	r24, 0x05	; 5
    1892:	fc 01       	movw	r30, r24
    1894:	80 81       	ld	r24, Z
    1896:	82 95       	swap	r24
    1898:	86 95       	lsr	r24
    189a:	87 70       	andi	r24, 0x07	; 7
    189c:	84 0f       	add	r24, r20
    189e:	f9 01       	movw	r30, r18
    18a0:	80 83       	st	Z, r24
    18a2:	84 ef       	ldi	r24, 0xF4	; 244
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	9e 01       	movw	r18, r28
    18a8:	2b 5f       	subi	r18, 0xFB	; 251
    18aa:	3f 4f       	sbci	r19, 0xFF	; 255
    18ac:	f9 01       	movw	r30, r18
    18ae:	20 81       	ld	r18, Z
    18b0:	22 0f       	add	r18, r18
    18b2:	22 0f       	add	r18, r18
    18b4:	22 0f       	add	r18, r18
    18b6:	fc 01       	movw	r30, r24
    18b8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    18ba:	8f ee       	ldi	r24, 0xEF	; 239
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	2f ee       	ldi	r18, 0xEF	; 239
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	f9 01       	movw	r30, r18
    18c4:	40 81       	ld	r20, Z
    18c6:	29 85       	ldd	r18, Y+9	; 0x09
    18c8:	3a 85       	ldd	r19, Y+10	; 0x0a
    18ca:	f9 01       	movw	r30, r18
    18cc:	26 81       	ldd	r18, Z+6	; 0x06
    18ce:	24 2b       	or	r18, r20
    18d0:	fc 01       	movw	r30, r24
    18d2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    18d4:	89 85       	ldd	r24, Y+9	; 0x09
    18d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    18d8:	21 e0       	ldi	r18, 0x01	; 1
    18da:	fc 01       	movw	r30, r24
    18dc:	22 87       	std	Z+10, r18	; 0x0a
    18de:	84 ef       	ldi	r24, 0xF4	; 244
    18e0:	90 e0       	ldi	r25, 0x00	; 0
    18e2:	24 ef       	ldi	r18, 0xF4	; 244
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	f9 01       	movw	r30, r18
    18e8:	20 81       	ld	r18, Z
    18ea:	24 60       	ori	r18, 0x04	; 4
    18ec:	fc 01       	movw	r30, r24
    18ee:	20 83       	st	Z, r18
    18f0:	80 ef       	ldi	r24, 0xF0	; 240
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	20 ef       	ldi	r18, 0xF0	; 240
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	f9 01       	movw	r30, r18
    18fa:	20 81       	ld	r18, Z
    18fc:	24 60       	ori	r18, 0x04	; 4
    18fe:	fc 01       	movw	r30, r24
    1900:	20 83       	st	Z, r18
          Can_set_rplv();
    1902:	8f ee       	ldi	r24, 0xEF	; 239
    1904:	90 e0       	ldi	r25, 0x00	; 0
    1906:	2f ee       	ldi	r18, 0xEF	; 239
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	f9 01       	movw	r30, r18
    190c:	20 81       	ld	r18, Z
    190e:	20 62       	ori	r18, 0x20	; 32
    1910:	fc 01       	movw	r30, r24
    1912:	20 83       	st	Z, r18
          Can_set_idemsk();
    1914:	84 ef       	ldi	r24, 0xF4	; 244
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	24 ef       	ldi	r18, 0xF4	; 244
    191a:	30 e0       	ldi	r19, 0x00	; 0
    191c:	f9 01       	movw	r30, r18
    191e:	20 81       	ld	r18, Z
    1920:	21 60       	ori	r18, 0x01	; 1
    1922:	fc 01       	movw	r30, r24
    1924:	20 83       	st	Z, r18
          Can_config_rx();       
    1926:	8f ee       	ldi	r24, 0xEF	; 239
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	2f ee       	ldi	r18, 0xEF	; 239
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	f9 01       	movw	r30, r18
    1930:	20 81       	ld	r18, Z
    1932:	2f 73       	andi	r18, 0x3F	; 63
    1934:	fc 01       	movw	r30, r24
    1936:	20 83       	st	Z, r18
    1938:	8f ee       	ldi	r24, 0xEF	; 239
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	2f ee       	ldi	r18, 0xEF	; 239
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	f9 01       	movw	r30, r18
    1942:	20 81       	ld	r18, Z
    1944:	20 68       	ori	r18, 0x80	; 128
    1946:	fc 01       	movw	r30, r24
    1948:	20 83       	st	Z, r18
          break;
    194a:	0d c0       	rjmp	.+26     	; 0x1966 <__stack+0x1067>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    194c:	89 85       	ldd	r24, Y+9	; 0x09
    194e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1950:	fc 01       	movw	r30, r24
    1952:	11 86       	std	Z+9, r1	; 0x09
          break;
    1954:	00 00       	nop
    1956:	07 c0       	rjmp	.+14     	; 0x1966 <__stack+0x1067>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	9a 85       	ldd	r25, Y+10	; 0x0a
    195c:	2f e1       	ldi	r18, 0x1F	; 31
    195e:	fc 01       	movw	r30, r24
    1960:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1962:	8f ef       	ldi	r24, 0xFF	; 255
    1964:	01 c0       	rjmp	.+2      	; 0x1968 <__stack+0x1069>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1966:	80 e0       	ldi	r24, 0x00	; 0
}
    1968:	2a 96       	adiw	r28, 0x0a	; 10
    196a:	0f b6       	in	r0, 0x3f	; 63
    196c:	f8 94       	cli
    196e:	de bf       	out	0x3e, r29	; 62
    1970:	0f be       	out	0x3f, r0	; 63
    1972:	cd bf       	out	0x3d, r28	; 61
    1974:	df 91       	pop	r29
    1976:	cf 91       	pop	r28
    1978:	08 95       	ret

0000197a <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    197a:	cf 93       	push	r28
    197c:	df 93       	push	r29
    197e:	00 d0       	rcall	.+0      	; 0x1980 <can_get_status+0x6>
    1980:	00 d0       	rcall	.+0      	; 0x1982 <can_get_status+0x8>
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	9c 83       	std	Y+4, r25	; 0x04
    1988:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    198a:	8b 81       	ldd	r24, Y+3	; 0x03
    198c:	9c 81       	ldd	r25, Y+4	; 0x04
    198e:	fc 01       	movw	r30, r24
    1990:	81 85       	ldd	r24, Z+9	; 0x09
    1992:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1994:	8a 81       	ldd	r24, Y+2	; 0x02
    1996:	88 23       	and	r24, r24
    1998:	31 f0       	breq	.+12     	; 0x19a6 <can_get_status+0x2c>
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	8f 31       	cpi	r24, 0x1F	; 31
    199e:	19 f0       	breq	.+6      	; 0x19a6 <can_get_status+0x2c>
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	8f 3f       	cpi	r24, 0xFF	; 255
    19a4:	11 f4       	brne	.+4      	; 0x19aa <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    19a6:	82 e0       	ldi	r24, 0x02	; 2
    19a8:	14 c1       	rjmp	.+552    	; 0x1bd2 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    19aa:	8d ee       	ldi	r24, 0xED	; 237
    19ac:	90 e0       	ldi	r25, 0x00	; 0
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	f9 01       	movw	r30, r18
    19b4:	20 81       	ld	r18, Z
    19b6:	22 95       	swap	r18
    19b8:	20 7f       	andi	r18, 0xF0	; 240
    19ba:	fc 01       	movw	r30, r24
    19bc:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    19be:	0e 94 8a 01 	call	0x314	; 0x314 <can_get_mob_status>
    19c2:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    19c4:	8a 81       	ldd	r24, Y+2	; 0x02
    19c6:	88 2f       	mov	r24, r24
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	80 32       	cpi	r24, 0x20	; 32
    19cc:	91 05       	cpc	r25, r1
    19ce:	89 f0       	breq	.+34     	; 0x19f2 <can_get_status+0x78>
    19d0:	81 32       	cpi	r24, 0x21	; 33
    19d2:	91 05       	cpc	r25, r1
    19d4:	1c f4       	brge	.+6      	; 0x19dc <can_get_status+0x62>
    19d6:	89 2b       	or	r24, r25
    19d8:	49 f0       	breq	.+18     	; 0x19ec <can_get_status+0x72>
    19da:	e5 c0       	rjmp	.+458    	; 0x1ba6 <can_get_status+0x22c>
    19dc:	80 34       	cpi	r24, 0x40	; 64
    19de:	91 05       	cpc	r25, r1
    19e0:	09 f4       	brne	.+2      	; 0x19e4 <can_get_status+0x6a>
    19e2:	cd c0       	rjmp	.+410    	; 0x1b7e <can_get_status+0x204>
    19e4:	80 3a       	cpi	r24, 0xA0	; 160
    19e6:	91 05       	cpc	r25, r1
    19e8:	21 f0       	breq	.+8      	; 0x19f2 <can_get_status+0x78>
    19ea:	dd c0       	rjmp	.+442    	; 0x1ba6 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    19ec:	81 e0       	ldi	r24, 0x01	; 1
    19ee:	89 83       	std	Y+1, r24	; 0x01
            break;
    19f0:	ef c0       	rjmp	.+478    	; 0x1bd0 <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    19f2:	8f ee       	ldi	r24, 0xEF	; 239
    19f4:	90 e0       	ldi	r25, 0x00	; 0
    19f6:	fc 01       	movw	r30, r24
    19f8:	80 81       	ld	r24, Z
    19fa:	28 2f       	mov	r18, r24
    19fc:	2f 70       	andi	r18, 0x0F	; 15
    19fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1a00:	9c 81       	ldd	r25, Y+4	; 0x04
    1a02:	fc 01       	movw	r30, r24
    1a04:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	fc 01       	movw	r30, r24
    1a0c:	87 81       	ldd	r24, Z+7	; 0x07
    1a0e:	90 85       	ldd	r25, Z+8	; 0x08
    1a10:	0e 94 bc 01 	call	0x378	; 0x378 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1a14:	80 ef       	ldi	r24, 0xF0	; 240
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	fc 01       	movw	r30, r24
    1a1a:	80 81       	ld	r24, Z
    1a1c:	88 2f       	mov	r24, r24
    1a1e:	90 e0       	ldi	r25, 0x00	; 0
    1a20:	84 70       	andi	r24, 0x04	; 4
    1a22:	99 27       	eor	r25, r25
    1a24:	95 95       	asr	r25
    1a26:	87 95       	ror	r24
    1a28:	95 95       	asr	r25
    1a2a:	87 95       	ror	r24
    1a2c:	21 e0       	ldi	r18, 0x01	; 1
    1a2e:	89 2b       	or	r24, r25
    1a30:	09 f4       	brne	.+2      	; 0x1a34 <can_get_status+0xba>
    1a32:	20 e0       	ldi	r18, 0x00	; 0
    1a34:	8b 81       	ldd	r24, Y+3	; 0x03
    1a36:	9c 81       	ldd	r25, Y+4	; 0x04
    1a38:	fc 01       	movw	r30, r24
    1a3a:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1a3c:	8f ee       	ldi	r24, 0xEF	; 239
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	fc 01       	movw	r30, r24
    1a42:	80 81       	ld	r24, Z
    1a44:	88 2f       	mov	r24, r24
    1a46:	90 e0       	ldi	r25, 0x00	; 0
    1a48:	80 71       	andi	r24, 0x10	; 16
    1a4a:	99 27       	eor	r25, r25
    1a4c:	95 95       	asr	r25
    1a4e:	87 95       	ror	r24
    1a50:	95 95       	asr	r25
    1a52:	87 95       	ror	r24
    1a54:	95 95       	asr	r25
    1a56:	87 95       	ror	r24
    1a58:	95 95       	asr	r25
    1a5a:	87 95       	ror	r24
    1a5c:	89 2b       	or	r24, r25
    1a5e:	09 f4       	brne	.+2      	; 0x1a62 <can_get_status+0xe8>
    1a60:	54 c0       	rjmp	.+168    	; 0x1b0a <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1a62:	8b 81       	ldd	r24, Y+3	; 0x03
    1a64:	9c 81       	ldd	r25, Y+4	; 0x04
    1a66:	21 e0       	ldi	r18, 0x01	; 1
    1a68:	fc 01       	movw	r30, r24
    1a6a:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1a6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a6e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a70:	02 96       	adiw	r24, 0x02	; 2
    1a72:	03 96       	adiw	r24, 0x03	; 3
    1a74:	23 ef       	ldi	r18, 0xF3	; 243
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	f9 01       	movw	r30, r18
    1a7a:	20 81       	ld	r18, Z
    1a7c:	26 95       	lsr	r18
    1a7e:	26 95       	lsr	r18
    1a80:	26 95       	lsr	r18
    1a82:	fc 01       	movw	r30, r24
    1a84:	20 83       	st	Z, r18
    1a86:	8b 81       	ldd	r24, Y+3	; 0x03
    1a88:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8a:	02 96       	adiw	r24, 0x02	; 2
    1a8c:	02 96       	adiw	r24, 0x02	; 2
    1a8e:	22 ef       	ldi	r18, 0xF2	; 242
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	f9 01       	movw	r30, r18
    1a94:	20 81       	ld	r18, Z
    1a96:	42 2f       	mov	r20, r18
    1a98:	46 95       	lsr	r20
    1a9a:	46 95       	lsr	r20
    1a9c:	46 95       	lsr	r20
    1a9e:	23 ef       	ldi	r18, 0xF3	; 243
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	f9 01       	movw	r30, r18
    1aa4:	20 81       	ld	r18, Z
    1aa6:	22 95       	swap	r18
    1aa8:	22 0f       	add	r18, r18
    1aaa:	20 7e       	andi	r18, 0xE0	; 224
    1aac:	24 0f       	add	r18, r20
    1aae:	fc 01       	movw	r30, r24
    1ab0:	20 83       	st	Z, r18
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	02 96       	adiw	r24, 0x02	; 2
    1ab8:	01 96       	adiw	r24, 0x01	; 1
    1aba:	21 ef       	ldi	r18, 0xF1	; 241
    1abc:	30 e0       	ldi	r19, 0x00	; 0
    1abe:	f9 01       	movw	r30, r18
    1ac0:	20 81       	ld	r18, Z
    1ac2:	42 2f       	mov	r20, r18
    1ac4:	46 95       	lsr	r20
    1ac6:	46 95       	lsr	r20
    1ac8:	46 95       	lsr	r20
    1aca:	22 ef       	ldi	r18, 0xF2	; 242
    1acc:	30 e0       	ldi	r19, 0x00	; 0
    1ace:	f9 01       	movw	r30, r18
    1ad0:	20 81       	ld	r18, Z
    1ad2:	22 95       	swap	r18
    1ad4:	22 0f       	add	r18, r18
    1ad6:	20 7e       	andi	r18, 0xE0	; 224
    1ad8:	24 0f       	add	r18, r20
    1ada:	fc 01       	movw	r30, r24
    1adc:	20 83       	st	Z, r18
    1ade:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ae2:	02 96       	adiw	r24, 0x02	; 2
    1ae4:	20 ef       	ldi	r18, 0xF0	; 240
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	f9 01       	movw	r30, r18
    1aea:	20 81       	ld	r18, Z
    1aec:	42 2f       	mov	r20, r18
    1aee:	46 95       	lsr	r20
    1af0:	46 95       	lsr	r20
    1af2:	46 95       	lsr	r20
    1af4:	21 ef       	ldi	r18, 0xF1	; 241
    1af6:	30 e0       	ldi	r19, 0x00	; 0
    1af8:	f9 01       	movw	r30, r18
    1afa:	20 81       	ld	r18, Z
    1afc:	22 95       	swap	r18
    1afe:	22 0f       	add	r18, r18
    1b00:	20 7e       	andi	r18, 0xE0	; 224
    1b02:	24 0f       	add	r18, r20
    1b04:	fc 01       	movw	r30, r24
    1b06:	20 83       	st	Z, r18
    1b08:	26 c0       	rjmp	.+76     	; 0x1b56 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	fc 01       	movw	r30, r24
    1b10:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	02 96       	adiw	r24, 0x02	; 2
    1b18:	01 96       	adiw	r24, 0x01	; 1
    1b1a:	23 ef       	ldi	r18, 0xF3	; 243
    1b1c:	30 e0       	ldi	r19, 0x00	; 0
    1b1e:	f9 01       	movw	r30, r18
    1b20:	20 81       	ld	r18, Z
    1b22:	22 95       	swap	r18
    1b24:	26 95       	lsr	r18
    1b26:	27 70       	andi	r18, 0x07	; 7
    1b28:	fc 01       	movw	r30, r24
    1b2a:	20 83       	st	Z, r18
    1b2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b30:	02 96       	adiw	r24, 0x02	; 2
    1b32:	22 ef       	ldi	r18, 0xF2	; 242
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	f9 01       	movw	r30, r18
    1b38:	20 81       	ld	r18, Z
    1b3a:	42 2f       	mov	r20, r18
    1b3c:	42 95       	swap	r20
    1b3e:	46 95       	lsr	r20
    1b40:	47 70       	andi	r20, 0x07	; 7
    1b42:	23 ef       	ldi	r18, 0xF3	; 243
    1b44:	30 e0       	ldi	r19, 0x00	; 0
    1b46:	f9 01       	movw	r30, r18
    1b48:	20 81       	ld	r18, Z
    1b4a:	22 0f       	add	r18, r18
    1b4c:	22 0f       	add	r18, r18
    1b4e:	22 0f       	add	r18, r18
    1b50:	24 0f       	add	r18, r20
    1b52:	fc 01       	movw	r30, r24
    1b54:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	2a 81       	ldd	r18, Y+2	; 0x02
    1b5c:	fc 01       	movw	r30, r24
    1b5e:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b60:	8f ee       	ldi	r24, 0xEF	; 239
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	2f ee       	ldi	r18, 0xEF	; 239
    1b66:	30 e0       	ldi	r19, 0x00	; 0
    1b68:	f9 01       	movw	r30, r18
    1b6a:	20 81       	ld	r18, Z
    1b6c:	2f 73       	andi	r18, 0x3F	; 63
    1b6e:	fc 01       	movw	r30, r24
    1b70:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b72:	8e ee       	ldi	r24, 0xEE	; 238
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	fc 01       	movw	r30, r24
    1b78:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1b7a:	19 82       	std	Y+1, r1	; 0x01
            break;
    1b7c:	29 c0       	rjmp	.+82     	; 0x1bd0 <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	2a 81       	ldd	r18, Y+2	; 0x02
    1b84:	fc 01       	movw	r30, r24
    1b86:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1b88:	8f ee       	ldi	r24, 0xEF	; 239
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	2f ee       	ldi	r18, 0xEF	; 239
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	f9 01       	movw	r30, r18
    1b92:	20 81       	ld	r18, Z
    1b94:	2f 73       	andi	r18, 0x3F	; 63
    1b96:	fc 01       	movw	r30, r24
    1b98:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1b9a:	8e ee       	ldi	r24, 0xEE	; 238
    1b9c:	90 e0       	ldi	r25, 0x00	; 0
    1b9e:	fc 01       	movw	r30, r24
    1ba0:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1ba2:	19 82       	std	Y+1, r1	; 0x01
            break;
    1ba4:	15 c0       	rjmp	.+42     	; 0x1bd0 <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	9c 81       	ldd	r25, Y+4	; 0x04
    1baa:	2a 81       	ldd	r18, Y+2	; 0x02
    1bac:	fc 01       	movw	r30, r24
    1bae:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1bb0:	8f ee       	ldi	r24, 0xEF	; 239
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	2f ee       	ldi	r18, 0xEF	; 239
    1bb6:	30 e0       	ldi	r19, 0x00	; 0
    1bb8:	f9 01       	movw	r30, r18
    1bba:	20 81       	ld	r18, Z
    1bbc:	2f 73       	andi	r18, 0x3F	; 63
    1bbe:	fc 01       	movw	r30, r24
    1bc0:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1bc2:	8e ee       	ldi	r24, 0xEE	; 238
    1bc4:	90 e0       	ldi	r25, 0x00	; 0
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1bca:	82 e0       	ldi	r24, 0x02	; 2
    1bcc:	89 83       	std	Y+1, r24	; 0x01
            break;
    1bce:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1bd0:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bd2:	0f 90       	pop	r0
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	df 91       	pop	r29
    1bdc:	cf 91       	pop	r28
    1bde:	08 95       	ret

00001be0 <__low>:
{
	return (__x1 & ( 1 << __x2));
}

static __inline uint8_t __low(uint16_t __x)
{
    1be0:	cf 93       	push	r28
    1be2:	df 93       	push	r29
    1be4:	00 d0       	rcall	.+0      	; 0x1be6 <__low+0x6>
    1be6:	cd b7       	in	r28, 0x3d	; 61
    1be8:	de b7       	in	r29, 0x3e	; 62
    1bea:	9a 83       	std	Y+2, r25	; 0x02
    1bec:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) ((__x) & 0xFF);
    1bee:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	df 91       	pop	r29
    1bf6:	cf 91       	pop	r28
    1bf8:	08 95       	ret

00001bfa <__high>:

static __inline uint8_t __high(uint16_t __x)
{
    1bfa:	cf 93       	push	r28
    1bfc:	df 93       	push	r29
    1bfe:	00 d0       	rcall	.+0      	; 0x1c00 <__high+0x6>
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    1c04:	9a 83       	std	Y+2, r25	; 0x02
    1c06:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) (((__x)>>8) & 0xFF);
    1c08:	89 81       	ldd	r24, Y+1	; 0x01
    1c0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c0c:	89 2f       	mov	r24, r25
    1c0e:	99 27       	eor	r25, r25
}
    1c10:	0f 90       	pop	r0
    1c12:	0f 90       	pop	r0
    1c14:	df 91       	pop	r29
    1c16:	cf 91       	pop	r28
    1c18:	08 95       	ret

00001c1a <cj125_readSignature>:
#include "cj125.h"
#include "cj125_registers.h"
#include "../helpers.h"

uint8_t cj125_readSignature (void)
{	
    1c1a:	cf 93       	push	r28
    1c1c:	df 93       	push	r29
    1c1e:	00 d0       	rcall	.+0      	; 0x1c20 <cj125_readSignature+0x6>
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	uint16_t reg;
	
	reg = spi_read_write(CJ125_IDENT_REG_REQUEST);
    1c24:	80 e0       	ldi	r24, 0x00	; 0
    1c26:	98 e4       	ldi	r25, 0x48	; 72
    1c28:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <spi_read_write>
    1c2c:	9a 83       	std	Y+2, r25	; 0x02
    1c2e:	89 83       	std	Y+1, r24	; 0x01
	
	if (high(reg) == 0x28 || high(reg) == 0x2e)
    1c30:	89 81       	ldd	r24, Y+1	; 0x01
    1c32:	9a 81       	ldd	r25, Y+2	; 0x02
    1c34:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__high>
    1c38:	88 32       	cpi	r24, 0x28	; 40
    1c3a:	31 f0       	breq	.+12     	; 0x1c48 <cj125_readSignature+0x2e>
    1c3c:	89 81       	ldd	r24, Y+1	; 0x01
    1c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c40:	0e 94 fd 0d 	call	0x1bfa	; 0x1bfa <__high>
    1c44:	8e 32       	cpi	r24, 0x2E	; 46
    1c46:	29 f4       	brne	.+10     	; 0x1c52 <cj125_readSignature+0x38>
	{
		return low(reg);
    1c48:	89 81       	ldd	r24, Y+1	; 0x01
    1c4a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c4c:	0e 94 f0 0d 	call	0x1be0	; 0x1be0 <__low>
    1c50:	01 c0       	rjmp	.+2      	; 0x1c54 <cj125_readSignature+0x3a>
	}
	
	return 0x00;	
    1c52:	80 e0       	ldi	r24, 0x00	; 0
}
    1c54:	0f 90       	pop	r0
    1c56:	0f 90       	pop	r0
    1c58:	df 91       	pop	r29
    1c5a:	cf 91       	pop	r28
    1c5c:	08 95       	ret

00001c5e <cj125_readStatus>:

tcj125_status cj125_readStatus (void)
{
    1c5e:	cf 93       	push	r28
    1c60:	df 93       	push	r29
    1c62:	00 d0       	rcall	.+0      	; 0x1c64 <cj125_readStatus+0x6>
    1c64:	cd b7       	in	r28, 0x3d	; 61
    1c66:	de b7       	in	r29, 0x3e	; 62
	uint16_t statusReg = 0;
    1c68:	1a 82       	std	Y+2, r1	; 0x02
    1c6a:	19 82       	std	Y+1, r1	; 0x01
	
	statusReg = spi_read_write(CJ125_DIAG_REG_REQUEST);
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	98 e7       	ldi	r25, 0x78	; 120
    1c70:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <spi_read_write>
    1c74:	9a 83       	std	Y+2, r25	; 0x02
    1c76:	89 83       	std	Y+1, r24	; 0x01
	
	switch(statusReg)
    1c78:	89 81       	ldd	r24, Y+1	; 0x01
    1c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1c7c:	8f 37       	cpi	r24, 0x7F	; 127
    1c7e:	28 e2       	ldi	r18, 0x28	; 40
    1c80:	92 07       	cpc	r25, r18
    1c82:	61 f0       	breq	.+24     	; 0x1c9c <cj125_readStatus+0x3e>
    1c84:	8f 3f       	cpi	r24, 0xFF	; 255
    1c86:	28 e2       	ldi	r18, 0x28	; 40
    1c88:	92 07       	cpc	r25, r18
    1c8a:	21 f0       	breq	.+8      	; 0x1c94 <cj125_readStatus+0x36>
    1c8c:	85 35       	cpi	r24, 0x55	; 85
    1c8e:	98 42       	sbci	r25, 0x28	; 40
    1c90:	19 f0       	breq	.+6      	; 0x1c98 <cj125_readStatus+0x3a>
    1c92:	06 c0       	rjmp	.+12     	; 0x1ca0 <cj125_readStatus+0x42>
	{
		case CJ125_DIAG_REG_STATUS_OK:
		return STATUS_OKAY;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	05 c0       	rjmp	.+10     	; 0x1ca2 <cj125_readStatus+0x44>
		break;
			
		case CJ125_DIAG_REG_STATUS_NOPOWER:
		return STATUS_E_NOPOWER;
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	03 c0       	rjmp	.+6      	; 0x1ca2 <cj125_readStatus+0x44>
		break;
			
		case CJ125_DIAG_REG_STATUS_NOSENSOR:
		return STATUS_E_NOSENSOR;
    1c9c:	83 e0       	ldi	r24, 0x03	; 3
    1c9e:	01 c0       	rjmp	.+2      	; 0x1ca2 <cj125_readStatus+0x44>
		break;
			
		default:
		return STATUS_ERROR;
    1ca0:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
}
    1ca2:	0f 90       	pop	r0
    1ca4:	0f 90       	pop	r0
    1ca6:	df 91       	pop	r29
    1ca8:	cf 91       	pop	r28
    1caa:	08 95       	ret

00001cac <cj125_set_calibration_mode>:

void cj125_set_calibration_mode (void)
{
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	00 d0       	rcall	.+0      	; 0x1cb2 <cj125_set_calibration_mode+0x6>
    1cb2:	cd b7       	in	r28, 0x3d	; 61
    1cb4:	de b7       	in	r29, 0x3e	; 62
	uint16_t retVal = 0;
    1cb6:	1a 82       	std	Y+2, r1	; 0x02
    1cb8:	19 82       	std	Y+1, r1	; 0x01
	
	retVal = spi_read_write(CJ125_INIT_REG1_MODE_CALIBRATE);
    1cba:	8d e9       	ldi	r24, 0x9D	; 157
    1cbc:	96 e5       	ldi	r25, 0x56	; 86
    1cbe:	0e 94 a0 0f 	call	0x1f40	; 0x1f40 <spi_read_write>
    1cc2:	9a 83       	std	Y+2, r25	; 0x02
    1cc4:	89 83       	std	Y+1, r24	; 0x01
}
    1cc6:	00 00       	nop
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret

00001cd2 <__adc2voltage_millis>:
{
	return ((float) __v * 5UL / 1024UL );
}

static __inline uint16_t __adc2voltage_millis(uint16_t __v)
{
    1cd2:	cf 93       	push	r28
    1cd4:	df 93       	push	r29
    1cd6:	00 d0       	rcall	.+0      	; 0x1cd8 <__adc2voltage_millis+0x6>
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	9a 83       	std	Y+2, r25	; 0x02
    1cde:	89 83       	std	Y+1, r24	; 0x01
	return ((uint16_t) __v * 5000UL / 1024UL );
    1ce0:	89 81       	ldd	r24, Y+1	; 0x01
    1ce2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ce4:	9c 01       	movw	r18, r24
    1ce6:	40 e0       	ldi	r20, 0x00	; 0
    1ce8:	50 e0       	ldi	r21, 0x00	; 0
    1cea:	88 e8       	ldi	r24, 0x88	; 136
    1cec:	93 e1       	ldi	r25, 0x13	; 19
    1cee:	dc 01       	movw	r26, r24
    1cf0:	0e 94 d8 11 	call	0x23b0	; 0x23b0 <__muluhisi3>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	cb 01       	movw	r24, r22
    1cf8:	07 2e       	mov	r0, r23
    1cfa:	7a e0       	ldi	r23, 0x0A	; 10
    1cfc:	b6 95       	lsr	r27
    1cfe:	a7 95       	ror	r26
    1d00:	97 95       	ror	r25
    1d02:	87 95       	ror	r24
    1d04:	7a 95       	dec	r23
    1d06:	d1 f7       	brne	.-12     	; 0x1cfc <__adc2voltage_millis+0x2a>
    1d08:	70 2d       	mov	r23, r0
}
    1d0a:	0f 90       	pop	r0
    1d0c:	0f 90       	pop	r0
    1d0e:	df 91       	pop	r29
    1d10:	cf 91       	pop	r28
    1d12:	08 95       	ret

00001d14 <main>:
extern tSensor sensor1;
extern tBoard board;
extern volatile uint16_t counter;

int main(void)
{
    1d14:	cf 93       	push	r28
    1d16:	df 93       	push	r29
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	60 97       	sbiw	r28, 0x10	; 16
    1d1e:	0f b6       	in	r0, 0x3f	; 63
    1d20:	f8 94       	cli
    1d22:	de bf       	out	0x3e, r29	; 62
    1d24:	0f be       	out	0x3f, r0	; 63
    1d26:	cd bf       	out	0x3d, r28	; 61
	uint8_t signature;
	tcj125_status status;
	
	init_gpio_stuff();
    1d28:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <init_gpio_stuff>
	adc_init();
    1d2c:	0e 94 68 00 	call	0xd0	; 0xd0 <adc_init>
	spi_init();
    1d30:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <spi_init>
	can_init(1);
    1d34:	81 e0       	ldi	r24, 0x01	; 1
    1d36:	0e 94 0a 02 	call	0x414	; 0x414 <can_init>
	-> 2.0B Active - Handles both 11 and 29 bit ID Messages
	*/
	
	st_cmd_t message;
	
	message.id.ext = 0x180;
    1d3a:	80 e8       	ldi	r24, 0x80	; 128
    1d3c:	91 e0       	ldi	r25, 0x01	; 1
    1d3e:	a0 e0       	ldi	r26, 0x00	; 0
    1d40:	b0 e0       	ldi	r27, 0x00	; 0
    1d42:	8f 83       	std	Y+7, r24	; 0x07
    1d44:	98 87       	std	Y+8, r25	; 0x08
    1d46:	a9 87       	std	Y+9, r26	; 0x09
    1d48:	ba 87       	std	Y+10, r27	; 0x0a
	// message.ctrl.ide = 0;			// standard CAN frame type (2.0A)
	
	message.ctrl.ide = 1;				// we are using extended ID, check can_lib.c:118
    1d4a:	81 e0       	ldi	r24, 0x01	; 1
    1d4c:	88 8b       	std	Y+16, r24	; 0x10
	message.ctrl.rtr = 0;				// this message object is not requesting a remote node to transmit data back
    1d4e:	1f 86       	std	Y+15, r1	; 0x0f
	message.dlc = 1;
    1d50:	81 e0       	ldi	r24, 0x01	; 1
    1d52:	8b 87       	std	Y+11, r24	; 0x0b
	message.cmd = CMD_TX_DATA;
    1d54:	82 e0       	ldi	r24, 0x02	; 2
    1d56:	8e 83       	std	Y+6, r24	; 0x06
	// message.pt_data = 0x01;
	
	
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1d58:	00 00       	nop
    1d5a:	ce 01       	movw	r24, r28
    1d5c:	05 96       	adiw	r24, 0x05	; 5
    1d5e:	0e 94 27 02 	call	0x44e	; 0x44e <can_cmd>
    1d62:	88 23       	and	r24, r24
    1d64:	d1 f7       	brne	.-12     	; 0x1d5a <main+0x46>
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    1d66:	00 00       	nop
    1d68:	ce 01       	movw	r24, r28
    1d6a:	05 96       	adiw	r24, 0x05	; 5
    1d6c:	0e 94 bd 0c 	call	0x197a	; 0x197a <can_get_status>
    1d70:	81 30       	cpi	r24, 0x01	; 1
    1d72:	d1 f3       	breq	.-12     	; 0x1d68 <main+0x54>
	
	
	board.vBatt = adc2voltage_millis(adc_read_battery())*5;
    1d74:	0e 94 1b 01 	call	0x236	; 0x236 <adc_read_battery>
    1d78:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__adc2voltage_millis>
    1d7c:	9c 01       	movw	r18, r24
    1d7e:	c9 01       	movw	r24, r18
    1d80:	88 0f       	add	r24, r24
    1d82:	99 1f       	adc	r25, r25
    1d84:	88 0f       	add	r24, r24
    1d86:	99 1f       	adc	r25, r25
    1d88:	82 0f       	add	r24, r18
    1d8a:	93 1f       	adc	r25, r19
    1d8c:	90 93 0b 01 	sts	0x010B, r25	; 0x80010b <board+0x1>
    1d90:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <board>
	board.vRef = adc2voltage_millis(adc_read_reference());
    1d94:	0e 94 10 01 	call	0x220	; 0x220 <adc_read_reference>
    1d98:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__adc2voltage_millis>
    1d9c:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <board+0x3>
    1da0:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <board+0x2>
	
	signature = cj125_readSignature();
    1da4:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <cj125_readSignature>
    1da8:	8a 83       	std	Y+2, r24	; 0x02
	
	while (status != STATUS_OKAY)
    1daa:	03 c0       	rjmp	.+6      	; 0x1db2 <main+0x9e>
	{
		status = cj125_readStatus();
    1dac:	0e 94 2f 0e 	call	0x1c5e	; 0x1c5e <cj125_readStatus>
    1db0:	89 83       	std	Y+1, r24	; 0x01
	board.vBatt = adc2voltage_millis(adc_read_battery())*5;
	board.vRef = adc2voltage_millis(adc_read_reference());
	
	signature = cj125_readSignature();
	
	while (status != STATUS_OKAY)
    1db2:	89 81       	ldd	r24, Y+1	; 0x01
    1db4:	81 30       	cpi	r24, 0x01	; 1
    1db6:	d1 f7       	brne	.-12     	; 0x1dac <main+0x98>
	{
		status = cj125_readStatus();
	}
		
	cj125_set_calibration_mode();
    1db8:	0e 94 56 0e 	call	0x1cac	; 0x1cac <cj125_set_calibration_mode>
	
	sensor1.Ua_ref = adc2voltage_millis(adc_read_UA());
    1dbc:	0e 94 fa 00 	call	0x1f4	; 0x1f4 <adc_read_UA>
    1dc0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__adc2voltage_millis>
    1dc4:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1dc8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	sensor1.Ur_ref = adc2voltage_millis(adc_read_UR());
    1dcc:	0e 94 05 01 	call	0x20a	; 0x20a <adc_read_UR>
    1dd0:	0e 94 69 0e 	call	0x1cd2	; 0x1cd2 <__adc2voltage_millis>
    1dd4:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
    1dd8:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
	
	calculate_ip();
    1ddc:	0e 94 21 0f 	call	0x1e42	; 0x1e42 <calculate_ip>
	
	int i = 10;
    1de0:	8a e0       	ldi	r24, 0x0A	; 10
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9c 83       	std	Y+4, r25	; 0x04
    1de6:	8b 83       	std	Y+3, r24	; 0x03
	
    /* Replace with your application code */
    while (1) 
    {
    }
    1de8:	ff cf       	rjmp	.-2      	; 0x1de8 <main+0xd4>

00001dea <init_gpio_stuff>:
}


void init_gpio_stuff (void)
{
    1dea:	cf 93       	push	r28
    1dec:	df 93       	push	r29
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
	// init LED2 (pb5) and LED2 (pb6)
	// led1 is power
	DDRB |= (1 << PB5)|(1 << PB6);
    1df2:	84 e2       	ldi	r24, 0x24	; 36
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	24 e2       	ldi	r18, 0x24	; 36
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	f9 01       	movw	r30, r18
    1dfc:	20 81       	ld	r18, Z
    1dfe:	20 66       	ori	r18, 0x60	; 96
    1e00:	fc 01       	movw	r30, r24
    1e02:	20 83       	st	Z, r18
	// switch them on
	PORTB |= (1 << PB5)|(1 << PB6);
    1e04:	85 e2       	ldi	r24, 0x25	; 37
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	25 e2       	ldi	r18, 0x25	; 37
    1e0a:	30 e0       	ldi	r19, 0x00	; 0
    1e0c:	f9 01       	movw	r30, r18
    1e0e:	20 81       	ld	r18, Z
    1e10:	20 66       	ori	r18, 0x60	; 96
    1e12:	fc 01       	movw	r30, r24
    1e14:	20 83       	st	Z, r18
	
	// pc7 is output:
	DDRC |= (1 << PC7);
    1e16:	87 e2       	ldi	r24, 0x27	; 39
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	27 e2       	ldi	r18, 0x27	; 39
    1e1c:	30 e0       	ldi	r19, 0x00	; 0
    1e1e:	f9 01       	movw	r30, r18
    1e20:	20 81       	ld	r18, Z
    1e22:	20 68       	ori	r18, 0x80	; 128
    1e24:	fc 01       	movw	r30, r24
    1e26:	20 83       	st	Z, r18
	// bring them high:
	PORTC |= (1 << PC7);
    1e28:	88 e2       	ldi	r24, 0x28	; 40
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	28 e2       	ldi	r18, 0x28	; 40
    1e2e:	30 e0       	ldi	r19, 0x00	; 0
    1e30:	f9 01       	movw	r30, r18
    1e32:	20 81       	ld	r18, Z
    1e34:	20 68       	ori	r18, 0x80	; 128
    1e36:	fc 01       	movw	r30, r24
    1e38:	20 83       	st	Z, r18
    1e3a:	00 00       	nop
    1e3c:	df 91       	pop	r29
    1e3e:	cf 91       	pop	r28
    1e40:	08 95       	ret

00001e42 <calculate_ip>:
uint16_t lambda_values[] = {650, 700, 750, 800, 822, 850, 900, 950, 970, 990, 1003, 1010, 1050, 1100, 1132, 1179, 1429, 1701, 1990, 2434, 3413, 5391, 7506, 10119};

tSensor sensor1;

void calculate_ip (void)
{
    1e42:	cf 93       	push	r28
    1e44:	df 93       	push	r29
    1e46:	cd b7       	in	r28, 0x3d	; 61
    1e48:	de b7       	in	r29, 0x3e	; 62
	sensor1.Ip = (((int16_t)sensor1.Ua - (int16_t)sensor1.Ua_ref) / (SENSOR_SHUNT * 8) * 1000);
    1e4a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__DATA_REGION_ORIGIN__+0x4>
    1e4e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__DATA_REGION_ORIGIN__+0x5>
    1e52:	9c 01       	movw	r18, r24
    1e54:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e58:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e5c:	a9 01       	movw	r20, r18
    1e5e:	48 1b       	sub	r20, r24
    1e60:	59 0b       	sbc	r21, r25
    1e62:	ca 01       	movw	r24, r20
    1e64:	09 2e       	mov	r0, r25
    1e66:	00 0c       	add	r0, r0
    1e68:	aa 0b       	sbc	r26, r26
    1e6a:	bb 0b       	sbc	r27, r27
    1e6c:	bc 01       	movw	r22, r24
    1e6e:	cd 01       	movw	r24, r26
    1e70:	0e 94 b7 10 	call	0x216e	; 0x216e <__floatsisf>
    1e74:	dc 01       	movw	r26, r24
    1e76:	cb 01       	movw	r24, r22
    1e78:	2a e9       	ldi	r18, 0x9A	; 154
    1e7a:	39 e9       	ldi	r19, 0x99	; 153
    1e7c:	47 ef       	ldi	r20, 0xF7	; 247
    1e7e:	53 e4       	ldi	r21, 0x43	; 67
    1e80:	bc 01       	movw	r22, r24
    1e82:	cd 01       	movw	r24, r26
    1e84:	0e 94 0d 10 	call	0x201a	; 0x201a <__divsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	20 e0       	ldi	r18, 0x00	; 0
    1e8e:	30 e0       	ldi	r19, 0x00	; 0
    1e90:	4a e7       	ldi	r20, 0x7A	; 122
    1e92:	54 e4       	ldi	r21, 0x44	; 68
    1e94:	bc 01       	movw	r22, r24
    1e96:	cd 01       	movw	r24, r26
    1e98:	0e 94 43 11 	call	0x2286	; 0x2286 <__mulsf3>
    1e9c:	dc 01       	movw	r26, r24
    1e9e:	cb 01       	movw	r24, r22
    1ea0:	bc 01       	movw	r22, r24
    1ea2:	cd 01       	movw	r24, r26
    1ea4:	0e 94 7f 10 	call	0x20fe	; 0x20fe <__fixsfsi>
    1ea8:	dc 01       	movw	r26, r24
    1eaa:	cb 01       	movw	r24, r22
    1eac:	90 93 09 01 	sts	0x0109, r25	; 0x800109 <__DATA_REGION_ORIGIN__+0x9>
    1eb0:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__DATA_REGION_ORIGIN__+0x8>
}
    1eb4:	00 00       	nop
    1eb6:	df 91       	pop	r29
    1eb8:	cf 91       	pop	r28
    1eba:	08 95       	ret

00001ebc <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
    1ebc:	cf 93       	push	r28
    1ebe:	df 93       	push	r29
    1ec0:	00 d0       	rcall	.+0      	; 0x1ec2 <__make_u16t+0x6>
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
    1ec6:	89 83       	std	Y+1, r24	; 0x01
    1ec8:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
    1eca:	89 81       	ldd	r24, Y+1	; 0x01
    1ecc:	88 2f       	mov	r24, r24
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	38 2f       	mov	r19, r24
    1ed2:	22 27       	eor	r18, r18
    1ed4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed6:	88 2f       	mov	r24, r24
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	82 2b       	or	r24, r18
    1edc:	93 2b       	or	r25, r19
}
    1ede:	0f 90       	pop	r0
    1ee0:	0f 90       	pop	r0
    1ee2:	df 91       	pop	r29
    1ee4:	cf 91       	pop	r28
    1ee6:	08 95       	ret

00001ee8 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
	// mosi (pb1) and sck (pb7) are outputs
	DDRB |= (1 << PB1)|(1 << PB7);
    1ef0:	84 e2       	ldi	r24, 0x24	; 36
    1ef2:	90 e0       	ldi	r25, 0x00	; 0
    1ef4:	24 e2       	ldi	r18, 0x24	; 36
    1ef6:	30 e0       	ldi	r19, 0x00	; 0
    1ef8:	f9 01       	movw	r30, r18
    1efa:	20 81       	ld	r18, Z
    1efc:	22 68       	ori	r18, 0x82	; 130
    1efe:	fc 01       	movw	r30, r24
    1f00:	20 83       	st	Z, r18
	// spi ss is output too
	DDRD |= (1 << PD5);
    1f02:	8a e2       	ldi	r24, 0x2A	; 42
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	2a e2       	ldi	r18, 0x2A	; 42
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	f9 01       	movw	r30, r18
    1f0c:	20 81       	ld	r18, Z
    1f0e:	20 62       	ori	r18, 0x20	; 32
    1f10:	fc 01       	movw	r30, r24
    1f12:	20 83       	st	Z, r18
	// bring them high
	SPI_SS_DESELECT;
    1f14:	8b e2       	ldi	r24, 0x2B	; 43
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	2b e2       	ldi	r18, 0x2B	; 43
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	f9 01       	movw	r30, r18
    1f1e:	20 81       	ld	r18, Z
    1f20:	20 62       	ori	r18, 0x20	; 32
    1f22:	fc 01       	movw	r30, r24
    1f24:	20 83       	st	Z, r18
	
	// enable spi, 2MHz (div 8), master, mode1 (cpol 0, cpha 1)
	SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPI2X)|(1 << SPR0);
    1f26:	8c e4       	ldi	r24, 0x4C	; 76
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	2c e4       	ldi	r18, 0x4C	; 76
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	f9 01       	movw	r30, r18
    1f30:	20 81       	ld	r18, Z
    1f32:	25 65       	ori	r18, 0x55	; 85
    1f34:	fc 01       	movw	r30, r24
    1f36:	20 83       	st	Z, r18
}
    1f38:	00 00       	nop
    1f3a:	df 91       	pop	r29
    1f3c:	cf 91       	pop	r28
    1f3e:	08 95       	ret

00001f40 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
    1f40:	cf 93       	push	r28
    1f42:	df 93       	push	r29
    1f44:	00 d0       	rcall	.+0      	; 0x1f46 <spi_read_write+0x6>
    1f46:	00 d0       	rcall	.+0      	; 0x1f48 <spi_read_write+0x8>
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	9c 83       	std	Y+4, r25	; 0x04
    1f4e:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
    1f50:	8b e2       	ldi	r24, 0x2B	; 43
    1f52:	90 e0       	ldi	r25, 0x00	; 0
    1f54:	2b e2       	ldi	r18, 0x2B	; 43
    1f56:	30 e0       	ldi	r19, 0x00	; 0
    1f58:	f9 01       	movw	r30, r18
    1f5a:	20 81       	ld	r18, Z
    1f5c:	2f 7d       	andi	r18, 0xDF	; 223
    1f5e:	fc 01       	movw	r30, r24
    1f60:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
    1f62:	8e e4       	ldi	r24, 0x4E	; 78
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	2b 81       	ldd	r18, Y+3	; 0x03
    1f68:	3c 81       	ldd	r19, Y+4	; 0x04
    1f6a:	23 2f       	mov	r18, r19
    1f6c:	33 27       	eor	r19, r19
    1f6e:	fc 01       	movw	r30, r24
    1f70:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1f72:	00 00       	nop
    1f74:	8d e4       	ldi	r24, 0x4D	; 77
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	fc 01       	movw	r30, r24
    1f7a:	80 81       	ld	r24, Z
    1f7c:	88 23       	and	r24, r24
    1f7e:	d4 f7       	brge	.-12     	; 0x1f74 <spi_read_write+0x34>
	byte1 = SPDR;
    1f80:	8e e4       	ldi	r24, 0x4E	; 78
    1f82:	90 e0       	ldi	r25, 0x00	; 0
    1f84:	fc 01       	movw	r30, r24
    1f86:	80 81       	ld	r24, Z
    1f88:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
    1f8a:	89 81       	ldd	r24, Y+1	; 0x01
    1f8c:	8f 73       	andi	r24, 0x3F	; 63
    1f8e:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
    1f90:	8e e4       	ldi	r24, 0x4E	; 78
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	2b 81       	ldd	r18, Y+3	; 0x03
    1f96:	fc 01       	movw	r30, r24
    1f98:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    1f9a:	00 00       	nop
    1f9c:	8d e4       	ldi	r24, 0x4D	; 77
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	fc 01       	movw	r30, r24
    1fa2:	80 81       	ld	r24, Z
    1fa4:	88 23       	and	r24, r24
    1fa6:	d4 f7       	brge	.-12     	; 0x1f9c <spi_read_write+0x5c>
	byte2 = SPDR;
    1fa8:	8e e4       	ldi	r24, 0x4E	; 78
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	fc 01       	movw	r30, r24
    1fae:	80 81       	ld	r24, Z
    1fb0:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
    1fb2:	8b e2       	ldi	r24, 0x2B	; 43
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	2b e2       	ldi	r18, 0x2B	; 43
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	f9 01       	movw	r30, r18
    1fbc:	20 81       	ld	r18, Z
    1fbe:	20 62       	ori	r18, 0x20	; 32
    1fc0:	fc 01       	movw	r30, r24
    1fc2:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
    1fc4:	6a 81       	ldd	r22, Y+2	; 0x02
    1fc6:	89 81       	ldd	r24, Y+1	; 0x01
    1fc8:	0e 94 5e 0f 	call	0x1ebc	; 0x1ebc <__make_u16t>
    1fcc:	0f 90       	pop	r0
    1fce:	0f 90       	pop	r0
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	df 91       	pop	r29
    1fd6:	cf 91       	pop	r28
    1fd8:	08 95       	ret

00001fda <__vector_15>:
	
	
}

ISR (TIMER0_COMPA_vect)
{
    1fda:	1f 92       	push	r1
    1fdc:	0f 92       	push	r0
    1fde:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1fe2:	0f 92       	push	r0
    1fe4:	11 24       	eor	r1, r1
    1fe6:	8f 93       	push	r24
    1fe8:	9f 93       	push	r25
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
	counter++;
    1ff2:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <counter>
    1ff6:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <counter+0x1>
    1ffa:	01 96       	adiw	r24, 0x01	; 1
    1ffc:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <counter+0x1>
    2000:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <counter>
    2004:	00 00       	nop
    2006:	df 91       	pop	r29
    2008:	cf 91       	pop	r28
    200a:	9f 91       	pop	r25
    200c:	8f 91       	pop	r24
    200e:	0f 90       	pop	r0
    2010:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    2014:	0f 90       	pop	r0
    2016:	1f 90       	pop	r1
    2018:	18 95       	reti

0000201a <__divsf3>:
    201a:	0e 94 21 10 	call	0x2042	; 0x2042 <__divsf3x>
    201e:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_round>
    2022:	0e 94 02 11 	call	0x2204	; 0x2204 <__fp_pscB>
    2026:	58 f0       	brcs	.+22     	; 0x203e <__divsf3+0x24>
    2028:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__fp_pscA>
    202c:	40 f0       	brcs	.+16     	; 0x203e <__divsf3+0x24>
    202e:	29 f4       	brne	.+10     	; 0x203a <__divsf3+0x20>
    2030:	5f 3f       	cpi	r21, 0xFF	; 255
    2032:	29 f0       	breq	.+10     	; 0x203e <__divsf3+0x24>
    2034:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_inf>
    2038:	51 11       	cpse	r21, r1
    203a:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__fp_szero>
    203e:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__fp_nan>

00002042 <__divsf3x>:
    2042:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_split3>
    2046:	68 f3       	brcs	.-38     	; 0x2022 <__divsf3+0x8>

00002048 <__divsf3_pse>:
    2048:	99 23       	and	r25, r25
    204a:	b1 f3       	breq	.-20     	; 0x2038 <__divsf3+0x1e>
    204c:	55 23       	and	r21, r21
    204e:	91 f3       	breq	.-28     	; 0x2034 <__divsf3+0x1a>
    2050:	95 1b       	sub	r25, r21
    2052:	55 0b       	sbc	r21, r21
    2054:	bb 27       	eor	r27, r27
    2056:	aa 27       	eor	r26, r26
    2058:	62 17       	cp	r22, r18
    205a:	73 07       	cpc	r23, r19
    205c:	84 07       	cpc	r24, r20
    205e:	38 f0       	brcs	.+14     	; 0x206e <__divsf3_pse+0x26>
    2060:	9f 5f       	subi	r25, 0xFF	; 255
    2062:	5f 4f       	sbci	r21, 0xFF	; 255
    2064:	22 0f       	add	r18, r18
    2066:	33 1f       	adc	r19, r19
    2068:	44 1f       	adc	r20, r20
    206a:	aa 1f       	adc	r26, r26
    206c:	a9 f3       	breq	.-22     	; 0x2058 <__divsf3_pse+0x10>
    206e:	35 d0       	rcall	.+106    	; 0x20da <__divsf3_pse+0x92>
    2070:	0e 2e       	mov	r0, r30
    2072:	3a f0       	brmi	.+14     	; 0x2082 <__divsf3_pse+0x3a>
    2074:	e0 e8       	ldi	r30, 0x80	; 128
    2076:	32 d0       	rcall	.+100    	; 0x20dc <__divsf3_pse+0x94>
    2078:	91 50       	subi	r25, 0x01	; 1
    207a:	50 40       	sbci	r21, 0x00	; 0
    207c:	e6 95       	lsr	r30
    207e:	00 1c       	adc	r0, r0
    2080:	ca f7       	brpl	.-14     	; 0x2074 <__divsf3_pse+0x2c>
    2082:	2b d0       	rcall	.+86     	; 0x20da <__divsf3_pse+0x92>
    2084:	fe 2f       	mov	r31, r30
    2086:	29 d0       	rcall	.+82     	; 0x20da <__divsf3_pse+0x92>
    2088:	66 0f       	add	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	bb 1f       	adc	r27, r27
    2090:	26 17       	cp	r18, r22
    2092:	37 07       	cpc	r19, r23
    2094:	48 07       	cpc	r20, r24
    2096:	ab 07       	cpc	r26, r27
    2098:	b0 e8       	ldi	r27, 0x80	; 128
    209a:	09 f0       	breq	.+2      	; 0x209e <__divsf3_pse+0x56>
    209c:	bb 0b       	sbc	r27, r27
    209e:	80 2d       	mov	r24, r0
    20a0:	bf 01       	movw	r22, r30
    20a2:	ff 27       	eor	r31, r31
    20a4:	93 58       	subi	r25, 0x83	; 131
    20a6:	5f 4f       	sbci	r21, 0xFF	; 255
    20a8:	3a f0       	brmi	.+14     	; 0x20b8 <__divsf3_pse+0x70>
    20aa:	9e 3f       	cpi	r25, 0xFE	; 254
    20ac:	51 05       	cpc	r21, r1
    20ae:	78 f0       	brcs	.+30     	; 0x20ce <__divsf3_pse+0x86>
    20b0:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_inf>
    20b4:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__fp_szero>
    20b8:	5f 3f       	cpi	r21, 0xFF	; 255
    20ba:	e4 f3       	brlt	.-8      	; 0x20b4 <__divsf3_pse+0x6c>
    20bc:	98 3e       	cpi	r25, 0xE8	; 232
    20be:	d4 f3       	brlt	.-12     	; 0x20b4 <__divsf3_pse+0x6c>
    20c0:	86 95       	lsr	r24
    20c2:	77 95       	ror	r23
    20c4:	67 95       	ror	r22
    20c6:	b7 95       	ror	r27
    20c8:	f7 95       	ror	r31
    20ca:	9f 5f       	subi	r25, 0xFF	; 255
    20cc:	c9 f7       	brne	.-14     	; 0x20c0 <__divsf3_pse+0x78>
    20ce:	88 0f       	add	r24, r24
    20d0:	91 1d       	adc	r25, r1
    20d2:	96 95       	lsr	r25
    20d4:	87 95       	ror	r24
    20d6:	97 f9       	bld	r25, 7
    20d8:	08 95       	ret
    20da:	e1 e0       	ldi	r30, 0x01	; 1
    20dc:	66 0f       	add	r22, r22
    20de:	77 1f       	adc	r23, r23
    20e0:	88 1f       	adc	r24, r24
    20e2:	bb 1f       	adc	r27, r27
    20e4:	62 17       	cp	r22, r18
    20e6:	73 07       	cpc	r23, r19
    20e8:	84 07       	cpc	r24, r20
    20ea:	ba 07       	cpc	r27, r26
    20ec:	20 f0       	brcs	.+8      	; 0x20f6 <__divsf3_pse+0xae>
    20ee:	62 1b       	sub	r22, r18
    20f0:	73 0b       	sbc	r23, r19
    20f2:	84 0b       	sbc	r24, r20
    20f4:	ba 0b       	sbc	r27, r26
    20f6:	ee 1f       	adc	r30, r30
    20f8:	88 f7       	brcc	.-30     	; 0x20dc <__divsf3_pse+0x94>
    20fa:	e0 95       	com	r30
    20fc:	08 95       	ret

000020fe <__fixsfsi>:
    20fe:	0e 94 86 10 	call	0x210c	; 0x210c <__fixunssfsi>
    2102:	68 94       	set
    2104:	b1 11       	cpse	r27, r1
    2106:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__fp_szero>
    210a:	08 95       	ret

0000210c <__fixunssfsi>:
    210c:	0e 94 22 11 	call	0x2244	; 0x2244 <__fp_splitA>
    2110:	88 f0       	brcs	.+34     	; 0x2134 <__fixunssfsi+0x28>
    2112:	9f 57       	subi	r25, 0x7F	; 127
    2114:	98 f0       	brcs	.+38     	; 0x213c <__fixunssfsi+0x30>
    2116:	b9 2f       	mov	r27, r25
    2118:	99 27       	eor	r25, r25
    211a:	b7 51       	subi	r27, 0x17	; 23
    211c:	b0 f0       	brcs	.+44     	; 0x214a <__fixunssfsi+0x3e>
    211e:	e1 f0       	breq	.+56     	; 0x2158 <__fixunssfsi+0x4c>
    2120:	66 0f       	add	r22, r22
    2122:	77 1f       	adc	r23, r23
    2124:	88 1f       	adc	r24, r24
    2126:	99 1f       	adc	r25, r25
    2128:	1a f0       	brmi	.+6      	; 0x2130 <__fixunssfsi+0x24>
    212a:	ba 95       	dec	r27
    212c:	c9 f7       	brne	.-14     	; 0x2120 <__fixunssfsi+0x14>
    212e:	14 c0       	rjmp	.+40     	; 0x2158 <__fixunssfsi+0x4c>
    2130:	b1 30       	cpi	r27, 0x01	; 1
    2132:	91 f0       	breq	.+36     	; 0x2158 <__fixunssfsi+0x4c>
    2134:	0e 94 3c 11 	call	0x2278	; 0x2278 <__fp_zero>
    2138:	b1 e0       	ldi	r27, 0x01	; 1
    213a:	08 95       	ret
    213c:	0c 94 3c 11 	jmp	0x2278	; 0x2278 <__fp_zero>
    2140:	67 2f       	mov	r22, r23
    2142:	78 2f       	mov	r23, r24
    2144:	88 27       	eor	r24, r24
    2146:	b8 5f       	subi	r27, 0xF8	; 248
    2148:	39 f0       	breq	.+14     	; 0x2158 <__fixunssfsi+0x4c>
    214a:	b9 3f       	cpi	r27, 0xF9	; 249
    214c:	cc f3       	brlt	.-14     	; 0x2140 <__fixunssfsi+0x34>
    214e:	86 95       	lsr	r24
    2150:	77 95       	ror	r23
    2152:	67 95       	ror	r22
    2154:	b3 95       	inc	r27
    2156:	d9 f7       	brne	.-10     	; 0x214e <__fixunssfsi+0x42>
    2158:	3e f4       	brtc	.+14     	; 0x2168 <__fixunssfsi+0x5c>
    215a:	90 95       	com	r25
    215c:	80 95       	com	r24
    215e:	70 95       	com	r23
    2160:	61 95       	neg	r22
    2162:	7f 4f       	sbci	r23, 0xFF	; 255
    2164:	8f 4f       	sbci	r24, 0xFF	; 255
    2166:	9f 4f       	sbci	r25, 0xFF	; 255
    2168:	08 95       	ret

0000216a <__floatunsisf>:
    216a:	e8 94       	clt
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <__floatsisf+0x12>

0000216e <__floatsisf>:
    216e:	97 fb       	bst	r25, 7
    2170:	3e f4       	brtc	.+14     	; 0x2180 <__floatsisf+0x12>
    2172:	90 95       	com	r25
    2174:	80 95       	com	r24
    2176:	70 95       	com	r23
    2178:	61 95       	neg	r22
    217a:	7f 4f       	sbci	r23, 0xFF	; 255
    217c:	8f 4f       	sbci	r24, 0xFF	; 255
    217e:	9f 4f       	sbci	r25, 0xFF	; 255
    2180:	99 23       	and	r25, r25
    2182:	a9 f0       	breq	.+42     	; 0x21ae <__floatsisf+0x40>
    2184:	f9 2f       	mov	r31, r25
    2186:	96 e9       	ldi	r25, 0x96	; 150
    2188:	bb 27       	eor	r27, r27
    218a:	93 95       	inc	r25
    218c:	f6 95       	lsr	r31
    218e:	87 95       	ror	r24
    2190:	77 95       	ror	r23
    2192:	67 95       	ror	r22
    2194:	b7 95       	ror	r27
    2196:	f1 11       	cpse	r31, r1
    2198:	f8 cf       	rjmp	.-16     	; 0x218a <__floatsisf+0x1c>
    219a:	fa f4       	brpl	.+62     	; 0x21da <__floatsisf+0x6c>
    219c:	bb 0f       	add	r27, r27
    219e:	11 f4       	brne	.+4      	; 0x21a4 <__floatsisf+0x36>
    21a0:	60 ff       	sbrs	r22, 0
    21a2:	1b c0       	rjmp	.+54     	; 0x21da <__floatsisf+0x6c>
    21a4:	6f 5f       	subi	r22, 0xFF	; 255
    21a6:	7f 4f       	sbci	r23, 0xFF	; 255
    21a8:	8f 4f       	sbci	r24, 0xFF	; 255
    21aa:	9f 4f       	sbci	r25, 0xFF	; 255
    21ac:	16 c0       	rjmp	.+44     	; 0x21da <__floatsisf+0x6c>
    21ae:	88 23       	and	r24, r24
    21b0:	11 f0       	breq	.+4      	; 0x21b6 <__floatsisf+0x48>
    21b2:	96 e9       	ldi	r25, 0x96	; 150
    21b4:	11 c0       	rjmp	.+34     	; 0x21d8 <__floatsisf+0x6a>
    21b6:	77 23       	and	r23, r23
    21b8:	21 f0       	breq	.+8      	; 0x21c2 <__floatsisf+0x54>
    21ba:	9e e8       	ldi	r25, 0x8E	; 142
    21bc:	87 2f       	mov	r24, r23
    21be:	76 2f       	mov	r23, r22
    21c0:	05 c0       	rjmp	.+10     	; 0x21cc <__floatsisf+0x5e>
    21c2:	66 23       	and	r22, r22
    21c4:	71 f0       	breq	.+28     	; 0x21e2 <__floatsisf+0x74>
    21c6:	96 e8       	ldi	r25, 0x86	; 134
    21c8:	86 2f       	mov	r24, r22
    21ca:	70 e0       	ldi	r23, 0x00	; 0
    21cc:	60 e0       	ldi	r22, 0x00	; 0
    21ce:	2a f0       	brmi	.+10     	; 0x21da <__floatsisf+0x6c>
    21d0:	9a 95       	dec	r25
    21d2:	66 0f       	add	r22, r22
    21d4:	77 1f       	adc	r23, r23
    21d6:	88 1f       	adc	r24, r24
    21d8:	da f7       	brpl	.-10     	; 0x21d0 <__floatsisf+0x62>
    21da:	88 0f       	add	r24, r24
    21dc:	96 95       	lsr	r25
    21de:	87 95       	ror	r24
    21e0:	97 f9       	bld	r25, 7
    21e2:	08 95       	ret

000021e4 <__fp_inf>:
    21e4:	97 f9       	bld	r25, 7
    21e6:	9f 67       	ori	r25, 0x7F	; 127
    21e8:	80 e8       	ldi	r24, 0x80	; 128
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    21ec:	60 e0       	ldi	r22, 0x00	; 0
    21ee:	08 95       	ret

000021f0 <__fp_nan>:
    21f0:	9f ef       	ldi	r25, 0xFF	; 255
    21f2:	80 ec       	ldi	r24, 0xC0	; 192
    21f4:	08 95       	ret

000021f6 <__fp_pscA>:
    21f6:	00 24       	eor	r0, r0
    21f8:	0a 94       	dec	r0
    21fa:	16 16       	cp	r1, r22
    21fc:	17 06       	cpc	r1, r23
    21fe:	18 06       	cpc	r1, r24
    2200:	09 06       	cpc	r0, r25
    2202:	08 95       	ret

00002204 <__fp_pscB>:
    2204:	00 24       	eor	r0, r0
    2206:	0a 94       	dec	r0
    2208:	12 16       	cp	r1, r18
    220a:	13 06       	cpc	r1, r19
    220c:	14 06       	cpc	r1, r20
    220e:	05 06       	cpc	r0, r21
    2210:	08 95       	ret

00002212 <__fp_round>:
    2212:	09 2e       	mov	r0, r25
    2214:	03 94       	inc	r0
    2216:	00 0c       	add	r0, r0
    2218:	11 f4       	brne	.+4      	; 0x221e <__fp_round+0xc>
    221a:	88 23       	and	r24, r24
    221c:	52 f0       	brmi	.+20     	; 0x2232 <__fp_round+0x20>
    221e:	bb 0f       	add	r27, r27
    2220:	40 f4       	brcc	.+16     	; 0x2232 <__fp_round+0x20>
    2222:	bf 2b       	or	r27, r31
    2224:	11 f4       	brne	.+4      	; 0x222a <__fp_round+0x18>
    2226:	60 ff       	sbrs	r22, 0
    2228:	04 c0       	rjmp	.+8      	; 0x2232 <__fp_round+0x20>
    222a:	6f 5f       	subi	r22, 0xFF	; 255
    222c:	7f 4f       	sbci	r23, 0xFF	; 255
    222e:	8f 4f       	sbci	r24, 0xFF	; 255
    2230:	9f 4f       	sbci	r25, 0xFF	; 255
    2232:	08 95       	ret

00002234 <__fp_split3>:
    2234:	57 fd       	sbrc	r21, 7
    2236:	90 58       	subi	r25, 0x80	; 128
    2238:	44 0f       	add	r20, r20
    223a:	55 1f       	adc	r21, r21
    223c:	59 f0       	breq	.+22     	; 0x2254 <__fp_splitA+0x10>
    223e:	5f 3f       	cpi	r21, 0xFF	; 255
    2240:	71 f0       	breq	.+28     	; 0x225e <__fp_splitA+0x1a>
    2242:	47 95       	ror	r20

00002244 <__fp_splitA>:
    2244:	88 0f       	add	r24, r24
    2246:	97 fb       	bst	r25, 7
    2248:	99 1f       	adc	r25, r25
    224a:	61 f0       	breq	.+24     	; 0x2264 <__fp_splitA+0x20>
    224c:	9f 3f       	cpi	r25, 0xFF	; 255
    224e:	79 f0       	breq	.+30     	; 0x226e <__fp_splitA+0x2a>
    2250:	87 95       	ror	r24
    2252:	08 95       	ret
    2254:	12 16       	cp	r1, r18
    2256:	13 06       	cpc	r1, r19
    2258:	14 06       	cpc	r1, r20
    225a:	55 1f       	adc	r21, r21
    225c:	f2 cf       	rjmp	.-28     	; 0x2242 <__fp_split3+0xe>
    225e:	46 95       	lsr	r20
    2260:	f1 df       	rcall	.-30     	; 0x2244 <__fp_splitA>
    2262:	08 c0       	rjmp	.+16     	; 0x2274 <__fp_splitA+0x30>
    2264:	16 16       	cp	r1, r22
    2266:	17 06       	cpc	r1, r23
    2268:	18 06       	cpc	r1, r24
    226a:	99 1f       	adc	r25, r25
    226c:	f1 cf       	rjmp	.-30     	; 0x2250 <__fp_splitA+0xc>
    226e:	86 95       	lsr	r24
    2270:	71 05       	cpc	r23, r1
    2272:	61 05       	cpc	r22, r1
    2274:	08 94       	sec
    2276:	08 95       	ret

00002278 <__fp_zero>:
    2278:	e8 94       	clt

0000227a <__fp_szero>:
    227a:	bb 27       	eor	r27, r27
    227c:	66 27       	eor	r22, r22
    227e:	77 27       	eor	r23, r23
    2280:	cb 01       	movw	r24, r22
    2282:	97 f9       	bld	r25, 7
    2284:	08 95       	ret

00002286 <__mulsf3>:
    2286:	0e 94 56 11 	call	0x22ac	; 0x22ac <__mulsf3x>
    228a:	0c 94 09 11 	jmp	0x2212	; 0x2212 <__fp_round>
    228e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <__fp_pscA>
    2292:	38 f0       	brcs	.+14     	; 0x22a2 <__mulsf3+0x1c>
    2294:	0e 94 02 11 	call	0x2204	; 0x2204 <__fp_pscB>
    2298:	20 f0       	brcs	.+8      	; 0x22a2 <__mulsf3+0x1c>
    229a:	95 23       	and	r25, r21
    229c:	11 f0       	breq	.+4      	; 0x22a2 <__mulsf3+0x1c>
    229e:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_inf>
    22a2:	0c 94 f8 10 	jmp	0x21f0	; 0x21f0 <__fp_nan>
    22a6:	11 24       	eor	r1, r1
    22a8:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__fp_szero>

000022ac <__mulsf3x>:
    22ac:	0e 94 1a 11 	call	0x2234	; 0x2234 <__fp_split3>
    22b0:	70 f3       	brcs	.-36     	; 0x228e <__mulsf3+0x8>

000022b2 <__mulsf3_pse>:
    22b2:	95 9f       	mul	r25, r21
    22b4:	c1 f3       	breq	.-16     	; 0x22a6 <__mulsf3+0x20>
    22b6:	95 0f       	add	r25, r21
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	55 1f       	adc	r21, r21
    22bc:	62 9f       	mul	r22, r18
    22be:	f0 01       	movw	r30, r0
    22c0:	72 9f       	mul	r23, r18
    22c2:	bb 27       	eor	r27, r27
    22c4:	f0 0d       	add	r31, r0
    22c6:	b1 1d       	adc	r27, r1
    22c8:	63 9f       	mul	r22, r19
    22ca:	aa 27       	eor	r26, r26
    22cc:	f0 0d       	add	r31, r0
    22ce:	b1 1d       	adc	r27, r1
    22d0:	aa 1f       	adc	r26, r26
    22d2:	64 9f       	mul	r22, r20
    22d4:	66 27       	eor	r22, r22
    22d6:	b0 0d       	add	r27, r0
    22d8:	a1 1d       	adc	r26, r1
    22da:	66 1f       	adc	r22, r22
    22dc:	82 9f       	mul	r24, r18
    22de:	22 27       	eor	r18, r18
    22e0:	b0 0d       	add	r27, r0
    22e2:	a1 1d       	adc	r26, r1
    22e4:	62 1f       	adc	r22, r18
    22e6:	73 9f       	mul	r23, r19
    22e8:	b0 0d       	add	r27, r0
    22ea:	a1 1d       	adc	r26, r1
    22ec:	62 1f       	adc	r22, r18
    22ee:	83 9f       	mul	r24, r19
    22f0:	a0 0d       	add	r26, r0
    22f2:	61 1d       	adc	r22, r1
    22f4:	22 1f       	adc	r18, r18
    22f6:	74 9f       	mul	r23, r20
    22f8:	33 27       	eor	r19, r19
    22fa:	a0 0d       	add	r26, r0
    22fc:	61 1d       	adc	r22, r1
    22fe:	23 1f       	adc	r18, r19
    2300:	84 9f       	mul	r24, r20
    2302:	60 0d       	add	r22, r0
    2304:	21 1d       	adc	r18, r1
    2306:	82 2f       	mov	r24, r18
    2308:	76 2f       	mov	r23, r22
    230a:	6a 2f       	mov	r22, r26
    230c:	11 24       	eor	r1, r1
    230e:	9f 57       	subi	r25, 0x7F	; 127
    2310:	50 40       	sbci	r21, 0x00	; 0
    2312:	9a f0       	brmi	.+38     	; 0x233a <__mulsf3_pse+0x88>
    2314:	f1 f0       	breq	.+60     	; 0x2352 <__mulsf3_pse+0xa0>
    2316:	88 23       	and	r24, r24
    2318:	4a f0       	brmi	.+18     	; 0x232c <__mulsf3_pse+0x7a>
    231a:	ee 0f       	add	r30, r30
    231c:	ff 1f       	adc	r31, r31
    231e:	bb 1f       	adc	r27, r27
    2320:	66 1f       	adc	r22, r22
    2322:	77 1f       	adc	r23, r23
    2324:	88 1f       	adc	r24, r24
    2326:	91 50       	subi	r25, 0x01	; 1
    2328:	50 40       	sbci	r21, 0x00	; 0
    232a:	a9 f7       	brne	.-22     	; 0x2316 <__mulsf3_pse+0x64>
    232c:	9e 3f       	cpi	r25, 0xFE	; 254
    232e:	51 05       	cpc	r21, r1
    2330:	80 f0       	brcs	.+32     	; 0x2352 <__mulsf3_pse+0xa0>
    2332:	0c 94 f2 10 	jmp	0x21e4	; 0x21e4 <__fp_inf>
    2336:	0c 94 3d 11 	jmp	0x227a	; 0x227a <__fp_szero>
    233a:	5f 3f       	cpi	r21, 0xFF	; 255
    233c:	e4 f3       	brlt	.-8      	; 0x2336 <__mulsf3_pse+0x84>
    233e:	98 3e       	cpi	r25, 0xE8	; 232
    2340:	d4 f3       	brlt	.-12     	; 0x2336 <__mulsf3_pse+0x84>
    2342:	86 95       	lsr	r24
    2344:	77 95       	ror	r23
    2346:	67 95       	ror	r22
    2348:	b7 95       	ror	r27
    234a:	f7 95       	ror	r31
    234c:	e7 95       	ror	r30
    234e:	9f 5f       	subi	r25, 0xFF	; 255
    2350:	c1 f7       	brne	.-16     	; 0x2342 <__mulsf3_pse+0x90>
    2352:	fe 2b       	or	r31, r30
    2354:	88 0f       	add	r24, r24
    2356:	91 1d       	adc	r25, r1
    2358:	96 95       	lsr	r25
    235a:	87 95       	ror	r24
    235c:	97 f9       	bld	r25, 7
    235e:	08 95       	ret

00002360 <__udivmodsi4>:
    2360:	a1 e2       	ldi	r26, 0x21	; 33
    2362:	1a 2e       	mov	r1, r26
    2364:	aa 1b       	sub	r26, r26
    2366:	bb 1b       	sub	r27, r27
    2368:	fd 01       	movw	r30, r26
    236a:	0d c0       	rjmp	.+26     	; 0x2386 <__udivmodsi4_ep>

0000236c <__udivmodsi4_loop>:
    236c:	aa 1f       	adc	r26, r26
    236e:	bb 1f       	adc	r27, r27
    2370:	ee 1f       	adc	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	a2 17       	cp	r26, r18
    2376:	b3 07       	cpc	r27, r19
    2378:	e4 07       	cpc	r30, r20
    237a:	f5 07       	cpc	r31, r21
    237c:	20 f0       	brcs	.+8      	; 0x2386 <__udivmodsi4_ep>
    237e:	a2 1b       	sub	r26, r18
    2380:	b3 0b       	sbc	r27, r19
    2382:	e4 0b       	sbc	r30, r20
    2384:	f5 0b       	sbc	r31, r21

00002386 <__udivmodsi4_ep>:
    2386:	66 1f       	adc	r22, r22
    2388:	77 1f       	adc	r23, r23
    238a:	88 1f       	adc	r24, r24
    238c:	99 1f       	adc	r25, r25
    238e:	1a 94       	dec	r1
    2390:	69 f7       	brne	.-38     	; 0x236c <__udivmodsi4_loop>
    2392:	60 95       	com	r22
    2394:	70 95       	com	r23
    2396:	80 95       	com	r24
    2398:	90 95       	com	r25
    239a:	9b 01       	movw	r18, r22
    239c:	ac 01       	movw	r20, r24
    239e:	bd 01       	movw	r22, r26
    23a0:	cf 01       	movw	r24, r30
    23a2:	08 95       	ret

000023a4 <__tablejump2__>:
    23a4:	ee 0f       	add	r30, r30
    23a6:	ff 1f       	adc	r31, r31
    23a8:	05 90       	lpm	r0, Z+
    23aa:	f4 91       	lpm	r31, Z
    23ac:	e0 2d       	mov	r30, r0
    23ae:	09 94       	ijmp

000023b0 <__muluhisi3>:
    23b0:	0e 94 e3 11 	call	0x23c6	; 0x23c6 <__umulhisi3>
    23b4:	a5 9f       	mul	r26, r21
    23b6:	90 0d       	add	r25, r0
    23b8:	b4 9f       	mul	r27, r20
    23ba:	90 0d       	add	r25, r0
    23bc:	a4 9f       	mul	r26, r20
    23be:	80 0d       	add	r24, r0
    23c0:	91 1d       	adc	r25, r1
    23c2:	11 24       	eor	r1, r1
    23c4:	08 95       	ret

000023c6 <__umulhisi3>:
    23c6:	a2 9f       	mul	r26, r18
    23c8:	b0 01       	movw	r22, r0
    23ca:	b3 9f       	mul	r27, r19
    23cc:	c0 01       	movw	r24, r0
    23ce:	a3 9f       	mul	r26, r19
    23d0:	70 0d       	add	r23, r0
    23d2:	81 1d       	adc	r24, r1
    23d4:	11 24       	eor	r1, r1
    23d6:	91 1d       	adc	r25, r1
    23d8:	b2 9f       	mul	r27, r18
    23da:	70 0d       	add	r23, r0
    23dc:	81 1d       	adc	r24, r1
    23de:	11 24       	eor	r1, r1
    23e0:	91 1d       	adc	r25, r1
    23e2:	08 95       	ret

000023e4 <_exit>:
    23e4:	f8 94       	cli

000023e6 <__stop_program>:
    23e6:	ff cf       	rjmp	.-2      	; 0x23e6 <__stop_program>
