
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00003f4a  00003fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003f4a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  008001b0  008001b0  0000408e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000408e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000040c0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000318  00000000  00000000  00004100  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d1d  00000000  00000000  00004418  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001570  00000000  00000000  00007135  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002385  00000000  00000000  000086a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009f8  00000000  00000000  0000aa2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001126  00000000  00000000  0000b424  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001426  00000000  00000000  0000c54a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000268  00000000  00000000  0000d970  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 8f 1c 	jmp	0x391e	; 0x391e <__vector_15>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 59 0e 	jmp	0x1cb2	; 0x1cb2 <__vector_18>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	0f 03       	fmul	r16, r23
      7e:	05 04       	cpc	r0, r5
      80:	ef 04       	cpc	r14, r15
      82:	bd 05       	cpc	r27, r13
      84:	40 06       	cpc	r4, r16
      86:	d0 06       	cpc	r13, r16
      88:	6a 07       	cpc	r22, r26
      8a:	90 08       	sbc	r9, r0
      8c:	c3 09       	sbc	r28, r3
      8e:	00 0b       	sbc	r16, r16
      90:	b6 0b       	sbc	r27, r22

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	ea e4       	ldi	r30, 0x4A	; 74
      a6:	ff e3       	ldi	r31, 0x3F	; 63
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 3b       	cpi	r26, 0xB0	; 176
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 eb       	ldi	r26, 0xB0	; 176
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a7 3f       	cpi	r26, 0xF7	; 247
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 58 12 	call	0x24b0	; 0x24b0 <main>
      c8:	0c 94 a3 1f 	jmp	0x3f46	; 0x3f46 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <update_reference>:
	v_reference = adc_readAvg (3, 3);
	
	v_reference_offset = 251 - (int16_t) v_reference;
	
	return v_reference;
}
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	63 e0       	ldi	r22, 0x03	; 3
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
      e0:	9c 01       	movw	r18, r24
      e2:	8b ef       	ldi	r24, 0xFB	; 251
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	82 1b       	sub	r24, r18
      e8:	93 0b       	sbc	r25, r19
      ea:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__data_end+0x1>
      ee:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
      f2:	00 00       	nop
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	08 95       	ret

000000fa <adc_init>:
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	8b e7       	ldi	r24, 0x7B	; 123
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2b e7       	ldi	r18, 0x7B	; 123
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	20 62       	ori	r18, 0x20	; 32
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	8c e7       	ldi	r24, 0x7C	; 124
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	20 e4       	ldi	r18, 0x40	; 64
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
     11e:	8a e7       	ldi	r24, 0x7A	; 122
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	2a e7       	ldi	r18, 0x7A	; 122
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	f9 01       	movw	r30, r18
     128:	20 81       	ld	r18, Z
     12a:	23 68       	ori	r18, 0x83	; 131
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
     130:	8a e7       	ldi	r24, 0x7A	; 122
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2a e7       	ldi	r18, 0x7A	; 122
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 64       	ori	r18, 0x40	; 64
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
     142:	00 00       	nop
     144:	8a e7       	ldi	r24, 0x7A	; 122
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	80 74       	andi	r24, 0x40	; 64
     152:	99 27       	eor	r25, r25
     154:	89 2b       	or	r24, r25
     156:	b1 f7       	brne	.-20     	; 0x144 <adc_init+0x4a>
     158:	88 e7       	ldi	r24, 0x78	; 120
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
     162:	00 00       	nop
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <adc_read>:
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	1f 92       	push	r1
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	8c e7       	ldi	r24, 0x7C	; 124
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	2c e7       	ldi	r18, 0x7C	; 124
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	32 2f       	mov	r19, r18
     184:	30 7f       	andi	r19, 0xF0	; 240
     186:	29 81       	ldd	r18, Y+1	; 0x01
     188:	2f 70       	andi	r18, 0x0F	; 15
     18a:	23 2b       	or	r18, r19
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
     190:	8a e7       	ldi	r24, 0x7A	; 122
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2a e7       	ldi	r18, 0x7A	; 122
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	20 64       	ori	r18, 0x40	; 64
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
     1a2:	00 00       	nop
     1a4:	8a e7       	ldi	r24, 0x7A	; 122
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	88 2f       	mov	r24, r24
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	80 74       	andi	r24, 0x40	; 64
     1b2:	99 27       	eor	r25, r25
     1b4:	89 2b       	or	r24, r25
     1b6:	b1 f7       	brne	.-20     	; 0x1a4 <adc_read+0x3a>
     1b8:	88 e7       	ldi	r24, 0x78	; 120
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	0f 90       	pop	r0
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <adc_readAvg>:
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	27 97       	sbiw	r28, 0x07	; 7
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	8e 83       	std	Y+6, r24	; 0x06
     1e0:	6f 83       	std	Y+7, r22	; 0x07
     1e2:	19 82       	std	Y+1, r1	; 0x01
     1e4:	1a 82       	std	Y+2, r1	; 0x02
     1e6:	1b 82       	std	Y+3, r1	; 0x03
     1e8:	1c 82       	std	Y+4, r1	; 0x04
     1ea:	1d 82       	std	Y+5, r1	; 0x05
     1ec:	15 c0       	rjmp	.+42     	; 0x218 <adc_readAvg+0x4e>
     1ee:	8e 81       	ldd	r24, Y+6	; 0x06
     1f0:	0e 94 b5 00 	call	0x16a	; 0x16a <adc_read>
     1f4:	cc 01       	movw	r24, r24
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	3a 81       	ldd	r19, Y+2	; 0x02
     1fe:	4b 81       	ldd	r20, Y+3	; 0x03
     200:	5c 81       	ldd	r21, Y+4	; 0x04
     202:	82 0f       	add	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	a4 1f       	adc	r26, r20
     208:	b5 1f       	adc	r27, r21
     20a:	89 83       	std	Y+1, r24	; 0x01
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	ab 83       	std	Y+3, r26	; 0x03
     210:	bc 83       	std	Y+4, r27	; 0x04
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	8d 83       	std	Y+5, r24	; 0x05
     218:	9d 81       	ldd	r25, Y+5	; 0x05
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 17       	cp	r25, r24
     21e:	38 f3       	brcs	.-50     	; 0x1ee <adc_readAvg+0x24>
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	ab 81       	ldd	r26, Y+3	; 0x03
     230:	bc 81       	ldd	r27, Y+4	; 0x04
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__udivmodsi4>
     23a:	da 01       	movw	r26, r20
     23c:	c9 01       	movw	r24, r18
     23e:	27 96       	adiw	r28, 0x07	; 7
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <adc_read_UA>:
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
     25c:	65 e0       	ldi	r22, 0x05	; 5
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     264:	9c 01       	movw	r18, r24
     266:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     26a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <adc_read_UR>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <adc_read_UR+0x6>
     27e:	00 d0       	rcall	.+0      	; 0x280 <adc_read_UR+0x8>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
     288:	65 e0       	ldi	r22, 0x05	; 5
     28a:	89 e0       	ldi	r24, 0x09	; 9
     28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	9c 83       	std	Y+4, r25	; 0x04
     29a:	8b 83       	std	Y+3, r24	; 0x03
     29c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     2a0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	9c 83       	std	Y+4, r25	; 0x04
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	9c 81       	ldd	r25, Y+4	; 0x04
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <adc_read_battery>:



uint16_t adc_read_battery (void)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
	update_reference();
     2ca:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
	return (uint16_t)((int16_t)adc_readAvg (5, 5) + v_reference_offset);
     2ce:	65 e0       	ldi	r22, 0x05	; 5
     2d0:	85 e0       	ldi	r24, 0x05	; 5
     2d2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     2d6:	9c 01       	movw	r18, r24
     2d8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     2dc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     2e0:	82 0f       	add	r24, r18
     2e2:	93 1f       	adc	r25, r19
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <can_clear_all_mob+0x6>
     2f0:	1f 92       	push	r1
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	19 82       	std	Y+1, r1	; 0x01
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <can_clear_all_mob+0x4a>
     2fa:	8d ee       	ldi	r24, 0xED	; 237
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	22 95       	swap	r18
     302:	20 7f       	andi	r18, 0xF0	; 240
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
     308:	8e ee       	ldi	r24, 0xEE	; 238
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9b 83       	std	Y+3, r25	; 0x03
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	09 c0       	rjmp	.+18     	; 0x324 <can_clear_all_mob+0x3a>
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	9b 81       	ldd	r25, Y+3	; 0x03
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	9b 83       	std	Y+3, r25	; 0x03
     322:	8a 83       	std	Y+2, r24	; 0x02
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
     328:	88 3f       	cpi	r24, 0xF8	; 248
     32a:	91 05       	cpc	r25, r1
     32c:	90 f3       	brcs	.-28     	; 0x312 <can_clear_all_mob+0x28>
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	00 f3       	brcs	.-64     	; 0x2fa <can_clear_all_mob+0x10>
     33a:	00 00       	nop
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <can_get_mob_free>:
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <can_get_mob_free+0x6>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8d ee       	ldi	r24, 0xED	; 237
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	8a 83       	std	Y+2, r24	; 0x02
     35c:	19 82       	std	Y+1, r1	; 0x01
     35e:	1b c0       	rjmp	.+54     	; 0x396 <can_get_mob_free+0x4e>
     360:	8d ee       	ldi	r24, 0xED	; 237
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	29 81       	ldd	r18, Y+1	; 0x01
     366:	22 95       	swap	r18
     368:	20 7f       	andi	r18, 0xF0	; 240
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
     36e:	8f ee       	ldi	r24, 0xEF	; 239
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 7c       	andi	r24, 0xC0	; 192
     37c:	99 27       	eor	r25, r25
     37e:	89 2b       	or	r24, r25
     380:	39 f4       	brne	.+14     	; 0x390 <can_get_mob_free+0x48>
     382:	8d ee       	ldi	r24, 0xED	; 237
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	2a 81       	ldd	r18, Y+2	; 0x02
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <can_get_mob_free+0x60>
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	10 f3       	brcs	.-60     	; 0x360 <can_get_mob_free+0x18>
     39c:	8d ee       	ldi	r24, 0xED	; 237
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2a 81       	ldd	r18, Y+2	; 0x02
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <can_get_mob_status>:
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <can_get_mob_status+0x6>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	8f ee       	ldi	r24, 0xEF	; 239
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	80 7c       	andi	r24, 0xC0	; 192
     3ca:	99 27       	eor	r25, r25
     3cc:	89 2b       	or	r24, r25
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <can_get_mob_status+0x22>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	1c c0       	rjmp	.+56     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3d4:	8e ee       	ldi	r24, 0xEE	; 238
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	80 7e       	andi	r24, 0xE0	; 224
     3e2:	8a 83       	std	Y+2, r24	; 0x02
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	80 32       	cpi	r24, 0x20	; 32
     3e8:	31 f0       	breq	.+12     	; 0x3f6 <can_get_mob_status+0x44>
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	80 34       	cpi	r24, 0x40	; 64
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <can_get_mob_status+0x44>
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	80 3a       	cpi	r24, 0xA0	; 160
     3f4:	11 f4       	brne	.+4      	; 0x3fa <can_get_mob_status+0x48>
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	09 c0       	rjmp	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	8f 71       	andi	r24, 0x1F	; 31
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	88 23       	and	r24, r24
     404:	11 f0       	breq	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <can_get_data>:
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	00 d0       	rcall	.+0      	; 0x41c <can_get_data+0x6>
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	9b 83       	std	Y+3, r25	; 0x03
     424:	8a 83       	std	Y+2, r24	; 0x02
     426:	19 82       	std	Y+1, r1	; 0x01
     428:	10 c0       	rjmp	.+32     	; 0x44a <can_get_data+0x34>
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	2a ef       	ldi	r18, 0xFA	; 250
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	8f ee       	ldi	r24, 0xEF	; 239
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	99 27       	eor	r25, r25
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	14 f3       	brlt	.-60     	; 0x42a <can_get_data+0x14>
     466:	00 00       	nop
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     480:	88 ed       	ldi	r24, 0xD8	; 216
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
    Can_conf_bt();
     48a:	82 ee       	ldi	r24, 0xE2	; 226
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	26 e0       	ldi	r18, 0x06	; 6
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
     494:	83 ee       	ldi	r24, 0xE3	; 227
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	24 e0       	ldi	r18, 0x04	; 4
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	84 ee       	ldi	r24, 0xE4	; 228
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	23 e1       	ldi	r18, 0x13	; 19
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
    return 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	1f 92       	push	r1
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	0e 94 3a 02 	call	0x474	; 0x474 <can_fixed_baudrate>
     4c4:	88 23       	and	r24, r24
     4c6:	11 f4       	brne	.+4      	; 0x4cc <can_init+0x1a>
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	26 c0       	rjmp	.+76     	; 0x518 <can_init+0x66>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     4cc:	0e 94 75 01 	call	0x2ea	; 0x2ea <can_clear_all_mob>
	
	CANIE2 = (1 << IEMOB0);   			// Enable interrupts on mob1 for reception and transmission
     4d0:	8e ed       	ldi	r24, 0xDE	; 222
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	21 e0       	ldi	r18, 0x01	; 1
     4d6:	fc 01       	movw	r30, r24
     4d8:	20 83       	st	Z, r18
	CANGIE = (1 << ENIT)|(1 <<  ENRX);	// Enable interrupts on receive
     4da:	8b ed       	ldi	r24, 0xDB	; 219
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	20 ea       	ldi	r18, 0xA0	; 160
     4e0:	fc 01       	movw	r30, r24
     4e2:	20 83       	st	Z, r18
	
	CANIDM1 = 0x00;   	// Clear Mask, let all IDs pass    
     4e4:	87 ef       	ldi	r24, 0xF7	; 247
     4e6:	90 e0       	ldi	r25, 0x00	; 0
     4e8:	fc 01       	movw	r30, r24
     4ea:	10 82       	st	Z, r1
	CANIDM2 = 0x00; 	//  " "
     4ec:	86 ef       	ldi	r24, 0xF6	; 246
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	fc 01       	movw	r30, r24
     4f2:	10 82       	st	Z, r1
	CANIDM3 = 0x00; 	//  " "
     4f4:	85 ef       	ldi	r24, 0xF5	; 245
     4f6:	90 e0       	ldi	r25, 0x00	; 0
     4f8:	fc 01       	movw	r30, r24
     4fa:	10 82       	st	Z, r1
	CANIDM4 = 0x00; 	//  " "    	
     4fc:	84 ef       	ldi	r24, 0xF4	; 244
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	fc 01       	movw	r30, r24
     502:	10 82       	st	Z, r1
	
    Can_enable();                               // c.f. macro in "can_drv.h" 
     504:	88 ed       	ldi	r24, 0xD8	; 216
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	28 ed       	ldi	r18, 0xD8	; 216
     50a:	30 e0       	ldi	r19, 0x00	; 0
     50c:	f9 01       	movw	r30, r18
     50e:	20 81       	ld	r18, Z
     510:	22 60       	ori	r18, 0x02	; 2
     512:	fc 01       	movw	r30, r24
     514:	20 83       	st	Z, r18
    return (1);
     516:	81 e0       	ldi	r24, 0x01	; 1
}
     518:	0f 90       	pop	r0
     51a:	df 91       	pop	r29
     51c:	cf 91       	pop	r28
     51e:	08 95       	ret

00000520 <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     520:	cf 93       	push	r28
     522:	df 93       	push	r29
     524:	cd b7       	in	r28, 0x3d	; 61
     526:	de b7       	in	r29, 0x3e	; 62
     528:	2a 97       	sbiw	r28, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	9a 87       	std	Y+10, r25	; 0x0a
     536:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     538:	89 85       	ldd	r24, Y+9	; 0x09
     53a:	9a 85       	ldd	r25, Y+10	; 0x0a
     53c:	fc 01       	movw	r30, r24
     53e:	81 81       	ldd	r24, Z+1	; 0x01
     540:	8c 30       	cpi	r24, 0x0C	; 12
     542:	39 f5       	brne	.+78     	; 0x592 <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     544:	89 85       	ldd	r24, Y+9	; 0x09
     546:	9a 85       	ldd	r25, Y+10	; 0x0a
     548:	fc 01       	movw	r30, r24
     54a:	81 85       	ldd	r24, Z+9	; 0x09
     54c:	80 36       	cpi	r24, 0x60	; 96
     54e:	d9 f4       	brne	.+54     	; 0x586 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     550:	8d ee       	ldi	r24, 0xED	; 237
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	29 85       	ldd	r18, Y+9	; 0x09
     556:	3a 85       	ldd	r19, Y+10	; 0x0a
     558:	f9 01       	movw	r30, r18
     55a:	20 81       	ld	r18, Z
     55c:	22 95       	swap	r18
     55e:	20 7f       	andi	r18, 0xF0	; 240
     560:	fc 01       	movw	r30, r24
     562:	20 83       	st	Z, r18
      Can_mob_abort();
     564:	8f ee       	ldi	r24, 0xEF	; 239
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	2f ee       	ldi	r18, 0xEF	; 239
     56a:	30 e0       	ldi	r19, 0x00	; 0
     56c:	f9 01       	movw	r30, r18
     56e:	20 81       	ld	r18, Z
     570:	2f 73       	andi	r18, 0x3F	; 63
     572:	fc 01       	movw	r30, r24
     574:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     576:	8e ee       	ldi	r24, 0xEE	; 238
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	fc 01       	movw	r30, r24
     57c:	10 82       	st	Z, r1
      cmd->handle = 0;
     57e:	89 85       	ldd	r24, Y+9	; 0x09
     580:	9a 85       	ldd	r25, Y+10	; 0x0a
     582:	fc 01       	movw	r30, r24
     584:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     586:	89 85       	ldd	r24, Y+9	; 0x09
     588:	9a 85       	ldd	r25, Y+10	; 0x0a
     58a:	fc 01       	movw	r30, r24
     58c:	11 86       	std	Z+9, r1	; 0x09
     58e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__stack+0x1139>
  }
  else
  {
    mob_handle = can_get_mob_free();
     592:	0e 94 a4 01 	call	0x348	; 0x348 <can_get_mob_free>
     596:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     598:	8c 81       	ldd	r24, Y+4	; 0x04
     59a:	8f 3f       	cpi	r24, 0xFF	; 255
     59c:	11 f4       	brne	.+4      	; 0x5a2 <can_cmd+0x82>
     59e:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__stack+0x112b>
    {
      cmd->status = MOB_PENDING; 
     5a2:	89 85       	ldd	r24, Y+9	; 0x09
     5a4:	9a 85       	ldd	r25, Y+10	; 0x0a
     5a6:	20 e6       	ldi	r18, 0x60	; 96
     5a8:	fc 01       	movw	r30, r24
     5aa:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     5ac:	89 85       	ldd	r24, Y+9	; 0x09
     5ae:	9a 85       	ldd	r25, Y+10	; 0x0a
     5b0:	2c 81       	ldd	r18, Y+4	; 0x04
     5b2:	fc 01       	movw	r30, r24
     5b4:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     5b6:	8d ee       	ldi	r24, 0xED	; 237
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	2c 81       	ldd	r18, Y+4	; 0x04
     5bc:	22 95       	swap	r18
     5be:	20 7f       	andi	r18, 0xF0	; 240
     5c0:	fc 01       	movw	r30, r24
     5c2:	20 83       	st	Z, r18
      Can_clear_mob();
     5c4:	8e ee       	ldi	r24, 0xEE	; 238
     5c6:	90 e0       	ldi	r25, 0x00	; 0
     5c8:	9b 83       	std	Y+3, r25	; 0x03
     5ca:	8a 83       	std	Y+2, r24	; 0x02
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <can_cmd+0xc0>
     5ce:	8a 81       	ldd	r24, Y+2	; 0x02
     5d0:	9b 81       	ldd	r25, Y+3	; 0x03
     5d2:	fc 01       	movw	r30, r24
     5d4:	10 82       	st	Z, r1
     5d6:	8a 81       	ldd	r24, Y+2	; 0x02
     5d8:	9b 81       	ldd	r25, Y+3	; 0x03
     5da:	01 96       	adiw	r24, 0x01	; 1
     5dc:	9b 83       	std	Y+3, r25	; 0x03
     5de:	8a 83       	std	Y+2, r24	; 0x02
     5e0:	8a 81       	ldd	r24, Y+2	; 0x02
     5e2:	9b 81       	ldd	r25, Y+3	; 0x03
     5e4:	88 3f       	cpi	r24, 0xF8	; 248
     5e6:	91 05       	cpc	r25, r1
     5e8:	90 f3       	brcs	.-28     	; 0x5ce <can_cmd+0xae>
          
      switch (cmd->cmd)
     5ea:	89 85       	ldd	r24, Y+9	; 0x09
     5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ee:	fc 01       	movw	r30, r24
     5f0:	81 81       	ldd	r24, Z+1	; 0x01
     5f2:	88 2f       	mov	r24, r24
     5f4:	90 e0       	ldi	r25, 0x00	; 0
     5f6:	09 2e       	mov	r0, r25
     5f8:	00 0c       	add	r0, r0
     5fa:	aa 0b       	sbc	r26, r26
     5fc:	bb 0b       	sbc	r27, r27
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	50 e0       	ldi	r21, 0x00	; 0
     602:	2a e0       	ldi	r18, 0x0A	; 10
     604:	30 e0       	ldi	r19, 0x00	; 0
     606:	84 1b       	sub	r24, r20
     608:	95 0b       	sbc	r25, r21
     60a:	28 17       	cp	r18, r24
     60c:	39 07       	cpc	r19, r25
     60e:	10 f4       	brcc	.+4      	; 0x614 <can_cmd+0xf4>
     610:	0c 94 0f 0d 	jmp	0x1a1e	; 0x1a1e <__stack+0x111f>
     614:	82 5c       	subi	r24, 0xC2	; 194
     616:	9f 4f       	sbci	r25, 0xFF	; 255
     618:	fc 01       	movw	r30, r24
     61a:	0c 94 83 1f 	jmp	0x3f06	; 0x3f06 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     61e:	89 85       	ldd	r24, Y+9	; 0x09
     620:	9a 85       	ldd	r25, Y+10	; 0x0a
     622:	fc 01       	movw	r30, r24
     624:	83 85       	ldd	r24, Z+11	; 0x0b
     626:	88 23       	and	r24, r24
     628:	09 f4       	brne	.+2      	; 0x62c <can_cmd+0x10c>
     62a:	69 c0       	rjmp	.+210    	; 0x6fe <can_cmd+0x1de>
     62c:	83 ef       	ldi	r24, 0xF3	; 243
     62e:	90 e0       	ldi	r25, 0x00	; 0
     630:	29 85       	ldd	r18, Y+9	; 0x09
     632:	3a 85       	ldd	r19, Y+10	; 0x0a
     634:	2e 5f       	subi	r18, 0xFE	; 254
     636:	3f 4f       	sbci	r19, 0xFF	; 255
     638:	2d 5f       	subi	r18, 0xFD	; 253
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	f9 01       	movw	r30, r18
     63e:	20 81       	ld	r18, Z
     640:	42 2f       	mov	r20, r18
     642:	44 0f       	add	r20, r20
     644:	44 0f       	add	r20, r20
     646:	44 0f       	add	r20, r20
     648:	29 85       	ldd	r18, Y+9	; 0x09
     64a:	3a 85       	ldd	r19, Y+10	; 0x0a
     64c:	2e 5f       	subi	r18, 0xFE	; 254
     64e:	3f 4f       	sbci	r19, 0xFF	; 255
     650:	2e 5f       	subi	r18, 0xFE	; 254
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	f9 01       	movw	r30, r18
     656:	20 81       	ld	r18, Z
     658:	22 95       	swap	r18
     65a:	26 95       	lsr	r18
     65c:	27 70       	andi	r18, 0x07	; 7
     65e:	24 0f       	add	r18, r20
     660:	fc 01       	movw	r30, r24
     662:	20 83       	st	Z, r18
     664:	82 ef       	ldi	r24, 0xF2	; 242
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	29 85       	ldd	r18, Y+9	; 0x09
     66a:	3a 85       	ldd	r19, Y+10	; 0x0a
     66c:	2e 5f       	subi	r18, 0xFE	; 254
     66e:	3f 4f       	sbci	r19, 0xFF	; 255
     670:	2e 5f       	subi	r18, 0xFE	; 254
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	f9 01       	movw	r30, r18
     676:	20 81       	ld	r18, Z
     678:	42 2f       	mov	r20, r18
     67a:	44 0f       	add	r20, r20
     67c:	44 0f       	add	r20, r20
     67e:	44 0f       	add	r20, r20
     680:	29 85       	ldd	r18, Y+9	; 0x09
     682:	3a 85       	ldd	r19, Y+10	; 0x0a
     684:	2e 5f       	subi	r18, 0xFE	; 254
     686:	3f 4f       	sbci	r19, 0xFF	; 255
     688:	2f 5f       	subi	r18, 0xFF	; 255
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	22 95       	swap	r18
     692:	26 95       	lsr	r18
     694:	27 70       	andi	r18, 0x07	; 7
     696:	24 0f       	add	r18, r20
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	81 ef       	ldi	r24, 0xF1	; 241
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	29 85       	ldd	r18, Y+9	; 0x09
     6a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6a4:	2e 5f       	subi	r18, 0xFE	; 254
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	2f 5f       	subi	r18, 0xFF	; 255
     6aa:	3f 4f       	sbci	r19, 0xFF	; 255
     6ac:	f9 01       	movw	r30, r18
     6ae:	20 81       	ld	r18, Z
     6b0:	42 2f       	mov	r20, r18
     6b2:	44 0f       	add	r20, r20
     6b4:	44 0f       	add	r20, r20
     6b6:	44 0f       	add	r20, r20
     6b8:	29 85       	ldd	r18, Y+9	; 0x09
     6ba:	3a 85       	ldd	r19, Y+10	; 0x0a
     6bc:	2e 5f       	subi	r18, 0xFE	; 254
     6be:	3f 4f       	sbci	r19, 0xFF	; 255
     6c0:	f9 01       	movw	r30, r18
     6c2:	20 81       	ld	r18, Z
     6c4:	22 95       	swap	r18
     6c6:	26 95       	lsr	r18
     6c8:	27 70       	andi	r18, 0x07	; 7
     6ca:	24 0f       	add	r18, r20
     6cc:	fc 01       	movw	r30, r24
     6ce:	20 83       	st	Z, r18
     6d0:	80 ef       	ldi	r24, 0xF0	; 240
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	29 85       	ldd	r18, Y+9	; 0x09
     6d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d8:	2e 5f       	subi	r18, 0xFE	; 254
     6da:	3f 4f       	sbci	r19, 0xFF	; 255
     6dc:	f9 01       	movw	r30, r18
     6de:	20 81       	ld	r18, Z
     6e0:	22 0f       	add	r18, r18
     6e2:	22 0f       	add	r18, r18
     6e4:	22 0f       	add	r18, r18
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
     6ea:	8f ee       	ldi	r24, 0xEF	; 239
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	2f ee       	ldi	r18, 0xEF	; 239
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	20 61       	ori	r18, 0x10	; 16
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
     6fc:	30 c0       	rjmp	.+96     	; 0x75e <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     6fe:	83 ef       	ldi	r24, 0xF3	; 243
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	29 85       	ldd	r18, Y+9	; 0x09
     704:	3a 85       	ldd	r19, Y+10	; 0x0a
     706:	2e 5f       	subi	r18, 0xFE	; 254
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	f9 01       	movw	r30, r18
     710:	20 81       	ld	r18, Z
     712:	42 2f       	mov	r20, r18
     714:	42 95       	swap	r20
     716:	44 0f       	add	r20, r20
     718:	40 7e       	andi	r20, 0xE0	; 224
     71a:	29 85       	ldd	r18, Y+9	; 0x09
     71c:	3a 85       	ldd	r19, Y+10	; 0x0a
     71e:	2e 5f       	subi	r18, 0xFE	; 254
     720:	3f 4f       	sbci	r19, 0xFF	; 255
     722:	f9 01       	movw	r30, r18
     724:	20 81       	ld	r18, Z
     726:	26 95       	lsr	r18
     728:	26 95       	lsr	r18
     72a:	26 95       	lsr	r18
     72c:	24 0f       	add	r18, r20
     72e:	fc 01       	movw	r30, r24
     730:	20 83       	st	Z, r18
     732:	82 ef       	ldi	r24, 0xF2	; 242
     734:	90 e0       	ldi	r25, 0x00	; 0
     736:	29 85       	ldd	r18, Y+9	; 0x09
     738:	3a 85       	ldd	r19, Y+10	; 0x0a
     73a:	2e 5f       	subi	r18, 0xFE	; 254
     73c:	3f 4f       	sbci	r19, 0xFF	; 255
     73e:	f9 01       	movw	r30, r18
     740:	20 81       	ld	r18, Z
     742:	22 95       	swap	r18
     744:	22 0f       	add	r18, r18
     746:	20 7e       	andi	r18, 0xE0	; 224
     748:	fc 01       	movw	r30, r24
     74a:	20 83       	st	Z, r18
     74c:	8f ee       	ldi	r24, 0xEF	; 239
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	2f ee       	ldi	r18, 0xEF	; 239
     752:	30 e0       	ldi	r19, 0x00	; 0
     754:	f9 01       	movw	r30, r18
     756:	20 81       	ld	r18, Z
     758:	2f 7e       	andi	r18, 0xEF	; 239
     75a:	fc 01       	movw	r30, r24
     75c:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     75e:	19 82       	std	Y+1, r1	; 0x01
     760:	13 c0       	rjmp	.+38     	; 0x788 <can_cmd+0x268>
     762:	8a ef       	ldi	r24, 0xFA	; 250
     764:	90 e0       	ldi	r25, 0x00	; 0
     766:	29 85       	ldd	r18, Y+9	; 0x09
     768:	3a 85       	ldd	r19, Y+10	; 0x0a
     76a:	f9 01       	movw	r30, r18
     76c:	47 81       	ldd	r20, Z+7	; 0x07
     76e:	50 85       	ldd	r21, Z+8	; 0x08
     770:	29 81       	ldd	r18, Y+1	; 0x01
     772:	22 2f       	mov	r18, r18
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	24 0f       	add	r18, r20
     778:	35 1f       	adc	r19, r21
     77a:	f9 01       	movw	r30, r18
     77c:	20 81       	ld	r18, Z
     77e:	fc 01       	movw	r30, r24
     780:	20 83       	st	Z, r18
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	8f 5f       	subi	r24, 0xFF	; 255
     786:	89 83       	std	Y+1, r24	; 0x01
     788:	89 85       	ldd	r24, Y+9	; 0x09
     78a:	9a 85       	ldd	r25, Y+10	; 0x0a
     78c:	fc 01       	movw	r30, r24
     78e:	96 81       	ldd	r25, Z+6	; 0x06
     790:	89 81       	ldd	r24, Y+1	; 0x01
     792:	89 17       	cp	r24, r25
     794:	30 f3       	brcs	.-52     	; 0x762 <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     796:	89 85       	ldd	r24, Y+9	; 0x09
     798:	9a 85       	ldd	r25, Y+10	; 0x0a
     79a:	fc 01       	movw	r30, r24
     79c:	82 85       	ldd	r24, Z+10	; 0x0a
     79e:	88 23       	and	r24, r24
     7a0:	51 f0       	breq	.+20     	; 0x7b6 <can_cmd+0x296>
     7a2:	80 ef       	ldi	r24, 0xF0	; 240
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	20 ef       	ldi	r18, 0xF0	; 240
     7a8:	30 e0       	ldi	r19, 0x00	; 0
     7aa:	f9 01       	movw	r30, r18
     7ac:	20 81       	ld	r18, Z
     7ae:	24 60       	ori	r18, 0x04	; 4
     7b0:	fc 01       	movw	r30, r24
     7b2:	20 83       	st	Z, r18
     7b4:	09 c0       	rjmp	.+18     	; 0x7c8 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     7b6:	80 ef       	ldi	r24, 0xF0	; 240
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	20 ef       	ldi	r18, 0xF0	; 240
     7bc:	30 e0       	ldi	r19, 0x00	; 0
     7be:	f9 01       	movw	r30, r18
     7c0:	20 81       	ld	r18, Z
     7c2:	2b 7f       	andi	r18, 0xFB	; 251
     7c4:	fc 01       	movw	r30, r24
     7c6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     7c8:	8f ee       	ldi	r24, 0xEF	; 239
     7ca:	90 e0       	ldi	r25, 0x00	; 0
     7cc:	2f ee       	ldi	r18, 0xEF	; 239
     7ce:	30 e0       	ldi	r19, 0x00	; 0
     7d0:	f9 01       	movw	r30, r18
     7d2:	40 81       	ld	r20, Z
     7d4:	29 85       	ldd	r18, Y+9	; 0x09
     7d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     7d8:	f9 01       	movw	r30, r18
     7da:	26 81       	ldd	r18, Z+6	; 0x06
     7dc:	24 2b       	or	r18, r20
     7de:	fc 01       	movw	r30, r24
     7e0:	20 83       	st	Z, r18
          Can_config_tx();
     7e2:	8f ee       	ldi	r24, 0xEF	; 239
     7e4:	90 e0       	ldi	r25, 0x00	; 0
     7e6:	2f ee       	ldi	r18, 0xEF	; 239
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	f9 01       	movw	r30, r18
     7ec:	20 81       	ld	r18, Z
     7ee:	2f 73       	andi	r18, 0x3F	; 63
     7f0:	fc 01       	movw	r30, r24
     7f2:	20 83       	st	Z, r18
     7f4:	8f ee       	ldi	r24, 0xEF	; 239
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	2f ee       	ldi	r18, 0xEF	; 239
     7fa:	30 e0       	ldi	r19, 0x00	; 0
     7fc:	f9 01       	movw	r30, r18
     7fe:	20 81       	ld	r18, Z
     800:	20 64       	ori	r18, 0x40	; 64
     802:	fc 01       	movw	r30, r24
     804:	20 83       	st	Z, r18
          break;
     806:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     80a:	89 85       	ldd	r24, Y+9	; 0x09
     80c:	9a 85       	ldd	r25, Y+10	; 0x0a
     80e:	fc 01       	movw	r30, r24
     810:	83 85       	ldd	r24, Z+11	; 0x0b
     812:	88 23       	and	r24, r24
     814:	09 f4       	brne	.+2      	; 0x818 <__DATA_REGION_LENGTH__+0x18>
     816:	69 c0       	rjmp	.+210    	; 0x8ea <__DATA_REGION_LENGTH__+0xea>
     818:	83 ef       	ldi	r24, 0xF3	; 243
     81a:	90 e0       	ldi	r25, 0x00	; 0
     81c:	29 85       	ldd	r18, Y+9	; 0x09
     81e:	3a 85       	ldd	r19, Y+10	; 0x0a
     820:	2e 5f       	subi	r18, 0xFE	; 254
     822:	3f 4f       	sbci	r19, 0xFF	; 255
     824:	2d 5f       	subi	r18, 0xFD	; 253
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	f9 01       	movw	r30, r18
     82a:	20 81       	ld	r18, Z
     82c:	42 2f       	mov	r20, r18
     82e:	44 0f       	add	r20, r20
     830:	44 0f       	add	r20, r20
     832:	44 0f       	add	r20, r20
     834:	29 85       	ldd	r18, Y+9	; 0x09
     836:	3a 85       	ldd	r19, Y+10	; 0x0a
     838:	2e 5f       	subi	r18, 0xFE	; 254
     83a:	3f 4f       	sbci	r19, 0xFF	; 255
     83c:	2e 5f       	subi	r18, 0xFE	; 254
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	f9 01       	movw	r30, r18
     842:	20 81       	ld	r18, Z
     844:	22 95       	swap	r18
     846:	26 95       	lsr	r18
     848:	27 70       	andi	r18, 0x07	; 7
     84a:	24 0f       	add	r18, r20
     84c:	fc 01       	movw	r30, r24
     84e:	20 83       	st	Z, r18
     850:	82 ef       	ldi	r24, 0xF2	; 242
     852:	90 e0       	ldi	r25, 0x00	; 0
     854:	29 85       	ldd	r18, Y+9	; 0x09
     856:	3a 85       	ldd	r19, Y+10	; 0x0a
     858:	2e 5f       	subi	r18, 0xFE	; 254
     85a:	3f 4f       	sbci	r19, 0xFF	; 255
     85c:	2e 5f       	subi	r18, 0xFE	; 254
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	f9 01       	movw	r30, r18
     862:	20 81       	ld	r18, Z
     864:	42 2f       	mov	r20, r18
     866:	44 0f       	add	r20, r20
     868:	44 0f       	add	r20, r20
     86a:	44 0f       	add	r20, r20
     86c:	29 85       	ldd	r18, Y+9	; 0x09
     86e:	3a 85       	ldd	r19, Y+10	; 0x0a
     870:	2e 5f       	subi	r18, 0xFE	; 254
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	2f 5f       	subi	r18, 0xFF	; 255
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	f9 01       	movw	r30, r18
     87a:	20 81       	ld	r18, Z
     87c:	22 95       	swap	r18
     87e:	26 95       	lsr	r18
     880:	27 70       	andi	r18, 0x07	; 7
     882:	24 0f       	add	r18, r20
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
     888:	81 ef       	ldi	r24, 0xF1	; 241
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	29 85       	ldd	r18, Y+9	; 0x09
     88e:	3a 85       	ldd	r19, Y+10	; 0x0a
     890:	2e 5f       	subi	r18, 0xFE	; 254
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	2f 5f       	subi	r18, 0xFF	; 255
     896:	3f 4f       	sbci	r19, 0xFF	; 255
     898:	f9 01       	movw	r30, r18
     89a:	20 81       	ld	r18, Z
     89c:	42 2f       	mov	r20, r18
     89e:	44 0f       	add	r20, r20
     8a0:	44 0f       	add	r20, r20
     8a2:	44 0f       	add	r20, r20
     8a4:	29 85       	ldd	r18, Y+9	; 0x09
     8a6:	3a 85       	ldd	r19, Y+10	; 0x0a
     8a8:	2e 5f       	subi	r18, 0xFE	; 254
     8aa:	3f 4f       	sbci	r19, 0xFF	; 255
     8ac:	f9 01       	movw	r30, r18
     8ae:	20 81       	ld	r18, Z
     8b0:	22 95       	swap	r18
     8b2:	26 95       	lsr	r18
     8b4:	27 70       	andi	r18, 0x07	; 7
     8b6:	24 0f       	add	r18, r20
     8b8:	fc 01       	movw	r30, r24
     8ba:	20 83       	st	Z, r18
     8bc:	80 ef       	ldi	r24, 0xF0	; 240
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	29 85       	ldd	r18, Y+9	; 0x09
     8c2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8c4:	2e 5f       	subi	r18, 0xFE	; 254
     8c6:	3f 4f       	sbci	r19, 0xFF	; 255
     8c8:	f9 01       	movw	r30, r18
     8ca:	20 81       	ld	r18, Z
     8cc:	22 0f       	add	r18, r18
     8ce:	22 0f       	add	r18, r18
     8d0:	22 0f       	add	r18, r18
     8d2:	fc 01       	movw	r30, r24
     8d4:	20 83       	st	Z, r18
     8d6:	8f ee       	ldi	r24, 0xEF	; 239
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	2f ee       	ldi	r18, 0xEF	; 239
     8dc:	30 e0       	ldi	r19, 0x00	; 0
     8de:	f9 01       	movw	r30, r18
     8e0:	20 81       	ld	r18, Z
     8e2:	20 61       	ori	r18, 0x10	; 16
     8e4:	fc 01       	movw	r30, r24
     8e6:	20 83       	st	Z, r18
     8e8:	30 c0       	rjmp	.+96     	; 0x94a <__stack+0x4b>
          else              { Can_set_std_id(cmd->id.std);}
     8ea:	83 ef       	ldi	r24, 0xF3	; 243
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 85       	ldd	r18, Y+9	; 0x09
     8f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f2:	2e 5f       	subi	r18, 0xFE	; 254
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	2f 5f       	subi	r18, 0xFF	; 255
     8f8:	3f 4f       	sbci	r19, 0xFF	; 255
     8fa:	f9 01       	movw	r30, r18
     8fc:	20 81       	ld	r18, Z
     8fe:	42 2f       	mov	r20, r18
     900:	42 95       	swap	r20
     902:	44 0f       	add	r20, r20
     904:	40 7e       	andi	r20, 0xE0	; 224
     906:	29 85       	ldd	r18, Y+9	; 0x09
     908:	3a 85       	ldd	r19, Y+10	; 0x0a
     90a:	2e 5f       	subi	r18, 0xFE	; 254
     90c:	3f 4f       	sbci	r19, 0xFF	; 255
     90e:	f9 01       	movw	r30, r18
     910:	20 81       	ld	r18, Z
     912:	26 95       	lsr	r18
     914:	26 95       	lsr	r18
     916:	26 95       	lsr	r18
     918:	24 0f       	add	r18, r20
     91a:	fc 01       	movw	r30, r24
     91c:	20 83       	st	Z, r18
     91e:	82 ef       	ldi	r24, 0xF2	; 242
     920:	90 e0       	ldi	r25, 0x00	; 0
     922:	29 85       	ldd	r18, Y+9	; 0x09
     924:	3a 85       	ldd	r19, Y+10	; 0x0a
     926:	2e 5f       	subi	r18, 0xFE	; 254
     928:	3f 4f       	sbci	r19, 0xFF	; 255
     92a:	f9 01       	movw	r30, r18
     92c:	20 81       	ld	r18, Z
     92e:	22 95       	swap	r18
     930:	22 0f       	add	r18, r18
     932:	20 7e       	andi	r18, 0xE0	; 224
     934:	fc 01       	movw	r30, r24
     936:	20 83       	st	Z, r18
     938:	8f ee       	ldi	r24, 0xEF	; 239
     93a:	90 e0       	ldi	r25, 0x00	; 0
     93c:	2f ee       	ldi	r18, 0xEF	; 239
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	20 81       	ld	r18, Z
     944:	2f 7e       	andi	r18, 0xEF	; 239
     946:	fc 01       	movw	r30, r24
     948:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     94a:	19 82       	std	Y+1, r1	; 0x01
     94c:	13 c0       	rjmp	.+38     	; 0x974 <__stack+0x75>
     94e:	8a ef       	ldi	r24, 0xFA	; 250
     950:	90 e0       	ldi	r25, 0x00	; 0
     952:	29 85       	ldd	r18, Y+9	; 0x09
     954:	3a 85       	ldd	r19, Y+10	; 0x0a
     956:	f9 01       	movw	r30, r18
     958:	47 81       	ldd	r20, Z+7	; 0x07
     95a:	50 85       	ldd	r21, Z+8	; 0x08
     95c:	29 81       	ldd	r18, Y+1	; 0x01
     95e:	22 2f       	mov	r18, r18
     960:	30 e0       	ldi	r19, 0x00	; 0
     962:	24 0f       	add	r18, r20
     964:	35 1f       	adc	r19, r21
     966:	f9 01       	movw	r30, r18
     968:	20 81       	ld	r18, Z
     96a:	fc 01       	movw	r30, r24
     96c:	20 83       	st	Z, r18
     96e:	89 81       	ldd	r24, Y+1	; 0x01
     970:	8f 5f       	subi	r24, 0xFF	; 255
     972:	89 83       	std	Y+1, r24	; 0x01
     974:	89 85       	ldd	r24, Y+9	; 0x09
     976:	9a 85       	ldd	r25, Y+10	; 0x0a
     978:	fc 01       	movw	r30, r24
     97a:	96 81       	ldd	r25, Z+6	; 0x06
     97c:	89 81       	ldd	r24, Y+1	; 0x01
     97e:	89 17       	cp	r24, r25
     980:	30 f3       	brcs	.-52     	; 0x94e <__stack+0x4f>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     982:	89 85       	ldd	r24, Y+9	; 0x09
     984:	9a 85       	ldd	r25, Y+10	; 0x0a
     986:	fc 01       	movw	r30, r24
     988:	12 86       	std	Z+10, r1	; 0x0a
     98a:	80 ef       	ldi	r24, 0xF0	; 240
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	20 ef       	ldi	r18, 0xF0	; 240
     990:	30 e0       	ldi	r19, 0x00	; 0
     992:	f9 01       	movw	r30, r18
     994:	20 81       	ld	r18, Z
     996:	2b 7f       	andi	r18, 0xFB	; 251
     998:	fc 01       	movw	r30, r24
     99a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     99c:	8f ee       	ldi	r24, 0xEF	; 239
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	2f ee       	ldi	r18, 0xEF	; 239
     9a2:	30 e0       	ldi	r19, 0x00	; 0
     9a4:	f9 01       	movw	r30, r18
     9a6:	40 81       	ld	r20, Z
     9a8:	29 85       	ldd	r18, Y+9	; 0x09
     9aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     9ac:	f9 01       	movw	r30, r18
     9ae:	26 81       	ldd	r18, Z+6	; 0x06
     9b0:	24 2b       	or	r18, r20
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18
          Can_config_tx();
     9b6:	8f ee       	ldi	r24, 0xEF	; 239
     9b8:	90 e0       	ldi	r25, 0x00	; 0
     9ba:	2f ee       	ldi	r18, 0xEF	; 239
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	f9 01       	movw	r30, r18
     9c0:	20 81       	ld	r18, Z
     9c2:	2f 73       	andi	r18, 0x3F	; 63
     9c4:	fc 01       	movw	r30, r24
     9c6:	20 83       	st	Z, r18
     9c8:	8f ee       	ldi	r24, 0xEF	; 239
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	2f ee       	ldi	r18, 0xEF	; 239
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	f9 01       	movw	r30, r18
     9d2:	20 81       	ld	r18, Z
     9d4:	20 64       	ori	r18, 0x40	; 64
     9d6:	fc 01       	movw	r30, r24
     9d8:	20 83       	st	Z, r18
          break;
     9da:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9de:	89 85       	ldd	r24, Y+9	; 0x09
     9e0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9e2:	fc 01       	movw	r30, r24
     9e4:	83 85       	ldd	r24, Z+11	; 0x0b
     9e6:	88 23       	and	r24, r24
     9e8:	09 f4       	brne	.+2      	; 0x9ec <__stack+0xed>
     9ea:	69 c0       	rjmp	.+210    	; 0xabe <__stack+0x1bf>
     9ec:	83 ef       	ldi	r24, 0xF3	; 243
     9ee:	90 e0       	ldi	r25, 0x00	; 0
     9f0:	29 85       	ldd	r18, Y+9	; 0x09
     9f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f4:	2e 5f       	subi	r18, 0xFE	; 254
     9f6:	3f 4f       	sbci	r19, 0xFF	; 255
     9f8:	2d 5f       	subi	r18, 0xFD	; 253
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	f9 01       	movw	r30, r18
     9fe:	20 81       	ld	r18, Z
     a00:	42 2f       	mov	r20, r18
     a02:	44 0f       	add	r20, r20
     a04:	44 0f       	add	r20, r20
     a06:	44 0f       	add	r20, r20
     a08:	29 85       	ldd	r18, Y+9	; 0x09
     a0a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a0c:	2e 5f       	subi	r18, 0xFE	; 254
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
     a10:	2e 5f       	subi	r18, 0xFE	; 254
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	f9 01       	movw	r30, r18
     a16:	20 81       	ld	r18, Z
     a18:	22 95       	swap	r18
     a1a:	26 95       	lsr	r18
     a1c:	27 70       	andi	r18, 0x07	; 7
     a1e:	24 0f       	add	r18, r20
     a20:	fc 01       	movw	r30, r24
     a22:	20 83       	st	Z, r18
     a24:	82 ef       	ldi	r24, 0xF2	; 242
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	29 85       	ldd	r18, Y+9	; 0x09
     a2a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a2c:	2e 5f       	subi	r18, 0xFE	; 254
     a2e:	3f 4f       	sbci	r19, 0xFF	; 255
     a30:	2e 5f       	subi	r18, 0xFE	; 254
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	f9 01       	movw	r30, r18
     a36:	20 81       	ld	r18, Z
     a38:	42 2f       	mov	r20, r18
     a3a:	44 0f       	add	r20, r20
     a3c:	44 0f       	add	r20, r20
     a3e:	44 0f       	add	r20, r20
     a40:	29 85       	ldd	r18, Y+9	; 0x09
     a42:	3a 85       	ldd	r19, Y+10	; 0x0a
     a44:	2e 5f       	subi	r18, 0xFE	; 254
     a46:	3f 4f       	sbci	r19, 0xFF	; 255
     a48:	2f 5f       	subi	r18, 0xFF	; 255
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	22 95       	swap	r18
     a52:	26 95       	lsr	r18
     a54:	27 70       	andi	r18, 0x07	; 7
     a56:	24 0f       	add	r18, r20
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
     a5c:	81 ef       	ldi	r24, 0xF1	; 241
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	29 85       	ldd	r18, Y+9	; 0x09
     a62:	3a 85       	ldd	r19, Y+10	; 0x0a
     a64:	2e 5f       	subi	r18, 0xFE	; 254
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	2f 5f       	subi	r18, 0xFF	; 255
     a6a:	3f 4f       	sbci	r19, 0xFF	; 255
     a6c:	f9 01       	movw	r30, r18
     a6e:	20 81       	ld	r18, Z
     a70:	42 2f       	mov	r20, r18
     a72:	44 0f       	add	r20, r20
     a74:	44 0f       	add	r20, r20
     a76:	44 0f       	add	r20, r20
     a78:	29 85       	ldd	r18, Y+9	; 0x09
     a7a:	3a 85       	ldd	r19, Y+10	; 0x0a
     a7c:	2e 5f       	subi	r18, 0xFE	; 254
     a7e:	3f 4f       	sbci	r19, 0xFF	; 255
     a80:	f9 01       	movw	r30, r18
     a82:	20 81       	ld	r18, Z
     a84:	22 95       	swap	r18
     a86:	26 95       	lsr	r18
     a88:	27 70       	andi	r18, 0x07	; 7
     a8a:	24 0f       	add	r18, r20
     a8c:	fc 01       	movw	r30, r24
     a8e:	20 83       	st	Z, r18
     a90:	80 ef       	ldi	r24, 0xF0	; 240
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	29 85       	ldd	r18, Y+9	; 0x09
     a96:	3a 85       	ldd	r19, Y+10	; 0x0a
     a98:	2e 5f       	subi	r18, 0xFE	; 254
     a9a:	3f 4f       	sbci	r19, 0xFF	; 255
     a9c:	f9 01       	movw	r30, r18
     a9e:	20 81       	ld	r18, Z
     aa0:	22 0f       	add	r18, r18
     aa2:	22 0f       	add	r18, r18
     aa4:	22 0f       	add	r18, r18
     aa6:	fc 01       	movw	r30, r24
     aa8:	20 83       	st	Z, r18
     aaa:	8f ee       	ldi	r24, 0xEF	; 239
     aac:	90 e0       	ldi	r25, 0x00	; 0
     aae:	2f ee       	ldi	r18, 0xEF	; 239
     ab0:	30 e0       	ldi	r19, 0x00	; 0
     ab2:	f9 01       	movw	r30, r18
     ab4:	20 81       	ld	r18, Z
     ab6:	20 61       	ori	r18, 0x10	; 16
     ab8:	fc 01       	movw	r30, r24
     aba:	20 83       	st	Z, r18
     abc:	30 c0       	rjmp	.+96     	; 0xb1e <__stack+0x21f>
          else              { Can_set_std_id(cmd->id.std);}
     abe:	83 ef       	ldi	r24, 0xF3	; 243
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	29 85       	ldd	r18, Y+9	; 0x09
     ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac6:	2e 5f       	subi	r18, 0xFE	; 254
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	2f 5f       	subi	r18, 0xFF	; 255
     acc:	3f 4f       	sbci	r19, 0xFF	; 255
     ace:	f9 01       	movw	r30, r18
     ad0:	20 81       	ld	r18, Z
     ad2:	42 2f       	mov	r20, r18
     ad4:	42 95       	swap	r20
     ad6:	44 0f       	add	r20, r20
     ad8:	40 7e       	andi	r20, 0xE0	; 224
     ada:	29 85       	ldd	r18, Y+9	; 0x09
     adc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ade:	2e 5f       	subi	r18, 0xFE	; 254
     ae0:	3f 4f       	sbci	r19, 0xFF	; 255
     ae2:	f9 01       	movw	r30, r18
     ae4:	20 81       	ld	r18, Z
     ae6:	26 95       	lsr	r18
     ae8:	26 95       	lsr	r18
     aea:	26 95       	lsr	r18
     aec:	24 0f       	add	r18, r20
     aee:	fc 01       	movw	r30, r24
     af0:	20 83       	st	Z, r18
     af2:	82 ef       	ldi	r24, 0xF2	; 242
     af4:	90 e0       	ldi	r25, 0x00	; 0
     af6:	29 85       	ldd	r18, Y+9	; 0x09
     af8:	3a 85       	ldd	r19, Y+10	; 0x0a
     afa:	2e 5f       	subi	r18, 0xFE	; 254
     afc:	3f 4f       	sbci	r19, 0xFF	; 255
     afe:	f9 01       	movw	r30, r18
     b00:	20 81       	ld	r18, Z
     b02:	22 95       	swap	r18
     b04:	22 0f       	add	r18, r18
     b06:	20 7e       	andi	r18, 0xE0	; 224
     b08:	fc 01       	movw	r30, r24
     b0a:	20 83       	st	Z, r18
     b0c:	8f ee       	ldi	r24, 0xEF	; 239
     b0e:	90 e0       	ldi	r25, 0x00	; 0
     b10:	2f ee       	ldi	r18, 0xEF	; 239
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	f9 01       	movw	r30, r18
     b16:	20 81       	ld	r18, Z
     b18:	2f 7e       	andi	r18, 0xEF	; 239
     b1a:	fc 01       	movw	r30, r24
     b1c:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     b1e:	89 85       	ldd	r24, Y+9	; 0x09
     b20:	9a 85       	ldd	r25, Y+10	; 0x0a
     b22:	21 e0       	ldi	r18, 0x01	; 1
     b24:	fc 01       	movw	r30, r24
     b26:	22 87       	std	Z+10, r18	; 0x0a
     b28:	80 ef       	ldi	r24, 0xF0	; 240
     b2a:	90 e0       	ldi	r25, 0x00	; 0
     b2c:	20 ef       	ldi	r18, 0xF0	; 240
     b2e:	30 e0       	ldi	r19, 0x00	; 0
     b30:	f9 01       	movw	r30, r18
     b32:	20 81       	ld	r18, Z
     b34:	24 60       	ori	r18, 0x04	; 4
     b36:	fc 01       	movw	r30, r24
     b38:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b3a:	8f ee       	ldi	r24, 0xEF	; 239
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	2f ee       	ldi	r18, 0xEF	; 239
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	f9 01       	movw	r30, r18
     b44:	40 81       	ld	r20, Z
     b46:	29 85       	ldd	r18, Y+9	; 0x09
     b48:	3a 85       	ldd	r19, Y+10	; 0x0a
     b4a:	f9 01       	movw	r30, r18
     b4c:	26 81       	ldd	r18, Z+6	; 0x06
     b4e:	24 2b       	or	r18, r20
     b50:	fc 01       	movw	r30, r24
     b52:	20 83       	st	Z, r18
          Can_config_tx();
     b54:	8f ee       	ldi	r24, 0xEF	; 239
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	2f ee       	ldi	r18, 0xEF	; 239
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	f9 01       	movw	r30, r18
     b5e:	20 81       	ld	r18, Z
     b60:	2f 73       	andi	r18, 0x3F	; 63
     b62:	fc 01       	movw	r30, r24
     b64:	20 83       	st	Z, r18
     b66:	8f ee       	ldi	r24, 0xEF	; 239
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	2f ee       	ldi	r18, 0xEF	; 239
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	f9 01       	movw	r30, r18
     b70:	20 81       	ld	r18, Z
     b72:	20 64       	ori	r18, 0x40	; 64
     b74:	fc 01       	movw	r30, r24
     b76:	20 83       	st	Z, r18
          break;
     b78:	5f c7       	rjmp	.+3774   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     b7a:	1d 82       	std	Y+5, r1	; 0x05
     b7c:	1e 82       	std	Y+6, r1	; 0x06
     b7e:	1f 82       	std	Y+7, r1	; 0x07
     b80:	18 86       	std	Y+8, r1	; 0x08
     b82:	27 ef       	ldi	r18, 0xF7	; 247
     b84:	30 e0       	ldi	r19, 0x00	; 0
     b86:	ce 01       	movw	r24, r28
     b88:	05 96       	adiw	r24, 0x05	; 5
     b8a:	03 96       	adiw	r24, 0x03	; 3
     b8c:	fc 01       	movw	r30, r24
     b8e:	80 81       	ld	r24, Z
     b90:	48 2f       	mov	r20, r24
     b92:	44 0f       	add	r20, r20
     b94:	44 0f       	add	r20, r20
     b96:	44 0f       	add	r20, r20
     b98:	ce 01       	movw	r24, r28
     b9a:	05 96       	adiw	r24, 0x05	; 5
     b9c:	02 96       	adiw	r24, 0x02	; 2
     b9e:	fc 01       	movw	r30, r24
     ba0:	80 81       	ld	r24, Z
     ba2:	82 95       	swap	r24
     ba4:	86 95       	lsr	r24
     ba6:	87 70       	andi	r24, 0x07	; 7
     ba8:	84 0f       	add	r24, r20
     baa:	f9 01       	movw	r30, r18
     bac:	80 83       	st	Z, r24
     bae:	26 ef       	ldi	r18, 0xF6	; 246
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	ce 01       	movw	r24, r28
     bb4:	05 96       	adiw	r24, 0x05	; 5
     bb6:	02 96       	adiw	r24, 0x02	; 2
     bb8:	fc 01       	movw	r30, r24
     bba:	80 81       	ld	r24, Z
     bbc:	48 2f       	mov	r20, r24
     bbe:	44 0f       	add	r20, r20
     bc0:	44 0f       	add	r20, r20
     bc2:	44 0f       	add	r20, r20
     bc4:	ce 01       	movw	r24, r28
     bc6:	05 96       	adiw	r24, 0x05	; 5
     bc8:	01 96       	adiw	r24, 0x01	; 1
     bca:	fc 01       	movw	r30, r24
     bcc:	80 81       	ld	r24, Z
     bce:	82 95       	swap	r24
     bd0:	86 95       	lsr	r24
     bd2:	87 70       	andi	r24, 0x07	; 7
     bd4:	84 0f       	add	r24, r20
     bd6:	f9 01       	movw	r30, r18
     bd8:	80 83       	st	Z, r24
     bda:	25 ef       	ldi	r18, 0xF5	; 245
     bdc:	30 e0       	ldi	r19, 0x00	; 0
     bde:	ce 01       	movw	r24, r28
     be0:	05 96       	adiw	r24, 0x05	; 5
     be2:	01 96       	adiw	r24, 0x01	; 1
     be4:	fc 01       	movw	r30, r24
     be6:	80 81       	ld	r24, Z
     be8:	48 2f       	mov	r20, r24
     bea:	44 0f       	add	r20, r20
     bec:	44 0f       	add	r20, r20
     bee:	44 0f       	add	r20, r20
     bf0:	ce 01       	movw	r24, r28
     bf2:	05 96       	adiw	r24, 0x05	; 5
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	82 95       	swap	r24
     bfa:	86 95       	lsr	r24
     bfc:	87 70       	andi	r24, 0x07	; 7
     bfe:	84 0f       	add	r24, r20
     c00:	f9 01       	movw	r30, r18
     c02:	80 83       	st	Z, r24
     c04:	84 ef       	ldi	r24, 0xF4	; 244
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	9e 01       	movw	r18, r28
     c0a:	2b 5f       	subi	r18, 0xFB	; 251
     c0c:	3f 4f       	sbci	r19, 0xFF	; 255
     c0e:	f9 01       	movw	r30, r18
     c10:	20 81       	ld	r18, Z
     c12:	22 0f       	add	r18, r18
     c14:	22 0f       	add	r18, r18
     c16:	22 0f       	add	r18, r18
     c18:	fc 01       	movw	r30, r24
     c1a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     c1c:	8f ee       	ldi	r24, 0xEF	; 239
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	2f ee       	ldi	r18, 0xEF	; 239
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	40 81       	ld	r20, Z
     c28:	29 85       	ldd	r18, Y+9	; 0x09
     c2a:	3a 85       	ldd	r19, Y+10	; 0x0a
     c2c:	f9 01       	movw	r30, r18
     c2e:	26 81       	ldd	r18, Z+6	; 0x06
     c30:	24 2b       	or	r18, r20
     c32:	fc 01       	movw	r30, r24
     c34:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c36:	84 ef       	ldi	r24, 0xF4	; 244
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	24 ef       	ldi	r18, 0xF4	; 244
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	f9 01       	movw	r30, r18
     c40:	20 81       	ld	r18, Z
     c42:	2b 7f       	andi	r18, 0xFB	; 251
     c44:	fc 01       	movw	r30, r24
     c46:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c48:	84 ef       	ldi	r24, 0xF4	; 244
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	24 ef       	ldi	r18, 0xF4	; 244
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	f9 01       	movw	r30, r18
     c52:	20 81       	ld	r18, Z
     c54:	2e 7f       	andi	r18, 0xFE	; 254
     c56:	fc 01       	movw	r30, r24
     c58:	20 83       	st	Z, r18
          Can_config_rx();       
     c5a:	8f ee       	ldi	r24, 0xEF	; 239
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	2f ee       	ldi	r18, 0xEF	; 239
     c60:	30 e0       	ldi	r19, 0x00	; 0
     c62:	f9 01       	movw	r30, r18
     c64:	20 81       	ld	r18, Z
     c66:	2f 73       	andi	r18, 0x3F	; 63
     c68:	fc 01       	movw	r30, r24
     c6a:	20 83       	st	Z, r18
     c6c:	8f ee       	ldi	r24, 0xEF	; 239
     c6e:	90 e0       	ldi	r25, 0x00	; 0
     c70:	2f ee       	ldi	r18, 0xEF	; 239
     c72:	30 e0       	ldi	r19, 0x00	; 0
     c74:	f9 01       	movw	r30, r18
     c76:	20 81       	ld	r18, Z
     c78:	20 68       	ori	r18, 0x80	; 128
     c7a:	fc 01       	movw	r30, r24
     c7c:	20 83       	st	Z, r18
          break;
     c7e:	dc c6       	rjmp	.+3512   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     c80:	1d 82       	std	Y+5, r1	; 0x05
     c82:	1e 82       	std	Y+6, r1	; 0x06
     c84:	1f 82       	std	Y+7, r1	; 0x07
     c86:	18 86       	std	Y+8, r1	; 0x08
     c88:	27 ef       	ldi	r18, 0xF7	; 247
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	ce 01       	movw	r24, r28
     c8e:	05 96       	adiw	r24, 0x05	; 5
     c90:	03 96       	adiw	r24, 0x03	; 3
     c92:	fc 01       	movw	r30, r24
     c94:	80 81       	ld	r24, Z
     c96:	48 2f       	mov	r20, r24
     c98:	44 0f       	add	r20, r20
     c9a:	44 0f       	add	r20, r20
     c9c:	44 0f       	add	r20, r20
     c9e:	ce 01       	movw	r24, r28
     ca0:	05 96       	adiw	r24, 0x05	; 5
     ca2:	02 96       	adiw	r24, 0x02	; 2
     ca4:	fc 01       	movw	r30, r24
     ca6:	80 81       	ld	r24, Z
     ca8:	82 95       	swap	r24
     caa:	86 95       	lsr	r24
     cac:	87 70       	andi	r24, 0x07	; 7
     cae:	84 0f       	add	r24, r20
     cb0:	f9 01       	movw	r30, r18
     cb2:	80 83       	st	Z, r24
     cb4:	26 ef       	ldi	r18, 0xF6	; 246
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	ce 01       	movw	r24, r28
     cba:	05 96       	adiw	r24, 0x05	; 5
     cbc:	02 96       	adiw	r24, 0x02	; 2
     cbe:	fc 01       	movw	r30, r24
     cc0:	80 81       	ld	r24, Z
     cc2:	48 2f       	mov	r20, r24
     cc4:	44 0f       	add	r20, r20
     cc6:	44 0f       	add	r20, r20
     cc8:	44 0f       	add	r20, r20
     cca:	ce 01       	movw	r24, r28
     ccc:	05 96       	adiw	r24, 0x05	; 5
     cce:	01 96       	adiw	r24, 0x01	; 1
     cd0:	fc 01       	movw	r30, r24
     cd2:	80 81       	ld	r24, Z
     cd4:	82 95       	swap	r24
     cd6:	86 95       	lsr	r24
     cd8:	87 70       	andi	r24, 0x07	; 7
     cda:	84 0f       	add	r24, r20
     cdc:	f9 01       	movw	r30, r18
     cde:	80 83       	st	Z, r24
     ce0:	25 ef       	ldi	r18, 0xF5	; 245
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	ce 01       	movw	r24, r28
     ce6:	05 96       	adiw	r24, 0x05	; 5
     ce8:	01 96       	adiw	r24, 0x01	; 1
     cea:	fc 01       	movw	r30, r24
     cec:	80 81       	ld	r24, Z
     cee:	48 2f       	mov	r20, r24
     cf0:	44 0f       	add	r20, r20
     cf2:	44 0f       	add	r20, r20
     cf4:	44 0f       	add	r20, r20
     cf6:	ce 01       	movw	r24, r28
     cf8:	05 96       	adiw	r24, 0x05	; 5
     cfa:	fc 01       	movw	r30, r24
     cfc:	80 81       	ld	r24, Z
     cfe:	82 95       	swap	r24
     d00:	86 95       	lsr	r24
     d02:	87 70       	andi	r24, 0x07	; 7
     d04:	84 0f       	add	r24, r20
     d06:	f9 01       	movw	r30, r18
     d08:	80 83       	st	Z, r24
     d0a:	84 ef       	ldi	r24, 0xF4	; 244
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	9e 01       	movw	r18, r28
     d10:	2b 5f       	subi	r18, 0xFB	; 251
     d12:	3f 4f       	sbci	r19, 0xFF	; 255
     d14:	f9 01       	movw	r30, r18
     d16:	20 81       	ld	r18, Z
     d18:	22 0f       	add	r18, r18
     d1a:	22 0f       	add	r18, r18
     d1c:	22 0f       	add	r18, r18
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     d22:	8f ee       	ldi	r24, 0xEF	; 239
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	2f ee       	ldi	r18, 0xEF	; 239
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	f9 01       	movw	r30, r18
     d2c:	40 81       	ld	r20, Z
     d2e:	29 85       	ldd	r18, Y+9	; 0x09
     d30:	3a 85       	ldd	r19, Y+10	; 0x0a
     d32:	f9 01       	movw	r30, r18
     d34:	26 81       	ldd	r18, Z+6	; 0x06
     d36:	24 2b       	or	r18, r20
     d38:	fc 01       	movw	r30, r24
     d3a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     d3c:	89 85       	ldd	r24, Y+9	; 0x09
     d3e:	9a 85       	ldd	r25, Y+10	; 0x0a
     d40:	fc 01       	movw	r30, r24
     d42:	12 86       	std	Z+10, r1	; 0x0a
     d44:	84 ef       	ldi	r24, 0xF4	; 244
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	24 ef       	ldi	r18, 0xF4	; 244
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	f9 01       	movw	r30, r18
     d4e:	20 81       	ld	r18, Z
     d50:	24 60       	ori	r18, 0x04	; 4
     d52:	fc 01       	movw	r30, r24
     d54:	20 83       	st	Z, r18
     d56:	80 ef       	ldi	r24, 0xF0	; 240
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	20 ef       	ldi	r18, 0xF0	; 240
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	f9 01       	movw	r30, r18
     d60:	20 81       	ld	r18, Z
     d62:	2b 7f       	andi	r18, 0xFB	; 251
     d64:	fc 01       	movw	r30, r24
     d66:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d68:	84 ef       	ldi	r24, 0xF4	; 244
     d6a:	90 e0       	ldi	r25, 0x00	; 0
     d6c:	24 ef       	ldi	r18, 0xF4	; 244
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	f9 01       	movw	r30, r18
     d72:	20 81       	ld	r18, Z
     d74:	2e 7f       	andi	r18, 0xFE	; 254
     d76:	fc 01       	movw	r30, r24
     d78:	20 83       	st	Z, r18
          Can_config_rx();       
     d7a:	8f ee       	ldi	r24, 0xEF	; 239
     d7c:	90 e0       	ldi	r25, 0x00	; 0
     d7e:	2f ee       	ldi	r18, 0xEF	; 239
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	f9 01       	movw	r30, r18
     d84:	20 81       	ld	r18, Z
     d86:	2f 73       	andi	r18, 0x3F	; 63
     d88:	fc 01       	movw	r30, r24
     d8a:	20 83       	st	Z, r18
     d8c:	8f ee       	ldi	r24, 0xEF	; 239
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	2f ee       	ldi	r18, 0xEF	; 239
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	f9 01       	movw	r30, r18
     d96:	20 81       	ld	r18, Z
     d98:	20 68       	ori	r18, 0x80	; 128
     d9a:	fc 01       	movw	r30, r24
     d9c:	20 83       	st	Z, r18
          break;
     d9e:	4c c6       	rjmp	.+3224   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     da0:	1d 82       	std	Y+5, r1	; 0x05
     da2:	1e 82       	std	Y+6, r1	; 0x06
     da4:	1f 82       	std	Y+7, r1	; 0x07
     da6:	18 86       	std	Y+8, r1	; 0x08
     da8:	27 ef       	ldi	r18, 0xF7	; 247
     daa:	30 e0       	ldi	r19, 0x00	; 0
     dac:	ce 01       	movw	r24, r28
     dae:	05 96       	adiw	r24, 0x05	; 5
     db0:	03 96       	adiw	r24, 0x03	; 3
     db2:	fc 01       	movw	r30, r24
     db4:	80 81       	ld	r24, Z
     db6:	48 2f       	mov	r20, r24
     db8:	44 0f       	add	r20, r20
     dba:	44 0f       	add	r20, r20
     dbc:	44 0f       	add	r20, r20
     dbe:	ce 01       	movw	r24, r28
     dc0:	05 96       	adiw	r24, 0x05	; 5
     dc2:	02 96       	adiw	r24, 0x02	; 2
     dc4:	fc 01       	movw	r30, r24
     dc6:	80 81       	ld	r24, Z
     dc8:	82 95       	swap	r24
     dca:	86 95       	lsr	r24
     dcc:	87 70       	andi	r24, 0x07	; 7
     dce:	84 0f       	add	r24, r20
     dd0:	f9 01       	movw	r30, r18
     dd2:	80 83       	st	Z, r24
     dd4:	26 ef       	ldi	r18, 0xF6	; 246
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	ce 01       	movw	r24, r28
     dda:	05 96       	adiw	r24, 0x05	; 5
     ddc:	02 96       	adiw	r24, 0x02	; 2
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	48 2f       	mov	r20, r24
     de4:	44 0f       	add	r20, r20
     de6:	44 0f       	add	r20, r20
     de8:	44 0f       	add	r20, r20
     dea:	ce 01       	movw	r24, r28
     dec:	05 96       	adiw	r24, 0x05	; 5
     dee:	01 96       	adiw	r24, 0x01	; 1
     df0:	fc 01       	movw	r30, r24
     df2:	80 81       	ld	r24, Z
     df4:	82 95       	swap	r24
     df6:	86 95       	lsr	r24
     df8:	87 70       	andi	r24, 0x07	; 7
     dfa:	84 0f       	add	r24, r20
     dfc:	f9 01       	movw	r30, r18
     dfe:	80 83       	st	Z, r24
     e00:	25 ef       	ldi	r18, 0xF5	; 245
     e02:	30 e0       	ldi	r19, 0x00	; 0
     e04:	ce 01       	movw	r24, r28
     e06:	05 96       	adiw	r24, 0x05	; 5
     e08:	01 96       	adiw	r24, 0x01	; 1
     e0a:	fc 01       	movw	r30, r24
     e0c:	80 81       	ld	r24, Z
     e0e:	48 2f       	mov	r20, r24
     e10:	44 0f       	add	r20, r20
     e12:	44 0f       	add	r20, r20
     e14:	44 0f       	add	r20, r20
     e16:	ce 01       	movw	r24, r28
     e18:	05 96       	adiw	r24, 0x05	; 5
     e1a:	fc 01       	movw	r30, r24
     e1c:	80 81       	ld	r24, Z
     e1e:	82 95       	swap	r24
     e20:	86 95       	lsr	r24
     e22:	87 70       	andi	r24, 0x07	; 7
     e24:	84 0f       	add	r24, r20
     e26:	f9 01       	movw	r30, r18
     e28:	80 83       	st	Z, r24
     e2a:	84 ef       	ldi	r24, 0xF4	; 244
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	9e 01       	movw	r18, r28
     e30:	2b 5f       	subi	r18, 0xFB	; 251
     e32:	3f 4f       	sbci	r19, 0xFF	; 255
     e34:	f9 01       	movw	r30, r18
     e36:	20 81       	ld	r18, Z
     e38:	22 0f       	add	r18, r18
     e3a:	22 0f       	add	r18, r18
     e3c:	22 0f       	add	r18, r18
     e3e:	fc 01       	movw	r30, r24
     e40:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e42:	8f ee       	ldi	r24, 0xEF	; 239
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	2f ee       	ldi	r18, 0xEF	; 239
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	f9 01       	movw	r30, r18
     e4c:	40 81       	ld	r20, Z
     e4e:	29 85       	ldd	r18, Y+9	; 0x09
     e50:	3a 85       	ldd	r19, Y+10	; 0x0a
     e52:	f9 01       	movw	r30, r18
     e54:	26 81       	ldd	r18, Z+6	; 0x06
     e56:	24 2b       	or	r18, r20
     e58:	fc 01       	movw	r30, r24
     e5a:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e5c:	89 85       	ldd	r24, Y+9	; 0x09
     e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	fc 01       	movw	r30, r24
     e64:	22 87       	std	Z+10, r18	; 0x0a
     e66:	84 ef       	ldi	r24, 0xF4	; 244
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	24 ef       	ldi	r18, 0xF4	; 244
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	f9 01       	movw	r30, r18
     e70:	20 81       	ld	r18, Z
     e72:	24 60       	ori	r18, 0x04	; 4
     e74:	fc 01       	movw	r30, r24
     e76:	20 83       	st	Z, r18
     e78:	80 ef       	ldi	r24, 0xF0	; 240
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	20 ef       	ldi	r18, 0xF0	; 240
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	24 60       	ori	r18, 0x04	; 4
     e86:	fc 01       	movw	r30, r24
     e88:	20 83       	st	Z, r18
          Can_clear_rplv();
     e8a:	8f ee       	ldi	r24, 0xEF	; 239
     e8c:	90 e0       	ldi	r25, 0x00	; 0
     e8e:	2f ee       	ldi	r18, 0xEF	; 239
     e90:	30 e0       	ldi	r19, 0x00	; 0
     e92:	f9 01       	movw	r30, r18
     e94:	20 81       	ld	r18, Z
     e96:	2f 7d       	andi	r18, 0xDF	; 223
     e98:	fc 01       	movw	r30, r24
     e9a:	20 83       	st	Z, r18
          Can_clear_idemsk();
     e9c:	84 ef       	ldi	r24, 0xF4	; 244
     e9e:	90 e0       	ldi	r25, 0x00	; 0
     ea0:	24 ef       	ldi	r18, 0xF4	; 244
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	f9 01       	movw	r30, r18
     ea6:	20 81       	ld	r18, Z
     ea8:	2e 7f       	andi	r18, 0xFE	; 254
     eaa:	fc 01       	movw	r30, r24
     eac:	20 83       	st	Z, r18
          Can_config_rx();       
     eae:	8f ee       	ldi	r24, 0xEF	; 239
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	2f ee       	ldi	r18, 0xEF	; 239
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	f9 01       	movw	r30, r18
     eb8:	20 81       	ld	r18, Z
     eba:	2f 73       	andi	r18, 0x3F	; 63
     ebc:	fc 01       	movw	r30, r24
     ebe:	20 83       	st	Z, r18
     ec0:	8f ee       	ldi	r24, 0xEF	; 239
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	2f ee       	ldi	r18, 0xEF	; 239
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	f9 01       	movw	r30, r18
     eca:	20 81       	ld	r18, Z
     ecc:	20 68       	ori	r18, 0x80	; 128
     ece:	fc 01       	movw	r30, r24
     ed0:	20 83       	st	Z, r18
          break;
     ed2:	b2 c5       	rjmp	.+2916   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ed4:	89 85       	ldd	r24, Y+9	; 0x09
     ed6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ed8:	fc 01       	movw	r30, r24
     eda:	83 85       	ldd	r24, Z+11	; 0x0b
     edc:	88 23       	and	r24, r24
     ede:	09 f4       	brne	.+2      	; 0xee2 <__stack+0x5e3>
     ee0:	69 c0       	rjmp	.+210    	; 0xfb4 <__stack+0x6b5>
     ee2:	83 ef       	ldi	r24, 0xF3	; 243
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	29 85       	ldd	r18, Y+9	; 0x09
     ee8:	3a 85       	ldd	r19, Y+10	; 0x0a
     eea:	2e 5f       	subi	r18, 0xFE	; 254
     eec:	3f 4f       	sbci	r19, 0xFF	; 255
     eee:	2d 5f       	subi	r18, 0xFD	; 253
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	f9 01       	movw	r30, r18
     ef4:	20 81       	ld	r18, Z
     ef6:	42 2f       	mov	r20, r18
     ef8:	44 0f       	add	r20, r20
     efa:	44 0f       	add	r20, r20
     efc:	44 0f       	add	r20, r20
     efe:	29 85       	ldd	r18, Y+9	; 0x09
     f00:	3a 85       	ldd	r19, Y+10	; 0x0a
     f02:	2e 5f       	subi	r18, 0xFE	; 254
     f04:	3f 4f       	sbci	r19, 0xFF	; 255
     f06:	2e 5f       	subi	r18, 0xFE	; 254
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	f9 01       	movw	r30, r18
     f0c:	20 81       	ld	r18, Z
     f0e:	22 95       	swap	r18
     f10:	26 95       	lsr	r18
     f12:	27 70       	andi	r18, 0x07	; 7
     f14:	24 0f       	add	r18, r20
     f16:	fc 01       	movw	r30, r24
     f18:	20 83       	st	Z, r18
     f1a:	82 ef       	ldi	r24, 0xF2	; 242
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	29 85       	ldd	r18, Y+9	; 0x09
     f20:	3a 85       	ldd	r19, Y+10	; 0x0a
     f22:	2e 5f       	subi	r18, 0xFE	; 254
     f24:	3f 4f       	sbci	r19, 0xFF	; 255
     f26:	2e 5f       	subi	r18, 0xFE	; 254
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	f9 01       	movw	r30, r18
     f2c:	20 81       	ld	r18, Z
     f2e:	42 2f       	mov	r20, r18
     f30:	44 0f       	add	r20, r20
     f32:	44 0f       	add	r20, r20
     f34:	44 0f       	add	r20, r20
     f36:	29 85       	ldd	r18, Y+9	; 0x09
     f38:	3a 85       	ldd	r19, Y+10	; 0x0a
     f3a:	2e 5f       	subi	r18, 0xFE	; 254
     f3c:	3f 4f       	sbci	r19, 0xFF	; 255
     f3e:	2f 5f       	subi	r18, 0xFF	; 255
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	f9 01       	movw	r30, r18
     f44:	20 81       	ld	r18, Z
     f46:	22 95       	swap	r18
     f48:	26 95       	lsr	r18
     f4a:	27 70       	andi	r18, 0x07	; 7
     f4c:	24 0f       	add	r18, r20
     f4e:	fc 01       	movw	r30, r24
     f50:	20 83       	st	Z, r18
     f52:	81 ef       	ldi	r24, 0xF1	; 241
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	29 85       	ldd	r18, Y+9	; 0x09
     f58:	3a 85       	ldd	r19, Y+10	; 0x0a
     f5a:	2e 5f       	subi	r18, 0xFE	; 254
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	2f 5f       	subi	r18, 0xFF	; 255
     f60:	3f 4f       	sbci	r19, 0xFF	; 255
     f62:	f9 01       	movw	r30, r18
     f64:	20 81       	ld	r18, Z
     f66:	42 2f       	mov	r20, r18
     f68:	44 0f       	add	r20, r20
     f6a:	44 0f       	add	r20, r20
     f6c:	44 0f       	add	r20, r20
     f6e:	29 85       	ldd	r18, Y+9	; 0x09
     f70:	3a 85       	ldd	r19, Y+10	; 0x0a
     f72:	2e 5f       	subi	r18, 0xFE	; 254
     f74:	3f 4f       	sbci	r19, 0xFF	; 255
     f76:	f9 01       	movw	r30, r18
     f78:	20 81       	ld	r18, Z
     f7a:	22 95       	swap	r18
     f7c:	26 95       	lsr	r18
     f7e:	27 70       	andi	r18, 0x07	; 7
     f80:	24 0f       	add	r18, r20
     f82:	fc 01       	movw	r30, r24
     f84:	20 83       	st	Z, r18
     f86:	80 ef       	ldi	r24, 0xF0	; 240
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	29 85       	ldd	r18, Y+9	; 0x09
     f8c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f8e:	2e 5f       	subi	r18, 0xFE	; 254
     f90:	3f 4f       	sbci	r19, 0xFF	; 255
     f92:	f9 01       	movw	r30, r18
     f94:	20 81       	ld	r18, Z
     f96:	22 0f       	add	r18, r18
     f98:	22 0f       	add	r18, r18
     f9a:	22 0f       	add	r18, r18
     f9c:	fc 01       	movw	r30, r24
     f9e:	20 83       	st	Z, r18
     fa0:	8f ee       	ldi	r24, 0xEF	; 239
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	2f ee       	ldi	r18, 0xEF	; 239
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	f9 01       	movw	r30, r18
     faa:	20 81       	ld	r18, Z
     fac:	20 61       	ori	r18, 0x10	; 16
     fae:	fc 01       	movw	r30, r24
     fb0:	20 83       	st	Z, r18
     fb2:	30 c0       	rjmp	.+96     	; 0x1014 <__stack+0x715>
          else              { Can_set_std_id(cmd->id.std);}
     fb4:	83 ef       	ldi	r24, 0xF3	; 243
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	29 85       	ldd	r18, Y+9	; 0x09
     fba:	3a 85       	ldd	r19, Y+10	; 0x0a
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	2f 5f       	subi	r18, 0xFF	; 255
     fc2:	3f 4f       	sbci	r19, 0xFF	; 255
     fc4:	f9 01       	movw	r30, r18
     fc6:	20 81       	ld	r18, Z
     fc8:	42 2f       	mov	r20, r18
     fca:	42 95       	swap	r20
     fcc:	44 0f       	add	r20, r20
     fce:	40 7e       	andi	r20, 0xE0	; 224
     fd0:	29 85       	ldd	r18, Y+9	; 0x09
     fd2:	3a 85       	ldd	r19, Y+10	; 0x0a
     fd4:	2e 5f       	subi	r18, 0xFE	; 254
     fd6:	3f 4f       	sbci	r19, 0xFF	; 255
     fd8:	f9 01       	movw	r30, r18
     fda:	20 81       	ld	r18, Z
     fdc:	26 95       	lsr	r18
     fde:	26 95       	lsr	r18
     fe0:	26 95       	lsr	r18
     fe2:	24 0f       	add	r18, r20
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
     fe8:	82 ef       	ldi	r24, 0xF2	; 242
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	29 85       	ldd	r18, Y+9	; 0x09
     fee:	3a 85       	ldd	r19, Y+10	; 0x0a
     ff0:	2e 5f       	subi	r18, 0xFE	; 254
     ff2:	3f 4f       	sbci	r19, 0xFF	; 255
     ff4:	f9 01       	movw	r30, r18
     ff6:	20 81       	ld	r18, Z
     ff8:	22 95       	swap	r18
     ffa:	22 0f       	add	r18, r18
     ffc:	20 7e       	andi	r18, 0xE0	; 224
     ffe:	fc 01       	movw	r30, r24
    1000:	20 83       	st	Z, r18
    1002:	8f ee       	ldi	r24, 0xEF	; 239
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	2f ee       	ldi	r18, 0xEF	; 239
    1008:	30 e0       	ldi	r19, 0x00	; 0
    100a:	f9 01       	movw	r30, r18
    100c:	20 81       	ld	r18, Z
    100e:	2f 7e       	andi	r18, 0xEF	; 239
    1010:	fc 01       	movw	r30, r24
    1012:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1014:	8f ef       	ldi	r24, 0xFF	; 255
    1016:	9f ef       	ldi	r25, 0xFF	; 255
    1018:	dc 01       	movw	r26, r24
    101a:	8d 83       	std	Y+5, r24	; 0x05
    101c:	9e 83       	std	Y+6, r25	; 0x06
    101e:	af 83       	std	Y+7, r26	; 0x07
    1020:	b8 87       	std	Y+8, r27	; 0x08
    1022:	27 ef       	ldi	r18, 0xF7	; 247
    1024:	30 e0       	ldi	r19, 0x00	; 0
    1026:	ce 01       	movw	r24, r28
    1028:	05 96       	adiw	r24, 0x05	; 5
    102a:	03 96       	adiw	r24, 0x03	; 3
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	48 2f       	mov	r20, r24
    1032:	44 0f       	add	r20, r20
    1034:	44 0f       	add	r20, r20
    1036:	44 0f       	add	r20, r20
    1038:	ce 01       	movw	r24, r28
    103a:	05 96       	adiw	r24, 0x05	; 5
    103c:	02 96       	adiw	r24, 0x02	; 2
    103e:	fc 01       	movw	r30, r24
    1040:	80 81       	ld	r24, Z
    1042:	82 95       	swap	r24
    1044:	86 95       	lsr	r24
    1046:	87 70       	andi	r24, 0x07	; 7
    1048:	84 0f       	add	r24, r20
    104a:	f9 01       	movw	r30, r18
    104c:	80 83       	st	Z, r24
    104e:	26 ef       	ldi	r18, 0xF6	; 246
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	ce 01       	movw	r24, r28
    1054:	05 96       	adiw	r24, 0x05	; 5
    1056:	02 96       	adiw	r24, 0x02	; 2
    1058:	fc 01       	movw	r30, r24
    105a:	80 81       	ld	r24, Z
    105c:	48 2f       	mov	r20, r24
    105e:	44 0f       	add	r20, r20
    1060:	44 0f       	add	r20, r20
    1062:	44 0f       	add	r20, r20
    1064:	ce 01       	movw	r24, r28
    1066:	05 96       	adiw	r24, 0x05	; 5
    1068:	01 96       	adiw	r24, 0x01	; 1
    106a:	fc 01       	movw	r30, r24
    106c:	80 81       	ld	r24, Z
    106e:	82 95       	swap	r24
    1070:	86 95       	lsr	r24
    1072:	87 70       	andi	r24, 0x07	; 7
    1074:	84 0f       	add	r24, r20
    1076:	f9 01       	movw	r30, r18
    1078:	80 83       	st	Z, r24
    107a:	25 ef       	ldi	r18, 0xF5	; 245
    107c:	30 e0       	ldi	r19, 0x00	; 0
    107e:	ce 01       	movw	r24, r28
    1080:	05 96       	adiw	r24, 0x05	; 5
    1082:	01 96       	adiw	r24, 0x01	; 1
    1084:	fc 01       	movw	r30, r24
    1086:	80 81       	ld	r24, Z
    1088:	48 2f       	mov	r20, r24
    108a:	44 0f       	add	r20, r20
    108c:	44 0f       	add	r20, r20
    108e:	44 0f       	add	r20, r20
    1090:	ce 01       	movw	r24, r28
    1092:	05 96       	adiw	r24, 0x05	; 5
    1094:	fc 01       	movw	r30, r24
    1096:	80 81       	ld	r24, Z
    1098:	82 95       	swap	r24
    109a:	86 95       	lsr	r24
    109c:	87 70       	andi	r24, 0x07	; 7
    109e:	84 0f       	add	r24, r20
    10a0:	f9 01       	movw	r30, r18
    10a2:	80 83       	st	Z, r24
    10a4:	84 ef       	ldi	r24, 0xF4	; 244
    10a6:	90 e0       	ldi	r25, 0x00	; 0
    10a8:	9e 01       	movw	r18, r28
    10aa:	2b 5f       	subi	r18, 0xFB	; 251
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	f9 01       	movw	r30, r18
    10b0:	20 81       	ld	r18, Z
    10b2:	22 0f       	add	r18, r18
    10b4:	22 0f       	add	r18, r18
    10b6:	22 0f       	add	r18, r18
    10b8:	fc 01       	movw	r30, r24
    10ba:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    10bc:	8f ee       	ldi	r24, 0xEF	; 239
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	2f ee       	ldi	r18, 0xEF	; 239
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	f9 01       	movw	r30, r18
    10c6:	40 81       	ld	r20, Z
    10c8:	29 85       	ldd	r18, Y+9	; 0x09
    10ca:	3a 85       	ldd	r19, Y+10	; 0x0a
    10cc:	f9 01       	movw	r30, r18
    10ce:	26 81       	ldd	r18, Z+6	; 0x06
    10d0:	24 2b       	or	r18, r20
    10d2:	fc 01       	movw	r30, r24
    10d4:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    10d6:	84 ef       	ldi	r24, 0xF4	; 244
    10d8:	90 e0       	ldi	r25, 0x00	; 0
    10da:	24 ef       	ldi	r18, 0xF4	; 244
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	f9 01       	movw	r30, r18
    10e0:	20 81       	ld	r18, Z
    10e2:	2b 7f       	andi	r18, 0xFB	; 251
    10e4:	fc 01       	movw	r30, r24
    10e6:	20 83       	st	Z, r18
          Can_set_idemsk();
    10e8:	84 ef       	ldi	r24, 0xF4	; 244
    10ea:	90 e0       	ldi	r25, 0x00	; 0
    10ec:	24 ef       	ldi	r18, 0xF4	; 244
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	f9 01       	movw	r30, r18
    10f2:	20 81       	ld	r18, Z
    10f4:	21 60       	ori	r18, 0x01	; 1
    10f6:	fc 01       	movw	r30, r24
    10f8:	20 83       	st	Z, r18
          Can_config_rx();       
    10fa:	8f ee       	ldi	r24, 0xEF	; 239
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	2f ee       	ldi	r18, 0xEF	; 239
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	f9 01       	movw	r30, r18
    1104:	20 81       	ld	r18, Z
    1106:	2f 73       	andi	r18, 0x3F	; 63
    1108:	fc 01       	movw	r30, r24
    110a:	20 83       	st	Z, r18
    110c:	8f ee       	ldi	r24, 0xEF	; 239
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	2f ee       	ldi	r18, 0xEF	; 239
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	f9 01       	movw	r30, r18
    1116:	20 81       	ld	r18, Z
    1118:	20 68       	ori	r18, 0x80	; 128
    111a:	fc 01       	movw	r30, r24
    111c:	20 83       	st	Z, r18
          break;
    111e:	8c c4       	rjmp	.+2328   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1120:	89 85       	ldd	r24, Y+9	; 0x09
    1122:	9a 85       	ldd	r25, Y+10	; 0x0a
    1124:	fc 01       	movw	r30, r24
    1126:	83 85       	ldd	r24, Z+11	; 0x0b
    1128:	88 23       	and	r24, r24
    112a:	09 f4       	brne	.+2      	; 0x112e <__stack+0x82f>
    112c:	69 c0       	rjmp	.+210    	; 0x1200 <__stack+0x901>
    112e:	83 ef       	ldi	r24, 0xF3	; 243
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	29 85       	ldd	r18, Y+9	; 0x09
    1134:	3a 85       	ldd	r19, Y+10	; 0x0a
    1136:	2e 5f       	subi	r18, 0xFE	; 254
    1138:	3f 4f       	sbci	r19, 0xFF	; 255
    113a:	2d 5f       	subi	r18, 0xFD	; 253
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	f9 01       	movw	r30, r18
    1140:	20 81       	ld	r18, Z
    1142:	42 2f       	mov	r20, r18
    1144:	44 0f       	add	r20, r20
    1146:	44 0f       	add	r20, r20
    1148:	44 0f       	add	r20, r20
    114a:	29 85       	ldd	r18, Y+9	; 0x09
    114c:	3a 85       	ldd	r19, Y+10	; 0x0a
    114e:	2e 5f       	subi	r18, 0xFE	; 254
    1150:	3f 4f       	sbci	r19, 0xFF	; 255
    1152:	2e 5f       	subi	r18, 0xFE	; 254
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	f9 01       	movw	r30, r18
    1158:	20 81       	ld	r18, Z
    115a:	22 95       	swap	r18
    115c:	26 95       	lsr	r18
    115e:	27 70       	andi	r18, 0x07	; 7
    1160:	24 0f       	add	r18, r20
    1162:	fc 01       	movw	r30, r24
    1164:	20 83       	st	Z, r18
    1166:	82 ef       	ldi	r24, 0xF2	; 242
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	29 85       	ldd	r18, Y+9	; 0x09
    116c:	3a 85       	ldd	r19, Y+10	; 0x0a
    116e:	2e 5f       	subi	r18, 0xFE	; 254
    1170:	3f 4f       	sbci	r19, 0xFF	; 255
    1172:	2e 5f       	subi	r18, 0xFE	; 254
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	f9 01       	movw	r30, r18
    1178:	20 81       	ld	r18, Z
    117a:	42 2f       	mov	r20, r18
    117c:	44 0f       	add	r20, r20
    117e:	44 0f       	add	r20, r20
    1180:	44 0f       	add	r20, r20
    1182:	29 85       	ldd	r18, Y+9	; 0x09
    1184:	3a 85       	ldd	r19, Y+10	; 0x0a
    1186:	2e 5f       	subi	r18, 0xFE	; 254
    1188:	3f 4f       	sbci	r19, 0xFF	; 255
    118a:	2f 5f       	subi	r18, 0xFF	; 255
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	f9 01       	movw	r30, r18
    1190:	20 81       	ld	r18, Z
    1192:	22 95       	swap	r18
    1194:	26 95       	lsr	r18
    1196:	27 70       	andi	r18, 0x07	; 7
    1198:	24 0f       	add	r18, r20
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	81 ef       	ldi	r24, 0xF1	; 241
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	29 85       	ldd	r18, Y+9	; 0x09
    11a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a6:	2e 5f       	subi	r18, 0xFE	; 254
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	2f 5f       	subi	r18, 0xFF	; 255
    11ac:	3f 4f       	sbci	r19, 0xFF	; 255
    11ae:	f9 01       	movw	r30, r18
    11b0:	20 81       	ld	r18, Z
    11b2:	42 2f       	mov	r20, r18
    11b4:	44 0f       	add	r20, r20
    11b6:	44 0f       	add	r20, r20
    11b8:	44 0f       	add	r20, r20
    11ba:	29 85       	ldd	r18, Y+9	; 0x09
    11bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    11be:	2e 5f       	subi	r18, 0xFE	; 254
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	f9 01       	movw	r30, r18
    11c4:	20 81       	ld	r18, Z
    11c6:	22 95       	swap	r18
    11c8:	26 95       	lsr	r18
    11ca:	27 70       	andi	r18, 0x07	; 7
    11cc:	24 0f       	add	r18, r20
    11ce:	fc 01       	movw	r30, r24
    11d0:	20 83       	st	Z, r18
    11d2:	80 ef       	ldi	r24, 0xF0	; 240
    11d4:	90 e0       	ldi	r25, 0x00	; 0
    11d6:	29 85       	ldd	r18, Y+9	; 0x09
    11d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    11da:	2e 5f       	subi	r18, 0xFE	; 254
    11dc:	3f 4f       	sbci	r19, 0xFF	; 255
    11de:	f9 01       	movw	r30, r18
    11e0:	20 81       	ld	r18, Z
    11e2:	22 0f       	add	r18, r18
    11e4:	22 0f       	add	r18, r18
    11e6:	22 0f       	add	r18, r18
    11e8:	fc 01       	movw	r30, r24
    11ea:	20 83       	st	Z, r18
    11ec:	8f ee       	ldi	r24, 0xEF	; 239
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	2f ee       	ldi	r18, 0xEF	; 239
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	f9 01       	movw	r30, r18
    11f6:	20 81       	ld	r18, Z
    11f8:	20 61       	ori	r18, 0x10	; 16
    11fa:	fc 01       	movw	r30, r24
    11fc:	20 83       	st	Z, r18
    11fe:	30 c0       	rjmp	.+96     	; 0x1260 <__stack+0x961>
          else              { Can_set_std_id(cmd->id.std);}
    1200:	83 ef       	ldi	r24, 0xF3	; 243
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	29 85       	ldd	r18, Y+9	; 0x09
    1206:	3a 85       	ldd	r19, Y+10	; 0x0a
    1208:	2e 5f       	subi	r18, 0xFE	; 254
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	2f 5f       	subi	r18, 0xFF	; 255
    120e:	3f 4f       	sbci	r19, 0xFF	; 255
    1210:	f9 01       	movw	r30, r18
    1212:	20 81       	ld	r18, Z
    1214:	42 2f       	mov	r20, r18
    1216:	42 95       	swap	r20
    1218:	44 0f       	add	r20, r20
    121a:	40 7e       	andi	r20, 0xE0	; 224
    121c:	29 85       	ldd	r18, Y+9	; 0x09
    121e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1220:	2e 5f       	subi	r18, 0xFE	; 254
    1222:	3f 4f       	sbci	r19, 0xFF	; 255
    1224:	f9 01       	movw	r30, r18
    1226:	20 81       	ld	r18, Z
    1228:	26 95       	lsr	r18
    122a:	26 95       	lsr	r18
    122c:	26 95       	lsr	r18
    122e:	24 0f       	add	r18, r20
    1230:	fc 01       	movw	r30, r24
    1232:	20 83       	st	Z, r18
    1234:	82 ef       	ldi	r24, 0xF2	; 242
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	29 85       	ldd	r18, Y+9	; 0x09
    123a:	3a 85       	ldd	r19, Y+10	; 0x0a
    123c:	2e 5f       	subi	r18, 0xFE	; 254
    123e:	3f 4f       	sbci	r19, 0xFF	; 255
    1240:	f9 01       	movw	r30, r18
    1242:	20 81       	ld	r18, Z
    1244:	22 95       	swap	r18
    1246:	22 0f       	add	r18, r18
    1248:	20 7e       	andi	r18, 0xE0	; 224
    124a:	fc 01       	movw	r30, r24
    124c:	20 83       	st	Z, r18
    124e:	8f ee       	ldi	r24, 0xEF	; 239
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	2f ee       	ldi	r18, 0xEF	; 239
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	f9 01       	movw	r30, r18
    1258:	20 81       	ld	r18, Z
    125a:	2f 7e       	andi	r18, 0xEF	; 239
    125c:	fc 01       	movw	r30, r24
    125e:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1260:	8f ef       	ldi	r24, 0xFF	; 255
    1262:	9f ef       	ldi	r25, 0xFF	; 255
    1264:	dc 01       	movw	r26, r24
    1266:	8d 83       	std	Y+5, r24	; 0x05
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	af 83       	std	Y+7, r26	; 0x07
    126c:	b8 87       	std	Y+8, r27	; 0x08
    126e:	27 ef       	ldi	r18, 0xF7	; 247
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	ce 01       	movw	r24, r28
    1274:	05 96       	adiw	r24, 0x05	; 5
    1276:	03 96       	adiw	r24, 0x03	; 3
    1278:	fc 01       	movw	r30, r24
    127a:	80 81       	ld	r24, Z
    127c:	48 2f       	mov	r20, r24
    127e:	44 0f       	add	r20, r20
    1280:	44 0f       	add	r20, r20
    1282:	44 0f       	add	r20, r20
    1284:	ce 01       	movw	r24, r28
    1286:	05 96       	adiw	r24, 0x05	; 5
    1288:	02 96       	adiw	r24, 0x02	; 2
    128a:	fc 01       	movw	r30, r24
    128c:	80 81       	ld	r24, Z
    128e:	82 95       	swap	r24
    1290:	86 95       	lsr	r24
    1292:	87 70       	andi	r24, 0x07	; 7
    1294:	84 0f       	add	r24, r20
    1296:	f9 01       	movw	r30, r18
    1298:	80 83       	st	Z, r24
    129a:	26 ef       	ldi	r18, 0xF6	; 246
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	ce 01       	movw	r24, r28
    12a0:	05 96       	adiw	r24, 0x05	; 5
    12a2:	02 96       	adiw	r24, 0x02	; 2
    12a4:	fc 01       	movw	r30, r24
    12a6:	80 81       	ld	r24, Z
    12a8:	48 2f       	mov	r20, r24
    12aa:	44 0f       	add	r20, r20
    12ac:	44 0f       	add	r20, r20
    12ae:	44 0f       	add	r20, r20
    12b0:	ce 01       	movw	r24, r28
    12b2:	05 96       	adiw	r24, 0x05	; 5
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	fc 01       	movw	r30, r24
    12b8:	80 81       	ld	r24, Z
    12ba:	82 95       	swap	r24
    12bc:	86 95       	lsr	r24
    12be:	87 70       	andi	r24, 0x07	; 7
    12c0:	84 0f       	add	r24, r20
    12c2:	f9 01       	movw	r30, r18
    12c4:	80 83       	st	Z, r24
    12c6:	25 ef       	ldi	r18, 0xF5	; 245
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    12ca:	ce 01       	movw	r24, r28
    12cc:	05 96       	adiw	r24, 0x05	; 5
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	fc 01       	movw	r30, r24
    12d2:	80 81       	ld	r24, Z
    12d4:	48 2f       	mov	r20, r24
    12d6:	44 0f       	add	r20, r20
    12d8:	44 0f       	add	r20, r20
    12da:	44 0f       	add	r20, r20
    12dc:	ce 01       	movw	r24, r28
    12de:	05 96       	adiw	r24, 0x05	; 5
    12e0:	fc 01       	movw	r30, r24
    12e2:	80 81       	ld	r24, Z
    12e4:	82 95       	swap	r24
    12e6:	86 95       	lsr	r24
    12e8:	87 70       	andi	r24, 0x07	; 7
    12ea:	84 0f       	add	r24, r20
    12ec:	f9 01       	movw	r30, r18
    12ee:	80 83       	st	Z, r24
    12f0:	84 ef       	ldi	r24, 0xF4	; 244
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	9e 01       	movw	r18, r28
    12f6:	2b 5f       	subi	r18, 0xFB	; 251
    12f8:	3f 4f       	sbci	r19, 0xFF	; 255
    12fa:	f9 01       	movw	r30, r18
    12fc:	20 81       	ld	r18, Z
    12fe:	22 0f       	add	r18, r18
    1300:	22 0f       	add	r18, r18
    1302:	22 0f       	add	r18, r18
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1308:	8f ee       	ldi	r24, 0xEF	; 239
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	2f ee       	ldi	r18, 0xEF	; 239
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	40 81       	ld	r20, Z
    1314:	29 85       	ldd	r18, Y+9	; 0x09
    1316:	3a 85       	ldd	r19, Y+10	; 0x0a
    1318:	f9 01       	movw	r30, r18
    131a:	26 81       	ldd	r18, Z+6	; 0x06
    131c:	24 2b       	or	r18, r20
    131e:	fc 01       	movw	r30, r24
    1320:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	fc 01       	movw	r30, r24
    1328:	12 86       	std	Z+10, r1	; 0x0a
    132a:	84 ef       	ldi	r24, 0xF4	; 244
    132c:	90 e0       	ldi	r25, 0x00	; 0
    132e:	24 ef       	ldi	r18, 0xF4	; 244
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	f9 01       	movw	r30, r18
    1334:	20 81       	ld	r18, Z
    1336:	24 60       	ori	r18, 0x04	; 4
    1338:	fc 01       	movw	r30, r24
    133a:	20 83       	st	Z, r18
    133c:	80 ef       	ldi	r24, 0xF0	; 240
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	20 ef       	ldi	r18, 0xF0	; 240
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	f9 01       	movw	r30, r18
    1346:	20 81       	ld	r18, Z
    1348:	2b 7f       	andi	r18, 0xFB	; 251
    134a:	fc 01       	movw	r30, r24
    134c:	20 83       	st	Z, r18
          Can_set_idemsk();
    134e:	84 ef       	ldi	r24, 0xF4	; 244
    1350:	90 e0       	ldi	r25, 0x00	; 0
    1352:	24 ef       	ldi	r18, 0xF4	; 244
    1354:	30 e0       	ldi	r19, 0x00	; 0
    1356:	f9 01       	movw	r30, r18
    1358:	20 81       	ld	r18, Z
    135a:	21 60       	ori	r18, 0x01	; 1
    135c:	fc 01       	movw	r30, r24
    135e:	20 83       	st	Z, r18
          Can_config_rx();       
    1360:	8f ee       	ldi	r24, 0xEF	; 239
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	2f ee       	ldi	r18, 0xEF	; 239
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	f9 01       	movw	r30, r18
    136a:	20 81       	ld	r18, Z
    136c:	2f 73       	andi	r18, 0x3F	; 63
    136e:	fc 01       	movw	r30, r24
    1370:	20 83       	st	Z, r18
    1372:	8f ee       	ldi	r24, 0xEF	; 239
    1374:	90 e0       	ldi	r25, 0x00	; 0
    1376:	2f ee       	ldi	r18, 0xEF	; 239
    1378:	30 e0       	ldi	r19, 0x00	; 0
    137a:	f9 01       	movw	r30, r18
    137c:	20 81       	ld	r18, Z
    137e:	20 68       	ori	r18, 0x80	; 128
    1380:	fc 01       	movw	r30, r24
    1382:	20 83       	st	Z, r18
          break;
    1384:	59 c3       	rjmp	.+1714   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1386:	89 85       	ldd	r24, Y+9	; 0x09
    1388:	9a 85       	ldd	r25, Y+10	; 0x0a
    138a:	fc 01       	movw	r30, r24
    138c:	83 85       	ldd	r24, Z+11	; 0x0b
    138e:	88 23       	and	r24, r24
    1390:	09 f4       	brne	.+2      	; 0x1394 <__stack+0xa95>
    1392:	69 c0       	rjmp	.+210    	; 0x1466 <__stack+0xb67>
    1394:	83 ef       	ldi	r24, 0xF3	; 243
    1396:	90 e0       	ldi	r25, 0x00	; 0
    1398:	29 85       	ldd	r18, Y+9	; 0x09
    139a:	3a 85       	ldd	r19, Y+10	; 0x0a
    139c:	2e 5f       	subi	r18, 0xFE	; 254
    139e:	3f 4f       	sbci	r19, 0xFF	; 255
    13a0:	2d 5f       	subi	r18, 0xFD	; 253
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	f9 01       	movw	r30, r18
    13a6:	20 81       	ld	r18, Z
    13a8:	42 2f       	mov	r20, r18
    13aa:	44 0f       	add	r20, r20
    13ac:	44 0f       	add	r20, r20
    13ae:	44 0f       	add	r20, r20
    13b0:	29 85       	ldd	r18, Y+9	; 0x09
    13b2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b4:	2e 5f       	subi	r18, 0xFE	; 254
    13b6:	3f 4f       	sbci	r19, 0xFF	; 255
    13b8:	2e 5f       	subi	r18, 0xFE	; 254
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	f9 01       	movw	r30, r18
    13be:	20 81       	ld	r18, Z
    13c0:	22 95       	swap	r18
    13c2:	26 95       	lsr	r18
    13c4:	27 70       	andi	r18, 0x07	; 7
    13c6:	24 0f       	add	r18, r20
    13c8:	fc 01       	movw	r30, r24
    13ca:	20 83       	st	Z, r18
    13cc:	82 ef       	ldi	r24, 0xF2	; 242
    13ce:	90 e0       	ldi	r25, 0x00	; 0
    13d0:	29 85       	ldd	r18, Y+9	; 0x09
    13d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d4:	2e 5f       	subi	r18, 0xFE	; 254
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	2e 5f       	subi	r18, 0xFE	; 254
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	f9 01       	movw	r30, r18
    13de:	20 81       	ld	r18, Z
    13e0:	42 2f       	mov	r20, r18
    13e2:	44 0f       	add	r20, r20
    13e4:	44 0f       	add	r20, r20
    13e6:	44 0f       	add	r20, r20
    13e8:	29 85       	ldd	r18, Y+9	; 0x09
    13ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    13ec:	2e 5f       	subi	r18, 0xFE	; 254
    13ee:	3f 4f       	sbci	r19, 0xFF	; 255
    13f0:	2f 5f       	subi	r18, 0xFF	; 255
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	f9 01       	movw	r30, r18
    13f6:	20 81       	ld	r18, Z
    13f8:	22 95       	swap	r18
    13fa:	26 95       	lsr	r18
    13fc:	27 70       	andi	r18, 0x07	; 7
    13fe:	24 0f       	add	r18, r20
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
    1404:	81 ef       	ldi	r24, 0xF1	; 241
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	29 85       	ldd	r18, Y+9	; 0x09
    140a:	3a 85       	ldd	r19, Y+10	; 0x0a
    140c:	2e 5f       	subi	r18, 0xFE	; 254
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	2f 5f       	subi	r18, 0xFF	; 255
    1412:	3f 4f       	sbci	r19, 0xFF	; 255
    1414:	f9 01       	movw	r30, r18
    1416:	20 81       	ld	r18, Z
    1418:	42 2f       	mov	r20, r18
    141a:	44 0f       	add	r20, r20
    141c:	44 0f       	add	r20, r20
    141e:	44 0f       	add	r20, r20
    1420:	29 85       	ldd	r18, Y+9	; 0x09
    1422:	3a 85       	ldd	r19, Y+10	; 0x0a
    1424:	2e 5f       	subi	r18, 0xFE	; 254
    1426:	3f 4f       	sbci	r19, 0xFF	; 255
    1428:	f9 01       	movw	r30, r18
    142a:	20 81       	ld	r18, Z
    142c:	22 95       	swap	r18
    142e:	26 95       	lsr	r18
    1430:	27 70       	andi	r18, 0x07	; 7
    1432:	24 0f       	add	r18, r20
    1434:	fc 01       	movw	r30, r24
    1436:	20 83       	st	Z, r18
    1438:	80 ef       	ldi	r24, 0xF0	; 240
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	29 85       	ldd	r18, Y+9	; 0x09
    143e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1440:	2e 5f       	subi	r18, 0xFE	; 254
    1442:	3f 4f       	sbci	r19, 0xFF	; 255
    1444:	f9 01       	movw	r30, r18
    1446:	20 81       	ld	r18, Z
    1448:	22 0f       	add	r18, r18
    144a:	22 0f       	add	r18, r18
    144c:	22 0f       	add	r18, r18
    144e:	fc 01       	movw	r30, r24
    1450:	20 83       	st	Z, r18
    1452:	8f ee       	ldi	r24, 0xEF	; 239
    1454:	90 e0       	ldi	r25, 0x00	; 0
    1456:	2f ee       	ldi	r18, 0xEF	; 239
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	f9 01       	movw	r30, r18
    145c:	20 81       	ld	r18, Z
    145e:	20 61       	ori	r18, 0x10	; 16
    1460:	fc 01       	movw	r30, r24
    1462:	20 83       	st	Z, r18
    1464:	30 c0       	rjmp	.+96     	; 0x14c6 <__stack+0xbc7>
          else              { Can_set_std_id(cmd->id.std);}
    1466:	83 ef       	ldi	r24, 0xF3	; 243
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	29 85       	ldd	r18, Y+9	; 0x09
    146c:	3a 85       	ldd	r19, Y+10	; 0x0a
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	2f 5f       	subi	r18, 0xFF	; 255
    1474:	3f 4f       	sbci	r19, 0xFF	; 255
    1476:	f9 01       	movw	r30, r18
    1478:	20 81       	ld	r18, Z
    147a:	42 2f       	mov	r20, r18
    147c:	42 95       	swap	r20
    147e:	44 0f       	add	r20, r20
    1480:	40 7e       	andi	r20, 0xE0	; 224
    1482:	29 85       	ldd	r18, Y+9	; 0x09
    1484:	3a 85       	ldd	r19, Y+10	; 0x0a
    1486:	2e 5f       	subi	r18, 0xFE	; 254
    1488:	3f 4f       	sbci	r19, 0xFF	; 255
    148a:	f9 01       	movw	r30, r18
    148c:	20 81       	ld	r18, Z
    148e:	26 95       	lsr	r18
    1490:	26 95       	lsr	r18
    1492:	26 95       	lsr	r18
    1494:	24 0f       	add	r18, r20
    1496:	fc 01       	movw	r30, r24
    1498:	20 83       	st	Z, r18
    149a:	82 ef       	ldi	r24, 0xF2	; 242
    149c:	90 e0       	ldi	r25, 0x00	; 0
    149e:	29 85       	ldd	r18, Y+9	; 0x09
    14a0:	3a 85       	ldd	r19, Y+10	; 0x0a
    14a2:	2e 5f       	subi	r18, 0xFE	; 254
    14a4:	3f 4f       	sbci	r19, 0xFF	; 255
    14a6:	f9 01       	movw	r30, r18
    14a8:	20 81       	ld	r18, Z
    14aa:	22 95       	swap	r18
    14ac:	22 0f       	add	r18, r18
    14ae:	20 7e       	andi	r18, 0xE0	; 224
    14b0:	fc 01       	movw	r30, r24
    14b2:	20 83       	st	Z, r18
    14b4:	8f ee       	ldi	r24, 0xEF	; 239
    14b6:	90 e0       	ldi	r25, 0x00	; 0
    14b8:	2f ee       	ldi	r18, 0xEF	; 239
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	f9 01       	movw	r30, r18
    14be:	20 81       	ld	r18, Z
    14c0:	2f 7e       	andi	r18, 0xEF	; 239
    14c2:	fc 01       	movw	r30, r24
    14c4:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    14c6:	8f ef       	ldi	r24, 0xFF	; 255
    14c8:	9f ef       	ldi	r25, 0xFF	; 255
    14ca:	dc 01       	movw	r26, r24
    14cc:	8d 83       	std	Y+5, r24	; 0x05
    14ce:	9e 83       	std	Y+6, r25	; 0x06
    14d0:	af 83       	std	Y+7, r26	; 0x07
    14d2:	b8 87       	std	Y+8, r27	; 0x08
    14d4:	27 ef       	ldi	r18, 0xF7	; 247
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	ce 01       	movw	r24, r28
    14da:	05 96       	adiw	r24, 0x05	; 5
    14dc:	03 96       	adiw	r24, 0x03	; 3
    14de:	fc 01       	movw	r30, r24
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	44 0f       	add	r20, r20
    14e6:	44 0f       	add	r20, r20
    14e8:	44 0f       	add	r20, r20
    14ea:	ce 01       	movw	r24, r28
    14ec:	05 96       	adiw	r24, 0x05	; 5
    14ee:	02 96       	adiw	r24, 0x02	; 2
    14f0:	fc 01       	movw	r30, r24
    14f2:	80 81       	ld	r24, Z
    14f4:	82 95       	swap	r24
    14f6:	86 95       	lsr	r24
    14f8:	87 70       	andi	r24, 0x07	; 7
    14fa:	84 0f       	add	r24, r20
    14fc:	f9 01       	movw	r30, r18
    14fe:	80 83       	st	Z, r24
    1500:	26 ef       	ldi	r18, 0xF6	; 246
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	ce 01       	movw	r24, r28
    1506:	05 96       	adiw	r24, 0x05	; 5
    1508:	02 96       	adiw	r24, 0x02	; 2
    150a:	fc 01       	movw	r30, r24
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	44 0f       	add	r20, r20
    1512:	44 0f       	add	r20, r20
    1514:	44 0f       	add	r20, r20
    1516:	ce 01       	movw	r24, r28
    1518:	05 96       	adiw	r24, 0x05	; 5
    151a:	01 96       	adiw	r24, 0x01	; 1
    151c:	fc 01       	movw	r30, r24
    151e:	80 81       	ld	r24, Z
    1520:	82 95       	swap	r24
    1522:	86 95       	lsr	r24
    1524:	87 70       	andi	r24, 0x07	; 7
    1526:	84 0f       	add	r24, r20
    1528:	f9 01       	movw	r30, r18
    152a:	80 83       	st	Z, r24
    152c:	25 ef       	ldi	r18, 0xF5	; 245
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	ce 01       	movw	r24, r28
    1532:	05 96       	adiw	r24, 0x05	; 5
    1534:	01 96       	adiw	r24, 0x01	; 1
    1536:	fc 01       	movw	r30, r24
    1538:	80 81       	ld	r24, Z
    153a:	48 2f       	mov	r20, r24
    153c:	44 0f       	add	r20, r20
    153e:	44 0f       	add	r20, r20
    1540:	44 0f       	add	r20, r20
    1542:	ce 01       	movw	r24, r28
    1544:	05 96       	adiw	r24, 0x05	; 5
    1546:	fc 01       	movw	r30, r24
    1548:	80 81       	ld	r24, Z
    154a:	82 95       	swap	r24
    154c:	86 95       	lsr	r24
    154e:	87 70       	andi	r24, 0x07	; 7
    1550:	84 0f       	add	r24, r20
    1552:	f9 01       	movw	r30, r18
    1554:	80 83       	st	Z, r24
    1556:	84 ef       	ldi	r24, 0xF4	; 244
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	9e 01       	movw	r18, r28
    155c:	2b 5f       	subi	r18, 0xFB	; 251
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	f9 01       	movw	r30, r18
    1562:	20 81       	ld	r18, Z
    1564:	22 0f       	add	r18, r18
    1566:	22 0f       	add	r18, r18
    1568:	22 0f       	add	r18, r18
    156a:	fc 01       	movw	r30, r24
    156c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    156e:	8f ee       	ldi	r24, 0xEF	; 239
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	2f ee       	ldi	r18, 0xEF	; 239
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	f9 01       	movw	r30, r18
    1578:	40 81       	ld	r20, Z
    157a:	29 85       	ldd	r18, Y+9	; 0x09
    157c:	3a 85       	ldd	r19, Y+10	; 0x0a
    157e:	f9 01       	movw	r30, r18
    1580:	26 81       	ldd	r18, Z+6	; 0x06
    1582:	24 2b       	or	r18, r20
    1584:	fc 01       	movw	r30, r24
    1586:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1588:	89 85       	ldd	r24, Y+9	; 0x09
    158a:	9a 85       	ldd	r25, Y+10	; 0x0a
    158c:	21 e0       	ldi	r18, 0x01	; 1
    158e:	fc 01       	movw	r30, r24
    1590:	22 87       	std	Z+10, r18	; 0x0a
    1592:	84 ef       	ldi	r24, 0xF4	; 244
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	24 ef       	ldi	r18, 0xF4	; 244
    1598:	30 e0       	ldi	r19, 0x00	; 0
    159a:	f9 01       	movw	r30, r18
    159c:	20 81       	ld	r18, Z
    159e:	24 60       	ori	r18, 0x04	; 4
    15a0:	fc 01       	movw	r30, r24
    15a2:	20 83       	st	Z, r18
    15a4:	80 ef       	ldi	r24, 0xF0	; 240
    15a6:	90 e0       	ldi	r25, 0x00	; 0
    15a8:	20 ef       	ldi	r18, 0xF0	; 240
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	f9 01       	movw	r30, r18
    15ae:	20 81       	ld	r18, Z
    15b0:	24 60       	ori	r18, 0x04	; 4
    15b2:	fc 01       	movw	r30, r24
    15b4:	20 83       	st	Z, r18
          Can_clear_rplv();
    15b6:	8f ee       	ldi	r24, 0xEF	; 239
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	2f ee       	ldi	r18, 0xEF	; 239
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	f9 01       	movw	r30, r18
    15c0:	20 81       	ld	r18, Z
    15c2:	2f 7d       	andi	r18, 0xDF	; 223
    15c4:	fc 01       	movw	r30, r24
    15c6:	20 83       	st	Z, r18
          Can_set_idemsk();
    15c8:	84 ef       	ldi	r24, 0xF4	; 244
    15ca:	90 e0       	ldi	r25, 0x00	; 0
    15cc:	24 ef       	ldi	r18, 0xF4	; 244
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	f9 01       	movw	r30, r18
    15d2:	20 81       	ld	r18, Z
    15d4:	21 60       	ori	r18, 0x01	; 1
    15d6:	fc 01       	movw	r30, r24
    15d8:	20 83       	st	Z, r18
          Can_config_rx();       
    15da:	8f ee       	ldi	r24, 0xEF	; 239
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	2f ee       	ldi	r18, 0xEF	; 239
    15e0:	30 e0       	ldi	r19, 0x00	; 0
    15e2:	f9 01       	movw	r30, r18
    15e4:	20 81       	ld	r18, Z
    15e6:	2f 73       	andi	r18, 0x3F	; 63
    15e8:	fc 01       	movw	r30, r24
    15ea:	20 83       	st	Z, r18
    15ec:	8f ee       	ldi	r24, 0xEF	; 239
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	2f ee       	ldi	r18, 0xEF	; 239
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	f9 01       	movw	r30, r18
    15f6:	20 81       	ld	r18, Z
    15f8:	20 68       	ori	r18, 0x80	; 128
    15fa:	fc 01       	movw	r30, r24
    15fc:	20 83       	st	Z, r18
          break;
    15fe:	1c c2       	rjmp	.+1080   	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1600:	19 82       	std	Y+1, r1	; 0x01
    1602:	13 c0       	rjmp	.+38     	; 0x162a <__stack+0xd2b>
    1604:	8a ef       	ldi	r24, 0xFA	; 250
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	29 85       	ldd	r18, Y+9	; 0x09
    160a:	3a 85       	ldd	r19, Y+10	; 0x0a
    160c:	f9 01       	movw	r30, r18
    160e:	47 81       	ldd	r20, Z+7	; 0x07
    1610:	50 85       	ldd	r21, Z+8	; 0x08
    1612:	29 81       	ldd	r18, Y+1	; 0x01
    1614:	22 2f       	mov	r18, r18
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	24 0f       	add	r18, r20
    161a:	35 1f       	adc	r19, r21
    161c:	f9 01       	movw	r30, r18
    161e:	20 81       	ld	r18, Z
    1620:	fc 01       	movw	r30, r24
    1622:	20 83       	st	Z, r18
    1624:	89 81       	ldd	r24, Y+1	; 0x01
    1626:	8f 5f       	subi	r24, 0xFF	; 255
    1628:	89 83       	std	Y+1, r24	; 0x01
    162a:	89 85       	ldd	r24, Y+9	; 0x09
    162c:	9a 85       	ldd	r25, Y+10	; 0x0a
    162e:	fc 01       	movw	r30, r24
    1630:	96 81       	ldd	r25, Z+6	; 0x06
    1632:	89 81       	ldd	r24, Y+1	; 0x01
    1634:	89 17       	cp	r24, r25
    1636:	30 f3       	brcs	.-52     	; 0x1604 <__stack+0xd05>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1638:	1d 82       	std	Y+5, r1	; 0x05
    163a:	1e 82       	std	Y+6, r1	; 0x06
    163c:	1f 82       	std	Y+7, r1	; 0x07
    163e:	18 86       	std	Y+8, r1	; 0x08
    1640:	27 ef       	ldi	r18, 0xF7	; 247
    1642:	30 e0       	ldi	r19, 0x00	; 0
    1644:	ce 01       	movw	r24, r28
    1646:	05 96       	adiw	r24, 0x05	; 5
    1648:	03 96       	adiw	r24, 0x03	; 3
    164a:	fc 01       	movw	r30, r24
    164c:	80 81       	ld	r24, Z
    164e:	48 2f       	mov	r20, r24
    1650:	44 0f       	add	r20, r20
    1652:	44 0f       	add	r20, r20
    1654:	44 0f       	add	r20, r20
    1656:	ce 01       	movw	r24, r28
    1658:	05 96       	adiw	r24, 0x05	; 5
    165a:	02 96       	adiw	r24, 0x02	; 2
    165c:	fc 01       	movw	r30, r24
    165e:	80 81       	ld	r24, Z
    1660:	82 95       	swap	r24
    1662:	86 95       	lsr	r24
    1664:	87 70       	andi	r24, 0x07	; 7
    1666:	84 0f       	add	r24, r20
    1668:	f9 01       	movw	r30, r18
    166a:	80 83       	st	Z, r24
    166c:	26 ef       	ldi	r18, 0xF6	; 246
    166e:	30 e0       	ldi	r19, 0x00	; 0
    1670:	ce 01       	movw	r24, r28
    1672:	05 96       	adiw	r24, 0x05	; 5
    1674:	02 96       	adiw	r24, 0x02	; 2
    1676:	fc 01       	movw	r30, r24
    1678:	80 81       	ld	r24, Z
    167a:	48 2f       	mov	r20, r24
    167c:	44 0f       	add	r20, r20
    167e:	44 0f       	add	r20, r20
    1680:	44 0f       	add	r20, r20
    1682:	ce 01       	movw	r24, r28
    1684:	05 96       	adiw	r24, 0x05	; 5
    1686:	01 96       	adiw	r24, 0x01	; 1
    1688:	fc 01       	movw	r30, r24
    168a:	80 81       	ld	r24, Z
    168c:	82 95       	swap	r24
    168e:	86 95       	lsr	r24
    1690:	87 70       	andi	r24, 0x07	; 7
    1692:	84 0f       	add	r24, r20
    1694:	f9 01       	movw	r30, r18
    1696:	80 83       	st	Z, r24
    1698:	25 ef       	ldi	r18, 0xF5	; 245
    169a:	30 e0       	ldi	r19, 0x00	; 0
    169c:	ce 01       	movw	r24, r28
    169e:	05 96       	adiw	r24, 0x05	; 5
    16a0:	01 96       	adiw	r24, 0x01	; 1
    16a2:	fc 01       	movw	r30, r24
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	44 0f       	add	r20, r20
    16aa:	44 0f       	add	r20, r20
    16ac:	44 0f       	add	r20, r20
    16ae:	ce 01       	movw	r24, r28
    16b0:	05 96       	adiw	r24, 0x05	; 5
    16b2:	fc 01       	movw	r30, r24
    16b4:	80 81       	ld	r24, Z
    16b6:	82 95       	swap	r24
    16b8:	86 95       	lsr	r24
    16ba:	87 70       	andi	r24, 0x07	; 7
    16bc:	84 0f       	add	r24, r20
    16be:	f9 01       	movw	r30, r18
    16c0:	80 83       	st	Z, r24
    16c2:	84 ef       	ldi	r24, 0xF4	; 244
    16c4:	90 e0       	ldi	r25, 0x00	; 0
    16c6:	9e 01       	movw	r18, r28
    16c8:	2b 5f       	subi	r18, 0xFB	; 251
    16ca:	3f 4f       	sbci	r19, 0xFF	; 255
    16cc:	f9 01       	movw	r30, r18
    16ce:	20 81       	ld	r18, Z
    16d0:	22 0f       	add	r18, r18
    16d2:	22 0f       	add	r18, r18
    16d4:	22 0f       	add	r18, r18
    16d6:	fc 01       	movw	r30, r24
    16d8:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    16da:	8f ee       	ldi	r24, 0xEF	; 239
    16dc:	90 e0       	ldi	r25, 0x00	; 0
    16de:	2f ee       	ldi	r18, 0xEF	; 239
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	f9 01       	movw	r30, r18
    16e4:	40 81       	ld	r20, Z
    16e6:	29 85       	ldd	r18, Y+9	; 0x09
    16e8:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ea:	f9 01       	movw	r30, r18
    16ec:	26 81       	ldd	r18, Z+6	; 0x06
    16ee:	24 2b       	or	r18, r20
    16f0:	fc 01       	movw	r30, r24
    16f2:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	21 e0       	ldi	r18, 0x01	; 1
    16fa:	fc 01       	movw	r30, r24
    16fc:	22 87       	std	Z+10, r18	; 0x0a
    16fe:	84 ef       	ldi	r24, 0xF4	; 244
    1700:	90 e0       	ldi	r25, 0x00	; 0
    1702:	24 ef       	ldi	r18, 0xF4	; 244
    1704:	30 e0       	ldi	r19, 0x00	; 0
    1706:	f9 01       	movw	r30, r18
    1708:	20 81       	ld	r18, Z
    170a:	24 60       	ori	r18, 0x04	; 4
    170c:	fc 01       	movw	r30, r24
    170e:	20 83       	st	Z, r18
    1710:	80 ef       	ldi	r24, 0xF0	; 240
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	20 ef       	ldi	r18, 0xF0	; 240
    1716:	30 e0       	ldi	r19, 0x00	; 0
    1718:	f9 01       	movw	r30, r18
    171a:	20 81       	ld	r18, Z
    171c:	24 60       	ori	r18, 0x04	; 4
    171e:	fc 01       	movw	r30, r24
    1720:	20 83       	st	Z, r18
          Can_set_rplv();
    1722:	8f ee       	ldi	r24, 0xEF	; 239
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	2f ee       	ldi	r18, 0xEF	; 239
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	f9 01       	movw	r30, r18
    172c:	20 81       	ld	r18, Z
    172e:	20 62       	ori	r18, 0x20	; 32
    1730:	fc 01       	movw	r30, r24
    1732:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1734:	84 ef       	ldi	r24, 0xF4	; 244
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	24 ef       	ldi	r18, 0xF4	; 244
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	f9 01       	movw	r30, r18
    173e:	20 81       	ld	r18, Z
    1740:	2e 7f       	andi	r18, 0xFE	; 254
    1742:	fc 01       	movw	r30, r24
    1744:	20 83       	st	Z, r18
          Can_config_rx();       
    1746:	8f ee       	ldi	r24, 0xEF	; 239
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	2f ee       	ldi	r18, 0xEF	; 239
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	f9 01       	movw	r30, r18
    1750:	20 81       	ld	r18, Z
    1752:	2f 73       	andi	r18, 0x3F	; 63
    1754:	fc 01       	movw	r30, r24
    1756:	20 83       	st	Z, r18
    1758:	8f ee       	ldi	r24, 0xEF	; 239
    175a:	90 e0       	ldi	r25, 0x00	; 0
    175c:	2f ee       	ldi	r18, 0xEF	; 239
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	f9 01       	movw	r30, r18
    1762:	20 81       	ld	r18, Z
    1764:	20 68       	ori	r18, 0x80	; 128
    1766:	fc 01       	movw	r30, r24
    1768:	20 83       	st	Z, r18
          break;
    176a:	66 c1       	rjmp	.+716    	; 0x1a38 <__stack+0x1139>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    176c:	89 85       	ldd	r24, Y+9	; 0x09
    176e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1770:	fc 01       	movw	r30, r24
    1772:	83 85       	ldd	r24, Z+11	; 0x0b
    1774:	88 23       	and	r24, r24
    1776:	09 f4       	brne	.+2      	; 0x177a <__stack+0xe7b>
    1778:	69 c0       	rjmp	.+210    	; 0x184c <__stack+0xf4d>
    177a:	83 ef       	ldi	r24, 0xF3	; 243
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	29 85       	ldd	r18, Y+9	; 0x09
    1780:	3a 85       	ldd	r19, Y+10	; 0x0a
    1782:	2e 5f       	subi	r18, 0xFE	; 254
    1784:	3f 4f       	sbci	r19, 0xFF	; 255
    1786:	2d 5f       	subi	r18, 0xFD	; 253
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	f9 01       	movw	r30, r18
    178c:	20 81       	ld	r18, Z
    178e:	42 2f       	mov	r20, r18
    1790:	44 0f       	add	r20, r20
    1792:	44 0f       	add	r20, r20
    1794:	44 0f       	add	r20, r20
    1796:	29 85       	ldd	r18, Y+9	; 0x09
    1798:	3a 85       	ldd	r19, Y+10	; 0x0a
    179a:	2e 5f       	subi	r18, 0xFE	; 254
    179c:	3f 4f       	sbci	r19, 0xFF	; 255
    179e:	2e 5f       	subi	r18, 0xFE	; 254
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	f9 01       	movw	r30, r18
    17a4:	20 81       	ld	r18, Z
    17a6:	22 95       	swap	r18
    17a8:	26 95       	lsr	r18
    17aa:	27 70       	andi	r18, 0x07	; 7
    17ac:	24 0f       	add	r18, r20
    17ae:	fc 01       	movw	r30, r24
    17b0:	20 83       	st	Z, r18
    17b2:	82 ef       	ldi	r24, 0xF2	; 242
    17b4:	90 e0       	ldi	r25, 0x00	; 0
    17b6:	29 85       	ldd	r18, Y+9	; 0x09
    17b8:	3a 85       	ldd	r19, Y+10	; 0x0a
    17ba:	2e 5f       	subi	r18, 0xFE	; 254
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	2e 5f       	subi	r18, 0xFE	; 254
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	f9 01       	movw	r30, r18
    17c4:	20 81       	ld	r18, Z
    17c6:	42 2f       	mov	r20, r18
    17c8:	44 0f       	add	r20, r20
    17ca:	44 0f       	add	r20, r20
    17cc:	44 0f       	add	r20, r20
    17ce:	29 85       	ldd	r18, Y+9	; 0x09
    17d0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d2:	2e 5f       	subi	r18, 0xFE	; 254
    17d4:	3f 4f       	sbci	r19, 0xFF	; 255
    17d6:	2f 5f       	subi	r18, 0xFF	; 255
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	f9 01       	movw	r30, r18
    17dc:	20 81       	ld	r18, Z
    17de:	22 95       	swap	r18
    17e0:	26 95       	lsr	r18
    17e2:	27 70       	andi	r18, 0x07	; 7
    17e4:	24 0f       	add	r18, r20
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
    17ea:	81 ef       	ldi	r24, 0xF1	; 241
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	29 85       	ldd	r18, Y+9	; 0x09
    17f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17f2:	2e 5f       	subi	r18, 0xFE	; 254
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	2f 5f       	subi	r18, 0xFF	; 255
    17f8:	3f 4f       	sbci	r19, 0xFF	; 255
    17fa:	f9 01       	movw	r30, r18
    17fc:	20 81       	ld	r18, Z
    17fe:	42 2f       	mov	r20, r18
    1800:	44 0f       	add	r20, r20
    1802:	44 0f       	add	r20, r20
    1804:	44 0f       	add	r20, r20
    1806:	29 85       	ldd	r18, Y+9	; 0x09
    1808:	3a 85       	ldd	r19, Y+10	; 0x0a
    180a:	2e 5f       	subi	r18, 0xFE	; 254
    180c:	3f 4f       	sbci	r19, 0xFF	; 255
    180e:	f9 01       	movw	r30, r18
    1810:	20 81       	ld	r18, Z
    1812:	22 95       	swap	r18
    1814:	26 95       	lsr	r18
    1816:	27 70       	andi	r18, 0x07	; 7
    1818:	24 0f       	add	r18, r20
    181a:	fc 01       	movw	r30, r24
    181c:	20 83       	st	Z, r18
    181e:	80 ef       	ldi	r24, 0xF0	; 240
    1820:	90 e0       	ldi	r25, 0x00	; 0
    1822:	29 85       	ldd	r18, Y+9	; 0x09
    1824:	3a 85       	ldd	r19, Y+10	; 0x0a
    1826:	2e 5f       	subi	r18, 0xFE	; 254
    1828:	3f 4f       	sbci	r19, 0xFF	; 255
    182a:	f9 01       	movw	r30, r18
    182c:	20 81       	ld	r18, Z
    182e:	22 0f       	add	r18, r18
    1830:	22 0f       	add	r18, r18
    1832:	22 0f       	add	r18, r18
    1834:	fc 01       	movw	r30, r24
    1836:	20 83       	st	Z, r18
    1838:	8f ee       	ldi	r24, 0xEF	; 239
    183a:	90 e0       	ldi	r25, 0x00	; 0
    183c:	2f ee       	ldi	r18, 0xEF	; 239
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	f9 01       	movw	r30, r18
    1842:	20 81       	ld	r18, Z
    1844:	20 61       	ori	r18, 0x10	; 16
    1846:	fc 01       	movw	r30, r24
    1848:	20 83       	st	Z, r18
    184a:	30 c0       	rjmp	.+96     	; 0x18ac <__stack+0xfad>
          else              { Can_set_std_id(cmd->id.std);}
    184c:	83 ef       	ldi	r24, 0xF3	; 243
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	29 85       	ldd	r18, Y+9	; 0x09
    1852:	3a 85       	ldd	r19, Y+10	; 0x0a
    1854:	2e 5f       	subi	r18, 0xFE	; 254
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	2f 5f       	subi	r18, 0xFF	; 255
    185a:	3f 4f       	sbci	r19, 0xFF	; 255
    185c:	f9 01       	movw	r30, r18
    185e:	20 81       	ld	r18, Z
    1860:	42 2f       	mov	r20, r18
    1862:	42 95       	swap	r20
    1864:	44 0f       	add	r20, r20
    1866:	40 7e       	andi	r20, 0xE0	; 224
    1868:	29 85       	ldd	r18, Y+9	; 0x09
    186a:	3a 85       	ldd	r19, Y+10	; 0x0a
    186c:	2e 5f       	subi	r18, 0xFE	; 254
    186e:	3f 4f       	sbci	r19, 0xFF	; 255
    1870:	f9 01       	movw	r30, r18
    1872:	20 81       	ld	r18, Z
    1874:	26 95       	lsr	r18
    1876:	26 95       	lsr	r18
    1878:	26 95       	lsr	r18
    187a:	24 0f       	add	r18, r20
    187c:	fc 01       	movw	r30, r24
    187e:	20 83       	st	Z, r18
    1880:	82 ef       	ldi	r24, 0xF2	; 242
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	29 85       	ldd	r18, Y+9	; 0x09
    1886:	3a 85       	ldd	r19, Y+10	; 0x0a
    1888:	2e 5f       	subi	r18, 0xFE	; 254
    188a:	3f 4f       	sbci	r19, 0xFF	; 255
    188c:	f9 01       	movw	r30, r18
    188e:	20 81       	ld	r18, Z
    1890:	22 95       	swap	r18
    1892:	22 0f       	add	r18, r18
    1894:	20 7e       	andi	r18, 0xE0	; 224
    1896:	fc 01       	movw	r30, r24
    1898:	20 83       	st	Z, r18
    189a:	8f ee       	ldi	r24, 0xEF	; 239
    189c:	90 e0       	ldi	r25, 0x00	; 0
    189e:	2f ee       	ldi	r18, 0xEF	; 239
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	f9 01       	movw	r30, r18
    18a4:	20 81       	ld	r18, Z
    18a6:	2f 7e       	andi	r18, 0xEF	; 239
    18a8:	fc 01       	movw	r30, r24
    18aa:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    18ac:	19 82       	std	Y+1, r1	; 0x01
    18ae:	13 c0       	rjmp	.+38     	; 0x18d6 <__stack+0xfd7>
    18b0:	8a ef       	ldi	r24, 0xFA	; 250
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	29 85       	ldd	r18, Y+9	; 0x09
    18b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    18b8:	f9 01       	movw	r30, r18
    18ba:	47 81       	ldd	r20, Z+7	; 0x07
    18bc:	50 85       	ldd	r21, Z+8	; 0x08
    18be:	29 81       	ldd	r18, Y+1	; 0x01
    18c0:	22 2f       	mov	r18, r18
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	24 0f       	add	r18, r20
    18c6:	35 1f       	adc	r19, r21
    18c8:	f9 01       	movw	r30, r18
    18ca:	20 81       	ld	r18, Z
    18cc:	fc 01       	movw	r30, r24
    18ce:	20 83       	st	Z, r18
    18d0:	89 81       	ldd	r24, Y+1	; 0x01
    18d2:	8f 5f       	subi	r24, 0xFF	; 255
    18d4:	89 83       	std	Y+1, r24	; 0x01
    18d6:	89 85       	ldd	r24, Y+9	; 0x09
    18d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    18da:	fc 01       	movw	r30, r24
    18dc:	96 81       	ldd	r25, Z+6	; 0x06
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	89 17       	cp	r24, r25
    18e2:	30 f3       	brcs	.-52     	; 0x18b0 <__stack+0xfb1>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    18e4:	8f ef       	ldi	r24, 0xFF	; 255
    18e6:	9f ef       	ldi	r25, 0xFF	; 255
    18e8:	dc 01       	movw	r26, r24
    18ea:	8d 83       	std	Y+5, r24	; 0x05
    18ec:	9e 83       	std	Y+6, r25	; 0x06
    18ee:	af 83       	std	Y+7, r26	; 0x07
    18f0:	b8 87       	std	Y+8, r27	; 0x08
    18f2:	27 ef       	ldi	r18, 0xF7	; 247
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	ce 01       	movw	r24, r28
    18f8:	05 96       	adiw	r24, 0x05	; 5
    18fa:	03 96       	adiw	r24, 0x03	; 3
    18fc:	fc 01       	movw	r30, r24
    18fe:	80 81       	ld	r24, Z
    1900:	48 2f       	mov	r20, r24
    1902:	44 0f       	add	r20, r20
    1904:	44 0f       	add	r20, r20
    1906:	44 0f       	add	r20, r20
    1908:	ce 01       	movw	r24, r28
    190a:	05 96       	adiw	r24, 0x05	; 5
    190c:	02 96       	adiw	r24, 0x02	; 2
    190e:	fc 01       	movw	r30, r24
    1910:	80 81       	ld	r24, Z
    1912:	82 95       	swap	r24
    1914:	86 95       	lsr	r24
    1916:	87 70       	andi	r24, 0x07	; 7
    1918:	84 0f       	add	r24, r20
    191a:	f9 01       	movw	r30, r18
    191c:	80 83       	st	Z, r24
    191e:	26 ef       	ldi	r18, 0xF6	; 246
    1920:	30 e0       	ldi	r19, 0x00	; 0
    1922:	ce 01       	movw	r24, r28
    1924:	05 96       	adiw	r24, 0x05	; 5
    1926:	02 96       	adiw	r24, 0x02	; 2
    1928:	fc 01       	movw	r30, r24
    192a:	80 81       	ld	r24, Z
    192c:	48 2f       	mov	r20, r24
    192e:	44 0f       	add	r20, r20
    1930:	44 0f       	add	r20, r20
    1932:	44 0f       	add	r20, r20
    1934:	ce 01       	movw	r24, r28
    1936:	05 96       	adiw	r24, 0x05	; 5
    1938:	01 96       	adiw	r24, 0x01	; 1
    193a:	fc 01       	movw	r30, r24
    193c:	80 81       	ld	r24, Z
    193e:	82 95       	swap	r24
    1940:	86 95       	lsr	r24
    1942:	87 70       	andi	r24, 0x07	; 7
    1944:	84 0f       	add	r24, r20
    1946:	f9 01       	movw	r30, r18
    1948:	80 83       	st	Z, r24
    194a:	25 ef       	ldi	r18, 0xF5	; 245
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	ce 01       	movw	r24, r28
    1950:	05 96       	adiw	r24, 0x05	; 5
    1952:	01 96       	adiw	r24, 0x01	; 1
    1954:	fc 01       	movw	r30, r24
    1956:	80 81       	ld	r24, Z
    1958:	48 2f       	mov	r20, r24
    195a:	44 0f       	add	r20, r20
    195c:	44 0f       	add	r20, r20
    195e:	44 0f       	add	r20, r20
    1960:	ce 01       	movw	r24, r28
    1962:	05 96       	adiw	r24, 0x05	; 5
    1964:	fc 01       	movw	r30, r24
    1966:	80 81       	ld	r24, Z
    1968:	82 95       	swap	r24
    196a:	86 95       	lsr	r24
    196c:	87 70       	andi	r24, 0x07	; 7
    196e:	84 0f       	add	r24, r20
    1970:	f9 01       	movw	r30, r18
    1972:	80 83       	st	Z, r24
    1974:	84 ef       	ldi	r24, 0xF4	; 244
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	9e 01       	movw	r18, r28
    197a:	2b 5f       	subi	r18, 0xFB	; 251
    197c:	3f 4f       	sbci	r19, 0xFF	; 255
    197e:	f9 01       	movw	r30, r18
    1980:	20 81       	ld	r18, Z
    1982:	22 0f       	add	r18, r18
    1984:	22 0f       	add	r18, r18
    1986:	22 0f       	add	r18, r18
    1988:	fc 01       	movw	r30, r24
    198a:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    198c:	8f ee       	ldi	r24, 0xEF	; 239
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	2f ee       	ldi	r18, 0xEF	; 239
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	f9 01       	movw	r30, r18
    1996:	40 81       	ld	r20, Z
    1998:	29 85       	ldd	r18, Y+9	; 0x09
    199a:	3a 85       	ldd	r19, Y+10	; 0x0a
    199c:	f9 01       	movw	r30, r18
    199e:	26 81       	ldd	r18, Z+6	; 0x06
    19a0:	24 2b       	or	r18, r20
    19a2:	fc 01       	movw	r30, r24
    19a4:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    19a6:	89 85       	ldd	r24, Y+9	; 0x09
    19a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19aa:	21 e0       	ldi	r18, 0x01	; 1
    19ac:	fc 01       	movw	r30, r24
    19ae:	22 87       	std	Z+10, r18	; 0x0a
    19b0:	84 ef       	ldi	r24, 0xF4	; 244
    19b2:	90 e0       	ldi	r25, 0x00	; 0
    19b4:	24 ef       	ldi	r18, 0xF4	; 244
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	f9 01       	movw	r30, r18
    19ba:	20 81       	ld	r18, Z
    19bc:	24 60       	ori	r18, 0x04	; 4
    19be:	fc 01       	movw	r30, r24
    19c0:	20 83       	st	Z, r18
    19c2:	80 ef       	ldi	r24, 0xF0	; 240
    19c4:	90 e0       	ldi	r25, 0x00	; 0
    19c6:	20 ef       	ldi	r18, 0xF0	; 240
    19c8:	30 e0       	ldi	r19, 0x00	; 0
    19ca:	f9 01       	movw	r30, r18
    19cc:	20 81       	ld	r18, Z
    19ce:	24 60       	ori	r18, 0x04	; 4
    19d0:	fc 01       	movw	r30, r24
    19d2:	20 83       	st	Z, r18
          Can_set_rplv();
    19d4:	8f ee       	ldi	r24, 0xEF	; 239
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	2f ee       	ldi	r18, 0xEF	; 239
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	f9 01       	movw	r30, r18
    19de:	20 81       	ld	r18, Z
    19e0:	20 62       	ori	r18, 0x20	; 32
    19e2:	fc 01       	movw	r30, r24
    19e4:	20 83       	st	Z, r18
          Can_set_idemsk();
    19e6:	84 ef       	ldi	r24, 0xF4	; 244
    19e8:	90 e0       	ldi	r25, 0x00	; 0
    19ea:	24 ef       	ldi	r18, 0xF4	; 244
    19ec:	30 e0       	ldi	r19, 0x00	; 0
    19ee:	f9 01       	movw	r30, r18
    19f0:	20 81       	ld	r18, Z
    19f2:	21 60       	ori	r18, 0x01	; 1
    19f4:	fc 01       	movw	r30, r24
    19f6:	20 83       	st	Z, r18
          Can_config_rx();       
    19f8:	8f ee       	ldi	r24, 0xEF	; 239
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	2f ee       	ldi	r18, 0xEF	; 239
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	f9 01       	movw	r30, r18
    1a02:	20 81       	ld	r18, Z
    1a04:	2f 73       	andi	r18, 0x3F	; 63
    1a06:	fc 01       	movw	r30, r24
    1a08:	20 83       	st	Z, r18
    1a0a:	8f ee       	ldi	r24, 0xEF	; 239
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	2f ee       	ldi	r18, 0xEF	; 239
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	f9 01       	movw	r30, r18
    1a14:	20 81       	ld	r18, Z
    1a16:	20 68       	ori	r18, 0x80	; 128
    1a18:	fc 01       	movw	r30, r24
    1a1a:	20 83       	st	Z, r18
          break;
    1a1c:	0d c0       	rjmp	.+26     	; 0x1a38 <__stack+0x1139>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    1a1e:	89 85       	ldd	r24, Y+9	; 0x09
    1a20:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a22:	fc 01       	movw	r30, r24
    1a24:	11 86       	std	Z+9, r1	; 0x09
          break;
    1a26:	00 00       	nop
    1a28:	07 c0       	rjmp	.+14     	; 0x1a38 <__stack+0x1139>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	2f e1       	ldi	r18, 0x1F	; 31
    1a30:	fc 01       	movw	r30, r24
    1a32:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	01 c0       	rjmp	.+2      	; 0x1a3a <__stack+0x113b>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1a38:	80 e0       	ldi	r24, 0x00	; 0
}
    1a3a:	2a 96       	adiw	r28, 0x0a	; 10
    1a3c:	0f b6       	in	r0, 0x3f	; 63
    1a3e:	f8 94       	cli
    1a40:	de bf       	out	0x3e, r29	; 62
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	cd bf       	out	0x3d, r28	; 61
    1a46:	df 91       	pop	r29
    1a48:	cf 91       	pop	r28
    1a4a:	08 95       	ret

00001a4c <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1a4c:	cf 93       	push	r28
    1a4e:	df 93       	push	r29
    1a50:	00 d0       	rcall	.+0      	; 0x1a52 <can_get_status+0x6>
    1a52:	00 d0       	rcall	.+0      	; 0x1a54 <can_get_status+0x8>
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	9c 83       	std	Y+4, r25	; 0x04
    1a5a:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1a5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1a60:	fc 01       	movw	r30, r24
    1a62:	81 85       	ldd	r24, Z+9	; 0x09
    1a64:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	88 23       	and	r24, r24
    1a6a:	31 f0       	breq	.+12     	; 0x1a78 <can_get_status+0x2c>
    1a6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a6e:	8f 31       	cpi	r24, 0x1F	; 31
    1a70:	19 f0       	breq	.+6      	; 0x1a78 <can_get_status+0x2c>
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	8f 3f       	cpi	r24, 0xFF	; 255
    1a76:	11 f4       	brne	.+4      	; 0x1a7c <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1a78:	82 e0       	ldi	r24, 0x02	; 2
    1a7a:	14 c1       	rjmp	.+552    	; 0x1ca4 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    1a7c:	8d ee       	ldi	r24, 0xED	; 237
    1a7e:	90 e0       	ldi	r25, 0x00	; 0
    1a80:	2b 81       	ldd	r18, Y+3	; 0x03
    1a82:	3c 81       	ldd	r19, Y+4	; 0x04
    1a84:	f9 01       	movw	r30, r18
    1a86:	20 81       	ld	r18, Z
    1a88:	22 95       	swap	r18
    1a8a:	20 7f       	andi	r18, 0xF0	; 240
    1a8c:	fc 01       	movw	r30, r24
    1a8e:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1a90:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <can_get_mob_status>
    1a94:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1a96:	8a 81       	ldd	r24, Y+2	; 0x02
    1a98:	88 2f       	mov	r24, r24
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	80 32       	cpi	r24, 0x20	; 32
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	89 f0       	breq	.+34     	; 0x1ac4 <can_get_status+0x78>
    1aa2:	81 32       	cpi	r24, 0x21	; 33
    1aa4:	91 05       	cpc	r25, r1
    1aa6:	1c f4       	brge	.+6      	; 0x1aae <can_get_status+0x62>
    1aa8:	89 2b       	or	r24, r25
    1aaa:	49 f0       	breq	.+18     	; 0x1abe <can_get_status+0x72>
    1aac:	e5 c0       	rjmp	.+458    	; 0x1c78 <can_get_status+0x22c>
    1aae:	80 34       	cpi	r24, 0x40	; 64
    1ab0:	91 05       	cpc	r25, r1
    1ab2:	09 f4       	brne	.+2      	; 0x1ab6 <can_get_status+0x6a>
    1ab4:	cd c0       	rjmp	.+410    	; 0x1c50 <can_get_status+0x204>
    1ab6:	80 3a       	cpi	r24, 0xA0	; 160
    1ab8:	91 05       	cpc	r25, r1
    1aba:	21 f0       	breq	.+8      	; 0x1ac4 <can_get_status+0x78>
    1abc:	dd c0       	rjmp	.+442    	; 0x1c78 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	89 83       	std	Y+1, r24	; 0x01
            break;
    1ac2:	ef c0       	rjmp	.+478    	; 0x1ca2 <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1ac4:	8f ee       	ldi	r24, 0xEF	; 239
    1ac6:	90 e0       	ldi	r25, 0x00	; 0
    1ac8:	fc 01       	movw	r30, r24
    1aca:	80 81       	ld	r24, Z
    1acc:	28 2f       	mov	r18, r24
    1ace:	2f 70       	andi	r18, 0x0F	; 15
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad4:	fc 01       	movw	r30, r24
    1ad6:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    1ada:	9c 81       	ldd	r25, Y+4	; 0x04
    1adc:	fc 01       	movw	r30, r24
    1ade:	87 81       	ldd	r24, Z+7	; 0x07
    1ae0:	90 85       	ldd	r25, Z+8	; 0x08
    1ae2:	0e 94 0b 02 	call	0x416	; 0x416 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1ae6:	80 ef       	ldi	r24, 0xF0	; 240
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	fc 01       	movw	r30, r24
    1aec:	80 81       	ld	r24, Z
    1aee:	88 2f       	mov	r24, r24
    1af0:	90 e0       	ldi	r25, 0x00	; 0
    1af2:	84 70       	andi	r24, 0x04	; 4
    1af4:	99 27       	eor	r25, r25
    1af6:	95 95       	asr	r25
    1af8:	87 95       	ror	r24
    1afa:	95 95       	asr	r25
    1afc:	87 95       	ror	r24
    1afe:	21 e0       	ldi	r18, 0x01	; 1
    1b00:	89 2b       	or	r24, r25
    1b02:	09 f4       	brne	.+2      	; 0x1b06 <can_get_status+0xba>
    1b04:	20 e0       	ldi	r18, 0x00	; 0
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	fc 01       	movw	r30, r24
    1b0c:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1b0e:	8f ee       	ldi	r24, 0xEF	; 239
    1b10:	90 e0       	ldi	r25, 0x00	; 0
    1b12:	fc 01       	movw	r30, r24
    1b14:	80 81       	ld	r24, Z
    1b16:	88 2f       	mov	r24, r24
    1b18:	90 e0       	ldi	r25, 0x00	; 0
    1b1a:	80 71       	andi	r24, 0x10	; 16
    1b1c:	99 27       	eor	r25, r25
    1b1e:	95 95       	asr	r25
    1b20:	87 95       	ror	r24
    1b22:	95 95       	asr	r25
    1b24:	87 95       	ror	r24
    1b26:	95 95       	asr	r25
    1b28:	87 95       	ror	r24
    1b2a:	95 95       	asr	r25
    1b2c:	87 95       	ror	r24
    1b2e:	89 2b       	or	r24, r25
    1b30:	09 f4       	brne	.+2      	; 0x1b34 <can_get_status+0xe8>
    1b32:	54 c0       	rjmp	.+168    	; 0x1bdc <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1b34:	8b 81       	ldd	r24, Y+3	; 0x03
    1b36:	9c 81       	ldd	r25, Y+4	; 0x04
    1b38:	21 e0       	ldi	r18, 0x01	; 1
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	9c 81       	ldd	r25, Y+4	; 0x04
    1b42:	02 96       	adiw	r24, 0x02	; 2
    1b44:	03 96       	adiw	r24, 0x03	; 3
    1b46:	23 ef       	ldi	r18, 0xF3	; 243
    1b48:	30 e0       	ldi	r19, 0x00	; 0
    1b4a:	f9 01       	movw	r30, r18
    1b4c:	20 81       	ld	r18, Z
    1b4e:	26 95       	lsr	r18
    1b50:	26 95       	lsr	r18
    1b52:	26 95       	lsr	r18
    1b54:	fc 01       	movw	r30, r24
    1b56:	20 83       	st	Z, r18
    1b58:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5c:	02 96       	adiw	r24, 0x02	; 2
    1b5e:	02 96       	adiw	r24, 0x02	; 2
    1b60:	22 ef       	ldi	r18, 0xF2	; 242
    1b62:	30 e0       	ldi	r19, 0x00	; 0
    1b64:	f9 01       	movw	r30, r18
    1b66:	20 81       	ld	r18, Z
    1b68:	42 2f       	mov	r20, r18
    1b6a:	46 95       	lsr	r20
    1b6c:	46 95       	lsr	r20
    1b6e:	46 95       	lsr	r20
    1b70:	23 ef       	ldi	r18, 0xF3	; 243
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	f9 01       	movw	r30, r18
    1b76:	20 81       	ld	r18, Z
    1b78:	22 95       	swap	r18
    1b7a:	22 0f       	add	r18, r18
    1b7c:	20 7e       	andi	r18, 0xE0	; 224
    1b7e:	24 0f       	add	r18, r20
    1b80:	fc 01       	movw	r30, r24
    1b82:	20 83       	st	Z, r18
    1b84:	8b 81       	ldd	r24, Y+3	; 0x03
    1b86:	9c 81       	ldd	r25, Y+4	; 0x04
    1b88:	02 96       	adiw	r24, 0x02	; 2
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	21 ef       	ldi	r18, 0xF1	; 241
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	f9 01       	movw	r30, r18
    1b92:	20 81       	ld	r18, Z
    1b94:	42 2f       	mov	r20, r18
    1b96:	46 95       	lsr	r20
    1b98:	46 95       	lsr	r20
    1b9a:	46 95       	lsr	r20
    1b9c:	22 ef       	ldi	r18, 0xF2	; 242
    1b9e:	30 e0       	ldi	r19, 0x00	; 0
    1ba0:	f9 01       	movw	r30, r18
    1ba2:	20 81       	ld	r18, Z
    1ba4:	22 95       	swap	r18
    1ba6:	22 0f       	add	r18, r18
    1ba8:	20 7e       	andi	r18, 0xE0	; 224
    1baa:	24 0f       	add	r18, r20
    1bac:	fc 01       	movw	r30, r24
    1bae:	20 83       	st	Z, r18
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	02 96       	adiw	r24, 0x02	; 2
    1bb6:	20 ef       	ldi	r18, 0xF0	; 240
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	f9 01       	movw	r30, r18
    1bbc:	20 81       	ld	r18, Z
    1bbe:	42 2f       	mov	r20, r18
    1bc0:	46 95       	lsr	r20
    1bc2:	46 95       	lsr	r20
    1bc4:	46 95       	lsr	r20
    1bc6:	21 ef       	ldi	r18, 0xF1	; 241
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	f9 01       	movw	r30, r18
    1bcc:	20 81       	ld	r18, Z
    1bce:	22 95       	swap	r18
    1bd0:	22 0f       	add	r18, r18
    1bd2:	20 7e       	andi	r18, 0xE0	; 224
    1bd4:	24 0f       	add	r18, r20
    1bd6:	fc 01       	movw	r30, r24
    1bd8:	20 83       	st	Z, r18
    1bda:	26 c0       	rjmp	.+76     	; 0x1c28 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1bdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bde:	9c 81       	ldd	r25, Y+4	; 0x04
    1be0:	fc 01       	movw	r30, r24
    1be2:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	9c 81       	ldd	r25, Y+4	; 0x04
    1be8:	02 96       	adiw	r24, 0x02	; 2
    1bea:	01 96       	adiw	r24, 0x01	; 1
    1bec:	23 ef       	ldi	r18, 0xF3	; 243
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	f9 01       	movw	r30, r18
    1bf2:	20 81       	ld	r18, Z
    1bf4:	22 95       	swap	r18
    1bf6:	26 95       	lsr	r18
    1bf8:	27 70       	andi	r18, 0x07	; 7
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	20 83       	st	Z, r18
    1bfe:	8b 81       	ldd	r24, Y+3	; 0x03
    1c00:	9c 81       	ldd	r25, Y+4	; 0x04
    1c02:	02 96       	adiw	r24, 0x02	; 2
    1c04:	22 ef       	ldi	r18, 0xF2	; 242
    1c06:	30 e0       	ldi	r19, 0x00	; 0
    1c08:	f9 01       	movw	r30, r18
    1c0a:	20 81       	ld	r18, Z
    1c0c:	42 2f       	mov	r20, r18
    1c0e:	42 95       	swap	r20
    1c10:	46 95       	lsr	r20
    1c12:	47 70       	andi	r20, 0x07	; 7
    1c14:	23 ef       	ldi	r18, 0xF3	; 243
    1c16:	30 e0       	ldi	r19, 0x00	; 0
    1c18:	f9 01       	movw	r30, r18
    1c1a:	20 81       	ld	r18, Z
    1c1c:	22 0f       	add	r18, r18
    1c1e:	22 0f       	add	r18, r18
    1c20:	22 0f       	add	r18, r18
    1c22:	24 0f       	add	r18, r20
    1c24:	fc 01       	movw	r30, r24
    1c26:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1c28:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c2c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c2e:	fc 01       	movw	r30, r24
    1c30:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1c32:	8f ee       	ldi	r24, 0xEF	; 239
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	2f ee       	ldi	r18, 0xEF	; 239
    1c38:	30 e0       	ldi	r19, 0x00	; 0
    1c3a:	f9 01       	movw	r30, r18
    1c3c:	20 81       	ld	r18, Z
    1c3e:	2f 73       	andi	r18, 0x3F	; 63
    1c40:	fc 01       	movw	r30, r24
    1c42:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c44:	8e ee       	ldi	r24, 0xEE	; 238
    1c46:	90 e0       	ldi	r25, 0x00	; 0
    1c48:	fc 01       	movw	r30, r24
    1c4a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1c4c:	19 82       	std	Y+1, r1	; 0x01
            break;
    1c4e:	29 c0       	rjmp	.+82     	; 0x1ca2 <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1c50:	8b 81       	ldd	r24, Y+3	; 0x03
    1c52:	9c 81       	ldd	r25, Y+4	; 0x04
    1c54:	2a 81       	ldd	r18, Y+2	; 0x02
    1c56:	fc 01       	movw	r30, r24
    1c58:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1c5a:	8f ee       	ldi	r24, 0xEF	; 239
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	2f ee       	ldi	r18, 0xEF	; 239
    1c60:	30 e0       	ldi	r19, 0x00	; 0
    1c62:	f9 01       	movw	r30, r18
    1c64:	20 81       	ld	r18, Z
    1c66:	2f 73       	andi	r18, 0x3F	; 63
    1c68:	fc 01       	movw	r30, r24
    1c6a:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c6c:	8e ee       	ldi	r24, 0xEE	; 238
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	fc 01       	movw	r30, r24
    1c72:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1c74:	19 82       	std	Y+1, r1	; 0x01
            break;
    1c76:	15 c0       	rjmp	.+42     	; 0x1ca2 <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1c78:	8b 81       	ldd	r24, Y+3	; 0x03
    1c7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7c:	2a 81       	ldd	r18, Y+2	; 0x02
    1c7e:	fc 01       	movw	r30, r24
    1c80:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1c82:	8f ee       	ldi	r24, 0xEF	; 239
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	2f ee       	ldi	r18, 0xEF	; 239
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	f9 01       	movw	r30, r18
    1c8c:	20 81       	ld	r18, Z
    1c8e:	2f 73       	andi	r18, 0x3F	; 63
    1c90:	fc 01       	movw	r30, r24
    1c92:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c94:	8e ee       	ldi	r24, 0xEE	; 238
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	fc 01       	movw	r30, r24
    1c9a:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1c9c:	82 e0       	ldi	r24, 0x02	; 2
    1c9e:	89 83       	std	Y+1, r24	; 0x01
            break;
    1ca0:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1ca2:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ca4:	0f 90       	pop	r0
    1ca6:	0f 90       	pop	r0
    1ca8:	0f 90       	pop	r0
    1caa:	0f 90       	pop	r0
    1cac:	df 91       	pop	r29
    1cae:	cf 91       	pop	r28
    1cb0:	08 95       	ret

00001cb2 <__vector_18>:
    
ISR (CAN_INT_vect)
{
    1cb2:	1f 92       	push	r1
    1cb4:	0f 92       	push	r0
    1cb6:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1cba:	0f 92       	push	r0
    1cbc:	11 24       	eor	r1, r1
    1cbe:	8f 93       	push	r24
    1cc0:	9f 93       	push	r25
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	00 d0       	rcall	.+0      	; 0x1cc8 <__vector_18+0x16>
    1cc8:	cd b7       	in	r28, 0x3d	; 61
    1cca:	de b7       	in	r29, 0x3e	; 62
	int i = 10;
    1ccc:	8a e0       	ldi	r24, 0x0A	; 10
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9a 83       	std	Y+2, r25	; 0x02
    1cd2:	89 83       	std	Y+1, r24	; 0x01
	i++;
    1cd4:	89 81       	ldd	r24, Y+1	; 0x01
    1cd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cd8:	01 96       	adiw	r24, 0x01	; 1
    1cda:	9a 83       	std	Y+2, r25	; 0x02
    1cdc:	89 83       	std	Y+1, r24	; 0x01
	
    1cde:	00 00       	nop
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	df 91       	pop	r29
    1ce6:	cf 91       	pop	r28
    1ce8:	9f 91       	pop	r25
    1cea:	8f 91       	pop	r24
    1cec:	0f 90       	pop	r0
    1cee:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    1cf2:	0f 90       	pop	r0
    1cf4:	1f 90       	pop	r1
    1cf6:	18 95       	reti

00001cf8 <__low>:
	return (__x1 & ( 1 << __x2));
}
*/

static __inline uint8_t __low(uint16_t __x)
{
    1cf8:	cf 93       	push	r28
    1cfa:	df 93       	push	r29
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <__low+0x6>
    1cfe:	cd b7       	in	r28, 0x3d	; 61
    1d00:	de b7       	in	r29, 0x3e	; 62
    1d02:	9a 83       	std	Y+2, r25	; 0x02
    1d04:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) ((__x) & 0xFF);
    1d06:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d08:	0f 90       	pop	r0
    1d0a:	0f 90       	pop	r0
    1d0c:	df 91       	pop	r29
    1d0e:	cf 91       	pop	r28
    1d10:	08 95       	ret

00001d12 <__high>:

static __inline uint8_t __high(uint16_t __x)
{
    1d12:	cf 93       	push	r28
    1d14:	df 93       	push	r29
    1d16:	00 d0       	rcall	.+0      	; 0x1d18 <__high+0x6>
    1d18:	cd b7       	in	r28, 0x3d	; 61
    1d1a:	de b7       	in	r29, 0x3e	; 62
    1d1c:	9a 83       	std	Y+2, r25	; 0x02
    1d1e:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) (((__x)>>8) & 0xFF);
    1d20:	89 81       	ldd	r24, Y+1	; 0x01
    1d22:	9a 81       	ldd	r25, Y+2	; 0x02
    1d24:	89 2f       	mov	r24, r25
    1d26:	99 27       	eor	r25, r25
}
    1d28:	0f 90       	pop	r0
    1d2a:	0f 90       	pop	r0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <can_network_init>:
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	1f 92       	push	r1
    1d38:	cd b7       	in	r28, 0x3d	; 61
    1d3a:	de b7       	in	r29, 0x3e	; 62
    1d3c:	89 83       	std	Y+1, r24	; 0x01
	can_init(mode);
    1d3e:	89 81       	ldd	r24, Y+1	; 0x01
    1d40:	0e 94 59 02 	call	0x4b2	; 0x4b2 <can_init>
	
	// CANGIE |= (1 << ENIT)|(1 << ENRX); // enable receive interrupt...
	
	
}
    1d44:	00 00       	nop
    1d46:	0f 90       	pop	r0
    1d48:	df 91       	pop	r29
    1d4a:	cf 91       	pop	r28
    1d4c:	08 95       	ret

00001d4e <can_send_aem_message>:

void can_send_aem_message(tSensor sensor)
{
    1d4e:	ef 92       	push	r14
    1d50:	ff 92       	push	r15
    1d52:	0f 93       	push	r16
    1d54:	1f 93       	push	r17
    1d56:	cf 93       	push	r28
    1d58:	df 93       	push	r29
    1d5a:	cd b7       	in	r28, 0x3d	; 61
    1d5c:	de b7       	in	r29, 0x3e	; 62
    1d5e:	64 97       	sbiw	r28, 0x14	; 20
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	de bf       	out	0x3e, r29	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	cd bf       	out	0x3d, r28	; 61
	
	aem_message.pt_data = &aem_pt_data[0];
	
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
}
    1d6a:	0d b7       	in	r16, 0x3d	; 61
    1d6c:	1e b7       	in	r17, 0x3e	; 62
	
	
}

void can_send_aem_message(tSensor sensor)
{
    1d6e:	8d b7       	in	r24, 0x3d	; 61
    1d70:	9e b7       	in	r25, 0x3e	; 62
    1d72:	7c 01       	movw	r14, r24
	uint16_t tmpLambda;
	
	T_BYTE6_AEM byte6;
	T_BYTE7_AEM byte7;	
	
	aem_message.id.ext = 0x180;
    1d74:	80 e8       	ldi	r24, 0x80	; 128
    1d76:	91 e0       	ldi	r25, 0x01	; 1
    1d78:	a0 e0       	ldi	r26, 0x00	; 0
    1d7a:	b0 e0       	ldi	r27, 0x00	; 0
    1d7c:	89 87       	std	Y+9, r24	; 0x09
    1d7e:	9a 87       	std	Y+10, r25	; 0x0a
    1d80:	ab 87       	std	Y+11, r26	; 0x0b
    1d82:	bc 87       	std	Y+12, r27	; 0x0c
	aem_message.ctrl.ide = 1;
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	8a 8b       	std	Y+18, r24	; 0x12
	aem_message.ctrl.rtr = 0;
    1d88:	19 8a       	std	Y+17, r1	; 0x11
	aem_message.dlc = 8;
    1d8a:	88 e0       	ldi	r24, 0x08	; 8
    1d8c:	8d 87       	std	Y+13, r24	; 0x0d
	aem_message.cmd = CMD_TX_DATA;
    1d8e:	82 e0       	ldi	r24, 0x02	; 2
    1d90:	88 87       	std	Y+8, r24	; 0x08
	uint8_t aem_pt_data[aem_message.dlc];
    1d92:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d94:	82 2f       	mov	r24, r18
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	01 97       	sbiw	r24, 0x01	; 1
    1d9a:	9a 83       	std	Y+2, r25	; 0x02
    1d9c:	89 83       	std	Y+1, r24	; 0x01
    1d9e:	82 2f       	mov	r24, r18
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	2d b7       	in	r18, 0x3d	; 61
    1da4:	3e b7       	in	r19, 0x3e	; 62
    1da6:	28 1b       	sub	r18, r24
    1da8:	39 0b       	sbc	r19, r25
    1daa:	0f b6       	in	r0, 0x3f	; 63
    1dac:	f8 94       	cli
    1dae:	3e bf       	out	0x3e, r19	; 62
    1db0:	0f be       	out	0x3f, r0	; 63
    1db2:	2d bf       	out	0x3d, r18	; 61
    1db4:	8d b7       	in	r24, 0x3d	; 61
    1db6:	9e b7       	in	r25, 0x3e	; 62
    1db8:	01 96       	adiw	r24, 0x01	; 1
    1dba:	9c 83       	std	Y+4, r25	; 0x04
    1dbc:	8b 83       	std	Y+3, r24	; 0x03
	
	tmpLambda = sensor.Lambda*10;
    1dbe:	8d a5       	ldd	r24, Y+45	; 0x2d
    1dc0:	9e a5       	ldd	r25, Y+46	; 0x2e
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	9c 01       	movw	r18, r24
    1dc8:	22 0f       	add	r18, r18
    1dca:	33 1f       	adc	r19, r19
    1dcc:	22 0f       	add	r18, r18
    1dce:	33 1f       	adc	r19, r19
    1dd0:	82 0f       	add	r24, r18
    1dd2:	93 1f       	adc	r25, r19
    1dd4:	9e 83       	std	Y+6, r25	; 0x06
    1dd6:	8d 83       	std	Y+5, r24	; 0x05
	aem_pt_data[0] = high(tmpLambda);
    1dd8:	8d 81       	ldd	r24, Y+5	; 0x05
    1dda:	9e 81       	ldd	r25, Y+6	; 0x06
    1ddc:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__high>
    1de0:	28 2f       	mov	r18, r24
    1de2:	8b 81       	ldd	r24, Y+3	; 0x03
    1de4:	9c 81       	ldd	r25, Y+4	; 0x04
    1de6:	fc 01       	movw	r30, r24
    1de8:	20 83       	st	Z, r18
	aem_pt_data[1] = low(tmpLambda);
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__low>
    1df2:	28 2f       	mov	r18, r24
    1df4:	8b 81       	ldd	r24, Y+3	; 0x03
    1df6:	9c 81       	ldd	r25, Y+4	; 0x04
    1df8:	fc 01       	movw	r30, r24
    1dfa:	21 83       	std	Z+1, r18	; 0x01

	aem_pt_data[2] = high(sensor.O2);
    1dfc:	8f a5       	ldd	r24, Y+47	; 0x2f
    1dfe:	98 a9       	ldd	r25, Y+48	; 0x30
    1e00:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__high>
    1e04:	28 2f       	mov	r18, r24
    1e06:	8b 81       	ldd	r24, Y+3	; 0x03
    1e08:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	22 83       	std	Z+2, r18	; 0x02
	aem_pt_data[3] = low(sensor.O2);
    1e0e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e10:	98 a9       	ldd	r25, Y+48	; 0x30
    1e12:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__low>
    1e16:	28 2f       	mov	r18, r24
    1e18:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e1c:	fc 01       	movw	r30, r24
    1e1e:	23 83       	std	Z+3, r18	; 0x03

	aem_pt_data[4] = (sensor.SystemVoltage / 100);
    1e20:	8b a9       	ldd	r24, Y+51	; 0x33
    1e22:	9c a9       	ldd	r25, Y+52	; 0x34
    1e24:	96 95       	lsr	r25
    1e26:	87 95       	ror	r24
    1e28:	96 95       	lsr	r25
    1e2a:	87 95       	ror	r24
    1e2c:	9c 01       	movw	r18, r24
    1e2e:	ab e7       	ldi	r26, 0x7B	; 123
    1e30:	b4 e1       	ldi	r27, 0x14	; 20
    1e32:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__umulhisi3>
    1e36:	96 95       	lsr	r25
    1e38:	87 95       	ror	r24
    1e3a:	28 2f       	mov	r18, r24
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e40:	fc 01       	movw	r30, r24
    1e42:	24 83       	std	Z+4, r18	; 0x04
	aem_pt_data[5] = (sensor.HeaterVoltage / 100);
    1e44:	89 a9       	ldd	r24, Y+49	; 0x31
    1e46:	9a a9       	ldd	r25, Y+50	; 0x32
    1e48:	96 95       	lsr	r25
    1e4a:	87 95       	ror	r24
    1e4c:	96 95       	lsr	r25
    1e4e:	87 95       	ror	r24
    1e50:	9c 01       	movw	r18, r24
    1e52:	ab e7       	ldi	r26, 0x7B	; 123
    1e54:	b4 e1       	ldi	r27, 0x14	; 20
    1e56:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__umulhisi3>
    1e5a:	96 95       	lsr	r25
    1e5c:	87 95       	ror	r24
    1e5e:	28 2f       	mov	r18, r24
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	fc 01       	movw	r30, r24
    1e66:	25 83       	std	Z+5, r18	; 0x05
	
	byte6.signals.SensorDetectedStatus = sensor.SensorDetectedStatus;
    1e68:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6a:	8f 70       	andi	r24, 0x0F	; 15
    1e6c:	8f 70       	andi	r24, 0x0F	; 15
    1e6e:	9b 89       	ldd	r25, Y+19	; 0x13
    1e70:	90 7f       	andi	r25, 0xF0	; 240
    1e72:	89 2b       	or	r24, r25
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
	byte6.signals.DataValidState = 0x1;
    1e76:	8b 89       	ldd	r24, Y+19	; 0x13
    1e78:	80 68       	ori	r24, 0x80	; 128
    1e7a:	8b 8b       	std	Y+19, r24	; 0x13
	byte6.signals.UsingFreeAirCal = 0x0;
    1e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1e7e:	8f 7d       	andi	r24, 0xDF	; 223
    1e80:	8b 8b       	std	Y+19, r24	; 0x13
	aem_pt_data[6] = byte6.raw_byte;
    1e82:	2b 89       	ldd	r18, Y+19	; 0x13
    1e84:	8b 81       	ldd	r24, Y+3	; 0x03
    1e86:	9c 81       	ldd	r25, Y+4	; 0x04
    1e88:	fc 01       	movw	r30, r24
    1e8a:	26 83       	std	Z+6, r18	; 0x06
	
	byte7.signals.SensorFaultState = sensor.SensorFaultState;
    1e8c:	88 ad       	ldd	r24, Y+56	; 0x38
    1e8e:	81 70       	andi	r24, 0x01	; 1
    1e90:	81 70       	andi	r24, 0x01	; 1
    1e92:	82 95       	swap	r24
    1e94:	88 0f       	add	r24, r24
    1e96:	88 0f       	add	r24, r24
    1e98:	80 7c       	andi	r24, 0xC0	; 192
    1e9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e9c:	9f 7b       	andi	r25, 0xBF	; 191
    1e9e:	89 2b       	or	r24, r25
    1ea0:	8c 8b       	std	Y+20, r24	; 0x14
	byte7.signals.SensorStatus = sensor.SensorStatus;
    1ea2:	8f a9       	ldd	r24, Y+55	; 0x37
    1ea4:	8f 71       	andi	r24, 0x1F	; 31
    1ea6:	8f 71       	andi	r24, 0x1F	; 31
    1ea8:	9c 89       	ldd	r25, Y+20	; 0x14
    1eaa:	90 7e       	andi	r25, 0xE0	; 224
    1eac:	89 2b       	or	r24, r25
    1eae:	8c 8b       	std	Y+20, r24	; 0x14
	aem_pt_data[7] = byte7.raw_byte;
    1eb0:	2c 89       	ldd	r18, Y+20	; 0x14
    1eb2:	8b 81       	ldd	r24, Y+3	; 0x03
    1eb4:	9c 81       	ldd	r25, Y+4	; 0x04
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	27 83       	std	Z+7, r18	; 0x07
	
	aem_message.pt_data = &aem_pt_data[0];
    1eba:	8b 81       	ldd	r24, Y+3	; 0x03
    1ebc:	9c 81       	ldd	r25, Y+4	; 0x04
    1ebe:	9f 87       	std	Y+15, r25	; 0x0f
    1ec0:	8e 87       	std	Y+14, r24	; 0x0e
	
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1ec2:	00 00       	nop
    1ec4:	ce 01       	movw	r24, r28
    1ec6:	07 96       	adiw	r24, 0x07	; 7
    1ec8:	0e 94 90 02 	call	0x520	; 0x520 <can_cmd>
    1ecc:	88 23       	and	r24, r24
    1ece:	d1 f7       	brne	.-12     	; 0x1ec4 <can_send_aem_message+0x176>
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    1ed0:	00 00       	nop
    1ed2:	ce 01       	movw	r24, r28
    1ed4:	07 96       	adiw	r24, 0x07	; 7
    1ed6:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <can_get_status>
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	d1 f3       	breq	.-12     	; 0x1ed2 <can_send_aem_message+0x184>
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	fe be       	out	0x3e, r15	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	ed be       	out	0x3d, r14	; 61
}
    1ee8:	00 00       	nop
    1eea:	0f b6       	in	r0, 0x3f	; 63
    1eec:	f8 94       	cli
    1eee:	1e bf       	out	0x3e, r17	; 62
    1ef0:	0f be       	out	0x3f, r0	; 63
    1ef2:	0d bf       	out	0x3d, r16	; 61
    1ef4:	64 96       	adiw	r28, 0x14	; 20
    1ef6:	0f b6       	in	r0, 0x3f	; 63
    1ef8:	f8 94       	cli
    1efa:	de bf       	out	0x3e, r29	; 62
    1efc:	0f be       	out	0x3f, r0	; 63
    1efe:	cd bf       	out	0x3d, r28	; 61
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	1f 91       	pop	r17
    1f06:	0f 91       	pop	r16
    1f08:	ff 90       	pop	r15
    1f0a:	ef 90       	pop	r14
    1f0c:	08 95       	ret

00001f0e <can_send_debug_message>:

void can_send_debug_message(uint16_t ur_ref_raw, uint16_t ur_raw, uint8_t pid, uint8_t signature, uint8_t diagRegister)
{
    1f0e:	ef 92       	push	r14
    1f10:	ff 92       	push	r15
    1f12:	0f 93       	push	r16
    1f14:	1f 93       	push	r17
    1f16:	cf 93       	push	r28
    1f18:	df 93       	push	r29
    1f1a:	cd b7       	in	r28, 0x3d	; 61
    1f1c:	de b7       	in	r29, 0x3e	; 62
    1f1e:	67 97       	sbiw	r28, 0x17	; 23
    1f20:	0f b6       	in	r0, 0x3f	; 63
    1f22:	f8 94       	cli
    1f24:	de bf       	out	0x3e, r29	; 62
    1f26:	0f be       	out	0x3f, r0	; 63
    1f28:	cd bf       	out	0x3d, r28	; 61
    1f2a:	9a 8b       	std	Y+18, r25	; 0x12
    1f2c:	89 8b       	std	Y+17, r24	; 0x11
    1f2e:	7c 8b       	std	Y+20, r23	; 0x14
    1f30:	6b 8b       	std	Y+19, r22	; 0x13
    1f32:	4d 8b       	std	Y+21, r20	; 0x15
    1f34:	2e 8b       	std	Y+22, r18	; 0x16
    1f36:	0f 8b       	std	Y+23, r16	; 0x17
	
	debug_message.pt_data = &pt_data[0];
	
	while(can_cmd(&debug_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&debug_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
}
    1f38:	0d b7       	in	r16, 0x3d	; 61
    1f3a:	1e b7       	in	r17, 0x3e	; 62
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
}

void can_send_debug_message(uint16_t ur_ref_raw, uint16_t ur_raw, uint8_t pid, uint8_t signature, uint8_t diagRegister)
{
    1f3c:	8d b7       	in	r24, 0x3d	; 61
    1f3e:	9e b7       	in	r25, 0x3e	; 62
    1f40:	7c 01       	movw	r14, r24
	st_cmd_t debug_message;
	debug_message.id.ext = 0x200;
    1f42:	80 e0       	ldi	r24, 0x00	; 0
    1f44:	92 e0       	ldi	r25, 0x02	; 2
    1f46:	a0 e0       	ldi	r26, 0x00	; 0
    1f48:	b0 e0       	ldi	r27, 0x00	; 0
    1f4a:	8f 83       	std	Y+7, r24	; 0x07
    1f4c:	98 87       	std	Y+8, r25	; 0x08
    1f4e:	a9 87       	std	Y+9, r26	; 0x09
    1f50:	ba 87       	std	Y+10, r27	; 0x0a
	debug_message.ctrl.ide = 1;
    1f52:	81 e0       	ldi	r24, 0x01	; 1
    1f54:	88 8b       	std	Y+16, r24	; 0x10
	debug_message.ctrl.rtr = 0;
    1f56:	1f 86       	std	Y+15, r1	; 0x0f
	debug_message.dlc = 7;
    1f58:	87 e0       	ldi	r24, 0x07	; 7
    1f5a:	8b 87       	std	Y+11, r24	; 0x0b
	debug_message.cmd = CMD_TX_DATA;
    1f5c:	82 e0       	ldi	r24, 0x02	; 2
    1f5e:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pt_data[debug_message.dlc];
    1f60:	2b 85       	ldd	r18, Y+11	; 0x0b
    1f62:	82 2f       	mov	r24, r18
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	01 97       	sbiw	r24, 0x01	; 1
    1f68:	9a 83       	std	Y+2, r25	; 0x02
    1f6a:	89 83       	std	Y+1, r24	; 0x01
    1f6c:	82 2f       	mov	r24, r18
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	2d b7       	in	r18, 0x3d	; 61
    1f72:	3e b7       	in	r19, 0x3e	; 62
    1f74:	28 1b       	sub	r18, r24
    1f76:	39 0b       	sbc	r19, r25
    1f78:	0f b6       	in	r0, 0x3f	; 63
    1f7a:	f8 94       	cli
    1f7c:	3e bf       	out	0x3e, r19	; 62
    1f7e:	0f be       	out	0x3f, r0	; 63
    1f80:	2d bf       	out	0x3d, r18	; 61
    1f82:	8d b7       	in	r24, 0x3d	; 61
    1f84:	9e b7       	in	r25, 0x3e	; 62
    1f86:	01 96       	adiw	r24, 0x01	; 1
    1f88:	9c 83       	std	Y+4, r25	; 0x04
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
	
	pt_data[0] = low(ur_ref_raw);
    1f8c:	89 89       	ldd	r24, Y+17	; 0x11
    1f8e:	9a 89       	ldd	r25, Y+18	; 0x12
    1f90:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__low>
    1f94:	28 2f       	mov	r18, r24
    1f96:	8b 81       	ldd	r24, Y+3	; 0x03
    1f98:	9c 81       	ldd	r25, Y+4	; 0x04
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	20 83       	st	Z, r18
	pt_data[1] = high(ur_ref_raw);
    1f9e:	89 89       	ldd	r24, Y+17	; 0x11
    1fa0:	9a 89       	ldd	r25, Y+18	; 0x12
    1fa2:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__high>
    1fa6:	28 2f       	mov	r18, r24
    1fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    1faa:	9c 81       	ldd	r25, Y+4	; 0x04
    1fac:	fc 01       	movw	r30, r24
    1fae:	21 83       	std	Z+1, r18	; 0x01
	pt_data[2] = low(ur_raw);
    1fb0:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb2:	9c 89       	ldd	r25, Y+20	; 0x14
    1fb4:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <__low>
    1fb8:	28 2f       	mov	r18, r24
    1fba:	8b 81       	ldd	r24, Y+3	; 0x03
    1fbc:	9c 81       	ldd	r25, Y+4	; 0x04
    1fbe:	fc 01       	movw	r30, r24
    1fc0:	22 83       	std	Z+2, r18	; 0x02
	pt_data[3] = high(ur_raw);
    1fc2:	8b 89       	ldd	r24, Y+19	; 0x13
    1fc4:	9c 89       	ldd	r25, Y+20	; 0x14
    1fc6:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__high>
    1fca:	28 2f       	mov	r18, r24
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd0:	fc 01       	movw	r30, r24
    1fd2:	23 83       	std	Z+3, r18	; 0x03
	pt_data[4] = pid;
    1fd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1fd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1fd8:	2d 89       	ldd	r18, Y+21	; 0x15
    1fda:	fc 01       	movw	r30, r24
    1fdc:	24 83       	std	Z+4, r18	; 0x04
	pt_data[5] = signature;
    1fde:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe0:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe2:	2e 89       	ldd	r18, Y+22	; 0x16
    1fe4:	fc 01       	movw	r30, r24
    1fe6:	25 83       	std	Z+5, r18	; 0x05
	pt_data[6] = diagRegister;
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	9c 81       	ldd	r25, Y+4	; 0x04
    1fec:	2f 89       	ldd	r18, Y+23	; 0x17
    1fee:	fc 01       	movw	r30, r24
    1ff0:	26 83       	std	Z+6, r18	; 0x06
	
	debug_message.pt_data = &pt_data[0];
    1ff2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ff4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ff6:	9d 87       	std	Y+13, r25	; 0x0d
    1ff8:	8c 87       	std	Y+12, r24	; 0x0c
	
	while(can_cmd(&debug_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1ffa:	00 00       	nop
    1ffc:	ce 01       	movw	r24, r28
    1ffe:	05 96       	adiw	r24, 0x05	; 5
    2000:	0e 94 90 02 	call	0x520	; 0x520 <can_cmd>
    2004:	88 23       	and	r24, r24
    2006:	d1 f7       	brne	.-12     	; 0x1ffc <can_send_debug_message+0xee>
	while(can_get_status(&debug_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    2008:	00 00       	nop
    200a:	ce 01       	movw	r24, r28
    200c:	05 96       	adiw	r24, 0x05	; 5
    200e:	0e 94 26 0d 	call	0x1a4c	; 0x1a4c <can_get_status>
    2012:	81 30       	cpi	r24, 0x01	; 1
    2014:	d1 f3       	breq	.-12     	; 0x200a <can_send_debug_message+0xfc>
    2016:	0f b6       	in	r0, 0x3f	; 63
    2018:	f8 94       	cli
    201a:	fe be       	out	0x3e, r15	; 62
    201c:	0f be       	out	0x3f, r0	; 63
    201e:	ed be       	out	0x3d, r14	; 61
}
    2020:	00 00       	nop
    2022:	0f b6       	in	r0, 0x3f	; 63
    2024:	f8 94       	cli
    2026:	1e bf       	out	0x3e, r17	; 62
    2028:	0f be       	out	0x3f, r0	; 63
    202a:	0d bf       	out	0x3d, r16	; 61
    202c:	67 96       	adiw	r28, 0x17	; 23
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
    2038:	df 91       	pop	r29
    203a:	cf 91       	pop	r28
    203c:	1f 91       	pop	r17
    203e:	0f 91       	pop	r16
    2040:	ff 90       	pop	r15
    2042:	ef 90       	pop	r14
    2044:	08 95       	ret

00002046 <__low>:
	{
		return COMMAND_VALID;
	}
	
	return COMMAND_NOT_VALID;	
}
    2046:	cf 93       	push	r28
    2048:	df 93       	push	r29
    204a:	00 d0       	rcall	.+0      	; 0x204c <__low+0x6>
    204c:	cd b7       	in	r28, 0x3d	; 61
    204e:	de b7       	in	r29, 0x3e	; 62
    2050:	9a 83       	std	Y+2, r25	; 0x02
    2052:	89 83       	std	Y+1, r24	; 0x01
    2054:	89 81       	ldd	r24, Y+1	; 0x01
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	08 95       	ret

00002060 <__high>:
    2060:	cf 93       	push	r28
    2062:	df 93       	push	r29
    2064:	00 d0       	rcall	.+0      	; 0x2066 <__high+0x6>
    2066:	cd b7       	in	r28, 0x3d	; 61
    2068:	de b7       	in	r29, 0x3e	; 62
    206a:	9a 83       	std	Y+2, r25	; 0x02
    206c:	89 83       	std	Y+1, r24	; 0x01
    206e:	89 81       	ldd	r24, Y+1	; 0x01
    2070:	9a 81       	ldd	r25, Y+2	; 0x02
    2072:	89 2f       	mov	r24, r25
    2074:	99 27       	eor	r25, r25
    2076:	0f 90       	pop	r0
    2078:	0f 90       	pop	r0
    207a:	df 91       	pop	r29
    207c:	cf 91       	pop	r28
    207e:	08 95       	ret

00002080 <cj125_readSignature>:

tcj125_command_status cj125_readSignature (uint8_t *sig)
{	
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	00 d0       	rcall	.+0      	; 0x2086 <cj125_readSignature+0x6>
    2086:	00 d0       	rcall	.+0      	; 0x2088 <cj125_readSignature+0x8>
    2088:	cd b7       	in	r28, 0x3d	; 61
    208a:	de b7       	in	r29, 0x3e	; 62
    208c:	9c 83       	std	Y+4, r25	; 0x04
    208e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t reg;
	
	reg = spi_read_write(CJ125_RD_IDENT);
    2090:	80 e0       	ldi	r24, 0x00	; 0
    2092:	98 e4       	ldi	r25, 0x48	; 72
    2094:	0e 94 29 1b 	call	0x3652	; 0x3652 <spi_read_write>
    2098:	9a 83       	std	Y+2, r25	; 0x02
    209a:	89 83       	std	Y+1, r24	; 0x01
	
	if (high(reg) == 0x28 || high(reg) == 0x2e)
    209c:	89 81       	ldd	r24, Y+1	; 0x01
    209e:	9a 81       	ldd	r25, Y+2	; 0x02
    20a0:	0e 94 30 10 	call	0x2060	; 0x2060 <__high>
    20a4:	88 32       	cpi	r24, 0x28	; 40
    20a6:	31 f0       	breq	.+12     	; 0x20b4 <cj125_readSignature+0x34>
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	9a 81       	ldd	r25, Y+2	; 0x02
    20ac:	0e 94 30 10 	call	0x2060	; 0x2060 <__high>
    20b0:	8e 32       	cpi	r24, 0x2E	; 46
    20b2:	59 f4       	brne	.+22     	; 0x20ca <cj125_readSignature+0x4a>
	{
		*sig = (low(reg));
    20b4:	89 81       	ldd	r24, Y+1	; 0x01
    20b6:	9a 81       	ldd	r25, Y+2	; 0x02
    20b8:	0e 94 23 10 	call	0x2046	; 0x2046 <__low>
    20bc:	28 2f       	mov	r18, r24
    20be:	8b 81       	ldd	r24, Y+3	; 0x03
    20c0:	9c 81       	ldd	r25, Y+4	; 0x04
    20c2:	fc 01       	movw	r30, r24
    20c4:	20 83       	st	Z, r18
		return COMMAND_VALID;
    20c6:	80 e0       	ldi	r24, 0x00	; 0
    20c8:	01 c0       	rjmp	.+2      	; 0x20cc <cj125_readSignature+0x4c>
	}
	
	return COMMAND_NOT_VALID;
    20ca:	81 e0       	ldi	r24, 0x01	; 1
}
    20cc:	0f 90       	pop	r0
    20ce:	0f 90       	pop	r0
    20d0:	0f 90       	pop	r0
    20d2:	0f 90       	pop	r0
    20d4:	df 91       	pop	r29
    20d6:	cf 91       	pop	r28
    20d8:	08 95       	ret

000020da <cj125_readStatus>:

tcj125_command_status cj125_readStatus (uint8_t *diagRegister)
{
    20da:	cf 93       	push	r28
    20dc:	df 93       	push	r29
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <cj125_readStatus+0x6>
    20e0:	00 d0       	rcall	.+0      	; 0x20e2 <cj125_readStatus+0x8>
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	9c 83       	std	Y+4, r25	; 0x04
    20e8:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t statusReg = 0;
    20ea:	1a 82       	std	Y+2, r1	; 0x02
    20ec:	19 82       	std	Y+1, r1	; 0x01
	
	statusReg = spi_read_write(CJ125_RD_DIAG);
    20ee:	80 e0       	ldi	r24, 0x00	; 0
    20f0:	98 e7       	ldi	r25, 0x78	; 120
    20f2:	0e 94 29 1b 	call	0x3652	; 0x3652 <spi_read_write>
    20f6:	9a 83       	std	Y+2, r25	; 0x02
    20f8:	89 83       	std	Y+1, r24	; 0x01
	// the most important bit for a command is bit0, here is the status of current command
	// bit0 = 0 --> current command is valid
	// bit0 = 1 --> current command is not valid
	// so just check this bit...
	
	if (bit_check(high(statusReg), CJ125_DIAG_INSTR_F))
    20fa:	89 81       	ldd	r24, Y+1	; 0x01
    20fc:	9a 81       	ldd	r25, Y+2	; 0x02
    20fe:	0e 94 30 10 	call	0x2060	; 0x2060 <__high>
    2102:	88 2f       	mov	r24, r24
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	81 70       	andi	r24, 0x01	; 1
    2108:	99 27       	eor	r25, r25
    210a:	89 2b       	or	r24, r25
    210c:	11 f0       	breq	.+4      	; 0x2112 <cj125_readStatus+0x38>
	{
		return COMMAND_NOT_VALID;
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	0a c0       	rjmp	.+20     	; 0x2126 <cj125_readStatus+0x4c>
	}
	
	// if the last command is valid, we check the content of low byte:
	
	*diagRegister = low (statusReg);
    2112:	89 81       	ldd	r24, Y+1	; 0x01
    2114:	9a 81       	ldd	r25, Y+2	; 0x02
    2116:	0e 94 23 10 	call	0x2046	; 0x2046 <__low>
    211a:	28 2f       	mov	r18, r24
    211c:	8b 81       	ldd	r24, Y+3	; 0x03
    211e:	9c 81       	ldd	r25, Y+4	; 0x04
    2120:	fc 01       	movw	r30, r24
    2122:	20 83       	st	Z, r18
	
	return COMMAND_VALID;
    2124:	80 e0       	ldi	r24, 0x00	; 0
}
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	df 91       	pop	r29
    2130:	cf 91       	pop	r28
    2132:	08 95       	ret

00002134 <cj125_set_calibration_mode>:

tcj125_command_status cj125_set_calibration_mode (void)
{
    2134:	cf 93       	push	r28
    2136:	df 93       	push	r29
    2138:	00 d0       	rcall	.+0      	; 0x213a <cj125_set_calibration_mode+0x6>
    213a:	cd b7       	in	r28, 0x3d	; 61
    213c:	de b7       	in	r29, 0x3e	; 62
	uint16_t statusReg = 0;
    213e:	1a 82       	std	Y+2, r1	; 0x02
    2140:	19 82       	std	Y+1, r1	; 0x01

	statusReg = spi_read_write(CJ125_WR_MODE_CAL);
    2142:	8d e9       	ldi	r24, 0x9D	; 157
    2144:	96 e5       	ldi	r25, 0x56	; 86
    2146:	0e 94 29 1b 	call	0x3652	; 0x3652 <spi_read_write>
    214a:	9a 83       	std	Y+2, r25	; 0x02
    214c:	89 83       	std	Y+1, r24	; 0x01
	
	statusReg = spi_read_write(CJ125_RD_INIT1);
    214e:	80 e0       	ldi	r24, 0x00	; 0
    2150:	9c e6       	ldi	r25, 0x6C	; 108
    2152:	0e 94 29 1b 	call	0x3652	; 0x3652 <spi_read_write>
    2156:	9a 83       	std	Y+2, r25	; 0x02
    2158:	89 83       	std	Y+1, r24	; 0x01
	
	if (bit_check(high(statusReg), CJ125_DIAG_INSTR_F))
    215a:	89 81       	ldd	r24, Y+1	; 0x01
    215c:	9a 81       	ldd	r25, Y+2	; 0x02
    215e:	0e 94 30 10 	call	0x2060	; 0x2060 <__high>
    2162:	88 2f       	mov	r24, r24
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	81 70       	andi	r24, 0x01	; 1
    2168:	99 27       	eor	r25, r25
    216a:	89 2b       	or	r24, r25
    216c:	11 f0       	breq	.+4      	; 0x2172 <cj125_set_calibration_mode+0x3e>
	{
		return COMMAND_NOT_VALID;
    216e:	81 e0       	ldi	r24, 0x01	; 1
    2170:	01 c0       	rjmp	.+2      	; 0x2174 <cj125_set_calibration_mode+0x40>
	}
	
	return COMMAND_VALID;
    2172:	80 e0       	ldi	r24, 0x00	; 0
}
    2174:	0f 90       	pop	r0
    2176:	0f 90       	pop	r0
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	08 95       	ret

0000217e <cj125_set_running_mode_v8>:

// amplification = 8, Lambda 0.65
tcj125_command_status cj125_set_running_mode_v8 (void)
{
    217e:	cf 93       	push	r28
    2180:	df 93       	push	r29
    2182:	00 d0       	rcall	.+0      	; 0x2184 <cj125_set_running_mode_v8+0x6>
    2184:	cd b7       	in	r28, 0x3d	; 61
    2186:	de b7       	in	r29, 0x3e	; 62
	uint16_t statusReg = 0;
    2188:	1a 82       	std	Y+2, r1	; 0x02
    218a:	19 82       	std	Y+1, r1	; 0x01

	statusReg = spi_read_write(CJ125_WR_MODE_V8);
    218c:	88 e8       	ldi	r24, 0x88	; 136
    218e:	96 e5       	ldi	r25, 0x56	; 86
    2190:	0e 94 29 1b 	call	0x3652	; 0x3652 <spi_read_write>
    2194:	9a 83       	std	Y+2, r25	; 0x02
    2196:	89 83       	std	Y+1, r24	; 0x01
	
	if (bit_check(high(statusReg), CJ125_DIAG_INSTR_F))
    2198:	89 81       	ldd	r24, Y+1	; 0x01
    219a:	9a 81       	ldd	r25, Y+2	; 0x02
    219c:	0e 94 30 10 	call	0x2060	; 0x2060 <__high>
    21a0:	88 2f       	mov	r24, r24
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	81 70       	andi	r24, 0x01	; 1
    21a6:	99 27       	eor	r25, r25
    21a8:	89 2b       	or	r24, r25
    21aa:	11 f0       	breq	.+4      	; 0x21b0 <cj125_set_running_mode_v8+0x32>
	{
		return COMMAND_NOT_VALID;
    21ac:	81 e0       	ldi	r24, 0x01	; 1
    21ae:	01 c0       	rjmp	.+2      	; 0x21b2 <cj125_set_running_mode_v8+0x34>
	}
	
	return COMMAND_VALID;
    21b0:	80 e0       	ldi	r24, 0x00	; 0
}
    21b2:	0f 90       	pop	r0
    21b4:	0f 90       	pop	r0
    21b6:	df 91       	pop	r29
    21b8:	cf 91       	pop	r28
    21ba:	08 95       	ret

000021bc <__voltage2dac_millis>:
{
	return ((uint16_t) __v * 5000UL / 1024UL );
}

static __inline uint16_t __voltage2dac_millis (uint16_t millis)
{
    21bc:	cf 93       	push	r28
    21be:	df 93       	push	r29
    21c0:	00 d0       	rcall	.+0      	; 0x21c2 <__voltage2dac_millis+0x6>
    21c2:	cd b7       	in	r28, 0x3d	; 61
    21c4:	de b7       	in	r29, 0x3e	; 62
    21c6:	9a 83       	std	Y+2, r25	; 0x02
    21c8:	89 83       	std	Y+1, r24	; 0x01
	return (uint16_t) (millis * 1024UL / 5000UL);
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
    21cc:	9a 81       	ldd	r25, Y+2	; 0x02
    21ce:	cc 01       	movw	r24, r24
    21d0:	a0 e0       	ldi	r26, 0x00	; 0
    21d2:	b0 e0       	ldi	r27, 0x00	; 0
    21d4:	07 2e       	mov	r0, r23
    21d6:	7a e0       	ldi	r23, 0x0A	; 10
    21d8:	88 0f       	add	r24, r24
    21da:	99 1f       	adc	r25, r25
    21dc:	aa 1f       	adc	r26, r26
    21de:	bb 1f       	adc	r27, r27
    21e0:	7a 95       	dec	r23
    21e2:	d1 f7       	brne	.-12     	; 0x21d8 <__voltage2dac_millis+0x1c>
    21e4:	70 2d       	mov	r23, r0
    21e6:	28 e8       	ldi	r18, 0x88	; 136
    21e8:	33 e1       	ldi	r19, 0x13	; 19
    21ea:	40 e0       	ldi	r20, 0x00	; 0
    21ec:	50 e0       	ldi	r21, 0x00	; 0
    21ee:	bc 01       	movw	r22, r24
    21f0:	cd 01       	movw	r24, r26
    21f2:	0e 94 61 1f 	call	0x3ec2	; 0x3ec2 <__udivmodsi4>
    21f6:	da 01       	movw	r26, r20
    21f8:	c9 01       	movw	r24, r18
}
    21fa:	0f 90       	pop	r0
    21fc:	0f 90       	pop	r0
    21fe:	df 91       	pop	r29
    2200:	cf 91       	pop	r28
    2202:	08 95       	ret

00002204 <dac_init>:
uint16_t lambda_values_milli[] = {650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300};
uint16_t voltage_values_milli[] = {250, 600, 950, 1300, 1650, 2000, 2350, 2700, 3050, 3400, 3750, 4100, 4450, 4800};
uint16_t dac_values[] = {51, 123, 195, 266, 338, 410, 481, 553, 625, 696, 768, 840, 911, 983};

void dac_init (void)
{
    2204:	cf 93       	push	r28
    2206:	df 93       	push	r29
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
    220c:	80 e9       	ldi	r24, 0x90	; 144
    220e:	90 e0       	ldi	r25, 0x00	; 0
    2210:	23 e0       	ldi	r18, 0x03	; 3
    2212:	fc 01       	movw	r30, r24
    2214:	20 83       	st	Z, r18
	
	// set DAC to default 0.1v 
	DAC = 20;
    2216:	81 e9       	ldi	r24, 0x91	; 145
    2218:	90 e0       	ldi	r25, 0x00	; 0
    221a:	24 e1       	ldi	r18, 0x14	; 20
    221c:	30 e0       	ldi	r19, 0x00	; 0
    221e:	fc 01       	movw	r30, r24
    2220:	31 83       	std	Z+1, r19	; 0x01
    2222:	20 83       	st	Z, r18
}
    2224:	00 00       	nop
    2226:	df 91       	pop	r29
    2228:	cf 91       	pop	r28
    222a:	08 95       	ret

0000222c <calculate_dac_value>:

uint16_t calculate_dac_value (uint16_t lambda_millis)
{
    222c:	cf 93       	push	r28
    222e:	df 93       	push	r29
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62
    2234:	27 97       	sbiw	r28, 0x07	; 7
    2236:	0f b6       	in	r0, 0x3f	; 63
    2238:	f8 94       	cli
    223a:	de bf       	out	0x3e, r29	; 62
    223c:	0f be       	out	0x3f, r0	; 63
    223e:	cd bf       	out	0x3d, r28	; 61
    2240:	9f 83       	std	Y+7, r25	; 0x07
    2242:	8e 83       	std	Y+6, r24	; 0x06
	uint16_t retVal = 0;
    2244:	1a 82       	std	Y+2, r1	; 0x02
    2246:	19 82       	std	Y+1, r1	; 0x01
	uint8_t counter = 0;
    2248:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t voltage_millis = 0;
    224a:	1d 82       	std	Y+5, r1	; 0x05
    224c:	1c 82       	std	Y+4, r1	; 0x04
	
	// check agains ends:
	if (lambda_millis <= lambda_values_milli[0])
    224e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    2252:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2256:	8e 81       	ldd	r24, Y+6	; 0x06
    2258:	9f 81       	ldd	r25, Y+7	; 0x07
    225a:	28 17       	cp	r18, r24
    225c:	39 07       	cpc	r19, r25
    225e:	30 f0       	brcs	.+12     	; 0x226c <calculate_dac_value+0x40>
	{
		retVal = dac_values[0];
    2260:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dac_values>
    2264:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <dac_values+0x1>
    2268:	9a 83       	std	Y+2, r25	; 0x02
    226a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( lambda_millis >= lambda_values_milli[13])
    226c:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__DATA_REGION_ORIGIN__+0x1a>
    2270:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__DATA_REGION_ORIGIN__+0x1b>
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	9f 81       	ldd	r25, Y+7	; 0x07
    2278:	82 17       	cp	r24, r18
    227a:	93 07       	cpc	r25, r19
    227c:	08 f4       	brcc	.+2      	; 0x2280 <calculate_dac_value+0x54>
    227e:	5a c0       	rjmp	.+180    	; 0x2334 <calculate_dac_value+0x108>
	{
		retVal = dac_values[13];
    2280:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <dac_values+0x1a>
    2284:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <dac_values+0x1b>
    2288:	9a 83       	std	Y+2, r25	; 0x02
    228a:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	while (retVal == 0 && counter < 14)
    228c:	53 c0       	rjmp	.+166    	; 0x2334 <calculate_dac_value+0x108>
	{
		// do we have exact value?
		if (lambda_values_milli[counter] == lambda_millis)
    228e:	8b 81       	ldd	r24, Y+3	; 0x03
    2290:	88 2f       	mov	r24, r24
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	80 50       	subi	r24, 0x00	; 0
    229a:	9f 4f       	sbci	r25, 0xFF	; 255
    229c:	fc 01       	movw	r30, r24
    229e:	20 81       	ld	r18, Z
    22a0:	31 81       	ldd	r19, Z+1	; 0x01
    22a2:	8e 81       	ldd	r24, Y+6	; 0x06
    22a4:	9f 81       	ldd	r25, Y+7	; 0x07
    22a6:	28 17       	cp	r18, r24
    22a8:	39 07       	cpc	r19, r25
    22aa:	69 f4       	brne	.+26     	; 0x22c6 <calculate_dac_value+0x9a>
		{
			retVal = dac_values[counter];
    22ac:	8b 81       	ldd	r24, Y+3	; 0x03
    22ae:	88 2f       	mov	r24, r24
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	84 5e       	subi	r24, 0xE4	; 228
    22b8:	9e 4f       	sbci	r25, 0xFE	; 254
    22ba:	fc 01       	movw	r30, r24
    22bc:	80 81       	ld	r24, Z
    22be:	91 81       	ldd	r25, Z+1	; 0x01
    22c0:	9a 83       	std	Y+2, r25	; 0x02
    22c2:	89 83       	std	Y+1, r24	; 0x01
    22c4:	34 c0       	rjmp	.+104    	; 0x232e <calculate_dac_value+0x102>
		}
		
		// are we between two values? if so, calculate
		else if (lambda_values_milli[counter] <= lambda_millis && lambda_millis <= lambda_values_milli[counter + 1])
    22c6:	8b 81       	ldd	r24, Y+3	; 0x03
    22c8:	88 2f       	mov	r24, r24
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	88 0f       	add	r24, r24
    22ce:	99 1f       	adc	r25, r25
    22d0:	80 50       	subi	r24, 0x00	; 0
    22d2:	9f 4f       	sbci	r25, 0xFF	; 255
    22d4:	fc 01       	movw	r30, r24
    22d6:	20 81       	ld	r18, Z
    22d8:	31 81       	ldd	r19, Z+1	; 0x01
    22da:	8e 81       	ldd	r24, Y+6	; 0x06
    22dc:	9f 81       	ldd	r25, Y+7	; 0x07
    22de:	82 17       	cp	r24, r18
    22e0:	93 07       	cpc	r25, r19
    22e2:	28 f1       	brcs	.+74     	; 0x232e <calculate_dac_value+0x102>
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	88 2f       	mov	r24, r24
    22e8:	90 e0       	ldi	r25, 0x00	; 0
    22ea:	01 96       	adiw	r24, 0x01	; 1
    22ec:	88 0f       	add	r24, r24
    22ee:	99 1f       	adc	r25, r25
    22f0:	80 50       	subi	r24, 0x00	; 0
    22f2:	9f 4f       	sbci	r25, 0xFF	; 255
    22f4:	fc 01       	movw	r30, r24
    22f6:	20 81       	ld	r18, Z
    22f8:	31 81       	ldd	r19, Z+1	; 0x01
    22fa:	8e 81       	ldd	r24, Y+6	; 0x06
    22fc:	9f 81       	ldd	r25, Y+7	; 0x07
    22fe:	28 17       	cp	r18, r24
    2300:	39 07       	cpc	r19, r25
    2302:	a8 f0       	brcs	.+42     	; 0x232e <calculate_dac_value+0x102>
		{
			// calculate voltage for given lambda:
			voltage_millis = lambda_millis * 7 - 4300;
    2304:	2e 81       	ldd	r18, Y+6	; 0x06
    2306:	3f 81       	ldd	r19, Y+7	; 0x07
    2308:	c9 01       	movw	r24, r18
    230a:	88 0f       	add	r24, r24
    230c:	99 1f       	adc	r25, r25
    230e:	88 0f       	add	r24, r24
    2310:	99 1f       	adc	r25, r25
    2312:	88 0f       	add	r24, r24
    2314:	99 1f       	adc	r25, r25
    2316:	82 1b       	sub	r24, r18
    2318:	93 0b       	sbc	r25, r19
    231a:	8c 5c       	subi	r24, 0xCC	; 204
    231c:	90 41       	sbci	r25, 0x10	; 16
    231e:	9d 83       	std	Y+5, r25	; 0x05
    2320:	8c 83       	std	Y+4, r24	; 0x04
			retVal = voltage2dac_millis(voltage_millis);	
    2322:	8c 81       	ldd	r24, Y+4	; 0x04
    2324:	9d 81       	ldd	r25, Y+5	; 0x05
    2326:	0e 94 de 10 	call	0x21bc	; 0x21bc <__voltage2dac_millis>
    232a:	9a 83       	std	Y+2, r25	; 0x02
    232c:	89 83       	std	Y+1, r24	; 0x01
		}
		counter++;
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	8f 5f       	subi	r24, 0xFF	; 255
    2332:	8b 83       	std	Y+3, r24	; 0x03
	{
		retVal = dac_values[13];
	}
	
	
	while (retVal == 0 && counter < 14)
    2334:	89 81       	ldd	r24, Y+1	; 0x01
    2336:	9a 81       	ldd	r25, Y+2	; 0x02
    2338:	89 2b       	or	r24, r25
    233a:	21 f4       	brne	.+8      	; 0x2344 <calculate_dac_value+0x118>
    233c:	8b 81       	ldd	r24, Y+3	; 0x03
    233e:	8e 30       	cpi	r24, 0x0E	; 14
    2340:	08 f4       	brcc	.+2      	; 0x2344 <calculate_dac_value+0x118>
    2342:	a5 cf       	rjmp	.-182    	; 0x228e <calculate_dac_value+0x62>
			retVal = voltage2dac_millis(voltage_millis);	
		}
		counter++;
	}
	
	return retVal;	
    2344:	89 81       	ldd	r24, Y+1	; 0x01
    2346:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2348:	27 96       	adiw	r28, 0x07	; 7
    234a:	0f b6       	in	r0, 0x3f	; 63
    234c:	f8 94       	cli
    234e:	de bf       	out	0x3e, r29	; 62
    2350:	0f be       	out	0x3f, r0	; 63
    2352:	cd bf       	out	0x3d, r28	; 61
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	08 95       	ret

0000235a <dac_setValue>:

void dac_setValue(uint16_t value)
{
    235a:	cf 93       	push	r28
    235c:	df 93       	push	r29
    235e:	00 d0       	rcall	.+0      	; 0x2360 <dac_setValue+0x6>
    2360:	cd b7       	in	r28, 0x3d	; 61
    2362:	de b7       	in	r29, 0x3e	; 62
    2364:	9a 83       	std	Y+2, r25	; 0x02
    2366:	89 83       	std	Y+1, r24	; 0x01
	DAC = value;
    2368:	81 e9       	ldi	r24, 0x91	; 145
    236a:	90 e0       	ldi	r25, 0x00	; 0
    236c:	29 81       	ldd	r18, Y+1	; 0x01
    236e:	3a 81       	ldd	r19, Y+2	; 0x02
    2370:	fc 01       	movw	r30, r24
    2372:	31 83       	std	Z+1, r19	; 0x01
    2374:	20 83       	st	Z, r18
}
    2376:	00 00       	nop
    2378:	0f 90       	pop	r0
    237a:	0f 90       	pop	r0
    237c:	df 91       	pop	r29
    237e:	cf 91       	pop	r28
    2380:	08 95       	ret

00002382 <dac_update_output>:

void dac_update_output (uint16_t lambda_millis)
{
    2382:	cf 93       	push	r28
    2384:	df 93       	push	r29
    2386:	00 d0       	rcall	.+0      	; 0x2388 <dac_update_output+0x6>
    2388:	00 d0       	rcall	.+0      	; 0x238a <dac_update_output+0x8>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9c 83       	std	Y+4, r25	; 0x04
    2390:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmpValue = 0;
    2392:	1a 82       	std	Y+2, r1	; 0x02
    2394:	19 82       	std	Y+1, r1	; 0x01
	
	tmpValue = calculate_dac_value(lambda_millis);
    2396:	8b 81       	ldd	r24, Y+3	; 0x03
    2398:	9c 81       	ldd	r25, Y+4	; 0x04
    239a:	0e 94 16 11 	call	0x222c	; 0x222c <calculate_dac_value>
    239e:	9a 83       	std	Y+2, r25	; 0x02
    23a0:	89 83       	std	Y+1, r24	; 0x01
	DAC = tmpValue;
    23a2:	81 e9       	ldi	r24, 0x91	; 145
    23a4:	90 e0       	ldi	r25, 0x00	; 0
    23a6:	29 81       	ldd	r18, Y+1	; 0x01
    23a8:	3a 81       	ldd	r19, Y+2	; 0x02
    23aa:	fc 01       	movw	r30, r24
    23ac:	31 83       	std	Z+1, r19	; 0x01
    23ae:	20 83       	st	Z, r18
    23b0:	00 00       	nop
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	0f 90       	pop	r0
    23b8:	0f 90       	pop	r0
    23ba:	df 91       	pop	r29
    23bc:	cf 91       	pop	r28
    23be:	08 95       	ret

000023c0 <__adc2voltage_millis>:
{
	return ((float) __v * 5UL / 1024UL );
}

static __inline uint16_t __adc2voltage_millis(uint16_t __v)
{
    23c0:	cf 93       	push	r28
    23c2:	df 93       	push	r29
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <__adc2voltage_millis+0x6>
    23c6:	cd b7       	in	r28, 0x3d	; 61
    23c8:	de b7       	in	r29, 0x3e	; 62
    23ca:	9a 83       	std	Y+2, r25	; 0x02
    23cc:	89 83       	std	Y+1, r24	; 0x01
	return ((uint16_t) __v * 5000UL / 1024UL );
    23ce:	89 81       	ldd	r24, Y+1	; 0x01
    23d0:	9a 81       	ldd	r25, Y+2	; 0x02
    23d2:	9c 01       	movw	r18, r24
    23d4:	40 e0       	ldi	r20, 0x00	; 0
    23d6:	50 e0       	ldi	r21, 0x00	; 0
    23d8:	88 e8       	ldi	r24, 0x88	; 136
    23da:	93 e1       	ldi	r25, 0x13	; 19
    23dc:	dc 01       	movw	r26, r24
    23de:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__muluhisi3>
    23e2:	dc 01       	movw	r26, r24
    23e4:	cb 01       	movw	r24, r22
    23e6:	07 2e       	mov	r0, r23
    23e8:	7a e0       	ldi	r23, 0x0A	; 10
    23ea:	b6 95       	lsr	r27
    23ec:	a7 95       	ror	r26
    23ee:	97 95       	ror	r25
    23f0:	87 95       	ror	r24
    23f2:	7a 95       	dec	r23
    23f4:	d1 f7       	brne	.-12     	; 0x23ea <__adc2voltage_millis+0x2a>
    23f6:	70 2d       	mov	r23, r0
}
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	df 91       	pop	r29
    23fe:	cf 91       	pop	r28
    2400:	08 95       	ret

00002402 <__duty_cycle2voltage>:
{
	return (uint16_t)(((float)_targetVoltageMillis / (float)_supplyVoltageMillis) * _steps - 1);
}

static __inline uint16_t __duty_cycle2voltage(uint16_t _supplyVoltageMillis, uint16_t _dutyCycle, uint16_t _steps)
{
    2402:	cf 92       	push	r12
    2404:	df 92       	push	r13
    2406:	ef 92       	push	r14
    2408:	ff 92       	push	r15
    240a:	cf 93       	push	r28
    240c:	df 93       	push	r29
    240e:	00 d0       	rcall	.+0      	; 0x2410 <__duty_cycle2voltage+0xe>
    2410:	00 d0       	rcall	.+0      	; 0x2412 <__duty_cycle2voltage+0x10>
    2412:	00 d0       	rcall	.+0      	; 0x2414 <__duty_cycle2voltage+0x12>
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9a 83       	std	Y+2, r25	; 0x02
    241a:	89 83       	std	Y+1, r24	; 0x01
    241c:	7c 83       	std	Y+4, r23	; 0x04
    241e:	6b 83       	std	Y+3, r22	; 0x03
    2420:	5e 83       	std	Y+6, r21	; 0x06
    2422:	4d 83       	std	Y+5, r20	; 0x05
	return ((float) _supplyVoltageMillis / (float) _steps) *_dutyCycle;
    2424:	89 81       	ldd	r24, Y+1	; 0x01
    2426:	9a 81       	ldd	r25, Y+2	; 0x02
    2428:	cc 01       	movw	r24, r24
    242a:	a0 e0       	ldi	r26, 0x00	; 0
    242c:	b0 e0       	ldi	r27, 0x00	; 0
    242e:	bc 01       	movw	r22, r24
    2430:	cd 01       	movw	r24, r26
    2432:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    2436:	6b 01       	movw	r12, r22
    2438:	7c 01       	movw	r14, r24
    243a:	8d 81       	ldd	r24, Y+5	; 0x05
    243c:	9e 81       	ldd	r25, Y+6	; 0x06
    243e:	cc 01       	movw	r24, r24
    2440:	a0 e0       	ldi	r26, 0x00	; 0
    2442:	b0 e0       	ldi	r27, 0x00	; 0
    2444:	bc 01       	movw	r22, r24
    2446:	cd 01       	movw	r24, r26
    2448:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	9c 01       	movw	r18, r24
    2452:	ad 01       	movw	r20, r26
    2454:	c7 01       	movw	r24, r14
    2456:	b6 01       	movw	r22, r12
    2458:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	6c 01       	movw	r12, r24
    2462:	7d 01       	movw	r14, r26
    2464:	8b 81       	ldd	r24, Y+3	; 0x03
    2466:	9c 81       	ldd	r25, Y+4	; 0x04
    2468:	cc 01       	movw	r24, r24
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9c 01       	movw	r18, r24
    247c:	ad 01       	movw	r20, r26
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	bc 01       	movw	r22, r24
    248c:	cd 01       	movw	r24, r26
    248e:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
}
    2496:	26 96       	adiw	r28, 0x06	; 6
    2498:	0f b6       	in	r0, 0x3f	; 63
    249a:	f8 94       	cli
    249c:	de bf       	out	0x3e, r29	; 62
    249e:	0f be       	out	0x3f, r0	; 63
    24a0:	cd bf       	out	0x3d, r28	; 61
    24a2:	df 91       	pop	r29
    24a4:	cf 91       	pop	r28
    24a6:	ff 90       	pop	r15
    24a8:	ef 90       	pop	r14
    24aa:	df 90       	pop	r13
    24ac:	cf 90       	pop	r12
    24ae:	08 95       	ret

000024b0 <main>:
extern tSensor sensor1;
extern tBoard board;
extern volatile uint16_t ms_counter;

int main(void)
{
    24b0:	0f 93       	push	r16
    24b2:	cf 93       	push	r28
    24b4:	df 93       	push	r29
    24b6:	00 d0       	rcall	.+0      	; 0x24b8 <main+0x8>
    24b8:	00 d0       	rcall	.+0      	; 0x24ba <main+0xa>
    24ba:	00 d0       	rcall	.+0      	; 0x24bc <main+0xc>
    24bc:	cd b7       	in	r28, 0x3d	; 61
    24be:	de b7       	in	r29, 0x3e	; 62
	uint8_t counter = 0;
    24c0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t adcValue = 0;
    24c2:	1b 82       	std	Y+3, r1	; 0x03
    24c4:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t pid = 0;
    24c6:	1d 82       	std	Y+5, r1	; 0x05
    24c8:	1c 82       	std	Y+4, r1	; 0x04
	tcj125_command_status commStatus;

	adc_init();
    24ca:	0e 94 7d 00 	call	0xfa	; 0xfa <adc_init>
	spi_init();
    24ce:	0e 94 01 1b 	call	0x3602	; 0x3602 <spi_init>
	dac_init();
    24d2:	0e 94 02 11 	call	0x2204	; 0x2204 <dac_init>
	can_network_init(1);
    24d6:	81 e0       	ldi	r24, 0x01	; 1
    24d8:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <can_network_init>

	board_init(&board);	
    24dc:	88 ee       	ldi	r24, 0xE8	; 232
    24de:	91 e0       	ldi	r25, 0x01	; 1
    24e0:	0e 94 76 1b 	call	0x36ec	; 0x36ec <board_init>
	sensor_init(&sensor1, 8);
    24e4:	68 e0       	ldi	r22, 0x08	; 8
    24e6:	8b ec       	ldi	r24, 0xCB	; 203
    24e8:	91 e0       	ldi	r25, 0x01	; 1
    24ea:	0e 94 5d 14 	call	0x28ba	; 0x28ba <sensor_init>
	board_read_inputs(&board);
    24ee:	88 ee       	ldi	r24, 0xE8	; 232
    24f0:	91 e0       	ldi	r25, 0x01	; 1
    24f2:	0e 94 c1 1b 	call	0x3782	; 0x3782 <board_read_inputs>
	
	timer_delay_ms(100);
    24f6:	84 e6       	ldi	r24, 0x64	; 100
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	0e 94 4e 1c 	call	0x389c	; 0x389c <timer_delay_ms>
	
	sei();
    24fe:	78 94       	sei

	commStatus = cj125_set_calibration_mode();
    2500:	0e 94 9a 10 	call	0x2134	; 0x2134 <cj125_set_calibration_mode>
    2504:	8e 83       	std	Y+6, r24	; 0x06
	
	
	timer_delay_ms(100);
    2506:	84 e6       	ldi	r24, 0x64	; 100
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	0e 94 4e 1c 	call	0x389c	; 0x389c <timer_delay_ms>
	
	// Ur value: lower value means hotter sensor...
	// Ur_ref is something round about 1v (ADC 208 = 1015mV)
	// Ua_ref is something round about 1.5v (ADC 309 =  1503mV)
	
	sensor1.Ur_ref_raw = adc_read_UR();
    250e:	0e 94 3c 01 	call	0x278	; 0x278 <adc_read_UR>
    2512:	90 93 d4 01 	sts	0x01D4, r25	; 0x8001d4 <sensor1+0x9>
    2516:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <sensor1+0x8>
	sensor1.Ur_ref = adc2voltage_millis(sensor1.Ur_ref_raw);
    251a:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <sensor1+0x8>
    251e:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <sensor1+0x9>
    2522:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__adc2voltage_millis>
    2526:	90 93 d2 01 	sts	0x01D2, r25	; 0x8001d2 <sensor1+0x7>
    252a:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <sensor1+0x6>
	sensor1.Ua_ref = adc2voltage_millis(adc_read_UA());
    252e:	0e 94 28 01 	call	0x250	; 0x250 <adc_read_UA>
    2532:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__adc2voltage_millis>
    2536:	90 93 d0 01 	sts	0x01D0, r25	; 0x8001d0 <sensor1+0x5>
    253a:	80 93 cf 01 	sts	0x01CF, r24	; 0x8001cf <sensor1+0x4>

	cj125_set_running_mode_v8();
    253e:	0e 94 bf 10 	call	0x217e	; 0x217e <cj125_set_running_mode_v8>
	timer_delay_ms(100);
    2542:	84 e6       	ldi	r24, 0x64	; 100
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	0e 94 4e 1c 	call	0x389c	; 0x389c <timer_delay_ms>

	sensor_update_status();
    254a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <sensor_update_status>
	
	init_1ms_timer();
    254e:	0e 94 0a 1c 	call	0x3814	; 0x3814 <init_1ms_timer>
	
	while(1)
	{
		if (bit_check(TIMER_TASKS, BIT_TIMER_10ms))
    2552:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2556:	88 2f       	mov	r24, r24
    2558:	90 e0       	ldi	r25, 0x00	; 0
    255a:	81 70       	andi	r24, 0x01	; 1
    255c:	99 27       	eor	r25, r25
    255e:	89 2b       	or	r24, r25
    2560:	e9 f1       	breq	.+122    	; 0x25dc <main+0x12c>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_10ms);
    2562:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2566:	8e 7f       	andi	r24, 0xFE	; 254
    2568:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
			
			if (sensor1.SensorStatus == RUN && sensor1.SystemVoltageOK == true && sensor1.SensorFaultState == OK)
    256c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    2570:	86 30       	cpi	r24, 0x06	; 6
    2572:	b9 f4       	brne	.+46     	; 0x25a2 <main+0xf2>
    2574:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <sensor1+0x18>
    2578:	88 23       	and	r24, r24
    257a:	99 f0       	breq	.+38     	; 0x25a2 <main+0xf2>
    257c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <sensor1+0x1b>
    2580:	88 23       	and	r24, r24
    2582:	79 f4       	brne	.+30     	; 0x25a2 <main+0xf2>
			{
				sensor_update_ua(&sensor1, adc2voltage_millis(adc_read_UA()));
    2584:	0e 94 28 01 	call	0x250	; 0x250 <adc_read_UA>
    2588:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__adc2voltage_millis>
    258c:	bc 01       	movw	r22, r24
    258e:	8b ec       	ldi	r24, 0xCB	; 203
    2590:	91 e0       	ldi	r25, 0x01	; 1
    2592:	0e 94 7e 18 	call	0x30fc	; 0x30fc <sensor_update_ua>
				dac_update_output(sensor1.Lambda);
    2596:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <sensor1+0x10>
    259a:	90 91 dc 01 	lds	r25, 0x01DC	; 0x8001dc <sensor1+0x11>
    259e:	0e 94 c1 11 	call	0x2382	; 0x2382 <dac_update_output>
			}
			
			can_send_aem_message(sensor1);
    25a2:	8d b7       	in	r24, 0x3d	; 61
    25a4:	9e b7       	in	r25, 0x3e	; 62
    25a6:	4d 97       	sbiw	r24, 0x1d	; 29
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	9e bf       	out	0x3e, r25	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	8d bf       	out	0x3d, r24	; 61
    25b2:	8d b7       	in	r24, 0x3d	; 61
    25b4:	9e b7       	in	r25, 0x3e	; 62
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	2d e1       	ldi	r18, 0x1D	; 29
    25ba:	eb ec       	ldi	r30, 0xCB	; 203
    25bc:	f1 e0       	ldi	r31, 0x01	; 1
    25be:	dc 01       	movw	r26, r24
    25c0:	01 90       	ld	r0, Z+
    25c2:	0d 92       	st	X+, r0
    25c4:	2a 95       	dec	r18
    25c6:	e1 f7       	brne	.-8      	; 0x25c0 <main+0x110>
    25c8:	0e 94 a7 0e 	call	0x1d4e	; 0x1d4e <can_send_aem_message>
    25cc:	8d b7       	in	r24, 0x3d	; 61
    25ce:	9e b7       	in	r25, 0x3e	; 62
    25d0:	4d 96       	adiw	r24, 0x1d	; 29
    25d2:	0f b6       	in	r0, 0x3f	; 63
    25d4:	f8 94       	cli
    25d6:	de bf       	out	0x3e, r29	; 62
    25d8:	0f be       	out	0x3f, r0	; 63
    25da:	cd bf       	out	0x3d, r28	; 61
		}
		
		if (bit_check(TIMER_TASKS, BIT_TIMER_100ms))
    25dc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    25e0:	88 2f       	mov	r24, r24
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	88 70       	andi	r24, 0x08	; 8
    25e6:	99 27       	eor	r25, r25
    25e8:	89 2b       	or	r24, r25
    25ea:	09 f4       	brne	.+2      	; 0x25ee <main+0x13e>
    25ec:	3f c0       	rjmp	.+126    	; 0x266c <main+0x1bc>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_100ms);
    25ee:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    25f2:	87 7f       	andi	r24, 0xF7	; 247
    25f4:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
			sensor_update_status();
    25f8:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <sensor_update_status>
			
			// is sensor activated? Transition from RESET (inactive) to start up
			if (isActive() && sensor1.SensorStatus == RESET)
    25fc:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <isActive>
    2600:	88 23       	and	r24, r24
    2602:	69 f0       	breq	.+26     	; 0x261e <main+0x16e>
    2604:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    2608:	88 23       	and	r24, r24
    260a:	49 f4       	brne	.+18     	; 0x261e <main+0x16e>
			{
				// set sensor to evap_start_up...
				// from now is heater active and starting up
				// first of all, some time (2s are enough) for evaporation (heater = 1,5v)
				sensor1.SensorStatus = EVAP_START_UP;
    260c:	8f e0       	ldi	r24, 0x0F	; 15
    260e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
				heater_setVoltage(1500);
    2612:	8c ed       	ldi	r24, 0xDC	; 220
    2614:	95 e0       	ldi	r25, 0x05	; 5
    2616:	0e 94 c8 18 	call	0x3190	; 0x3190 <heater_setVoltage>
				counter = 0;
    261a:	19 82       	std	Y+1, r1	; 0x01
    261c:	27 c0       	rjmp	.+78     	; 0x266c <main+0x1bc>
			} 
			else if (isActive() && sensor1.SensorStatus == EVAP_START_UP)
    261e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <isActive>
    2622:	88 23       	and	r24, r24
    2624:	91 f0       	breq	.+36     	; 0x264a <main+0x19a>
    2626:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    262a:	8f 30       	cpi	r24, 0x0F	; 15
    262c:	71 f4       	brne	.+28     	; 0x264a <main+0x19a>
			{
				// sensor is in evaporation state, so just check counter 
				counter++;
    262e:	89 81       	ldd	r24, Y+1	; 0x01
    2630:	8f 5f       	subi	r24, 0xFF	; 255
    2632:	89 83       	std	Y+1, r24	; 0x01
				
				// if time is over, switch status to next status, WARMING UP
				// set heater to 8.5v
				if (counter == 20)
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	84 31       	cpi	r24, 0x14	; 20
    2638:	c9 f4       	brne	.+50     	; 0x266c <main+0x1bc>
				{
					sensor1.SensorStatus = WARMING_UP;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
					heater_setVoltage(8500);
    2640:	84 e3       	ldi	r24, 0x34	; 52
    2642:	91 e2       	ldi	r25, 0x21	; 33
    2644:	0e 94 c8 18 	call	0x3190	; 0x3190 <heater_setVoltage>
				// sensor is in evaporation state, so just check counter 
				counter++;
				
				// if time is over, switch status to next status, WARMING UP
				// set heater to 8.5v
				if (counter == 20)
    2648:	11 c0       	rjmp	.+34     	; 0x266c <main+0x1bc>
					heater_setVoltage(8500);
				}
			}
			
			// transition from non-reset (i.e. warming up, evaporation, run, ...) to dactivated:
			else if (!isActive() && sensor1.SensorStatus != RESET)
    264a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <isActive>
    264e:	98 2f       	mov	r25, r24
    2650:	81 e0       	ldi	r24, 0x01	; 1
    2652:	89 27       	eor	r24, r25
    2654:	88 23       	and	r24, r24
    2656:	51 f0       	breq	.+20     	; 0x266c <main+0x1bc>
    2658:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    265c:	88 23       	and	r24, r24
    265e:	31 f0       	breq	.+12     	; 0x266c <main+0x1bc>
			{
				sensor_shutdown();
    2660:	0e 94 c7 1a 	call	0x358e	; 0x358e <sensor_shutdown>
				dac_setValue(0);
    2664:	80 e0       	ldi	r24, 0x00	; 0
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	0e 94 ad 11 	call	0x235a	; 0x235a <dac_setValue>
			}
		}
		
		if (bit_check(TIMER_TASKS, BIT_TIMER_250ms))
    266c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2670:	88 2f       	mov	r24, r24
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	80 71       	andi	r24, 0x10	; 16
    2676:	99 27       	eor	r25, r25
    2678:	89 2b       	or	r24, r25
    267a:	09 f4       	brne	.+2      	; 0x267e <main+0x1ce>
    267c:	6a cf       	rjmp	.-300    	; 0x2552 <main+0xa2>
		{
			bit_clear(TIMER_TASKS, BIT_TIMER_250ms);
    267e:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2682:	8f 7e       	andi	r24, 0xEF	; 239
    2684:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
			
			can_send_debug_message(sensor1.Ur_ref_raw, adcValue, pid, sensor1.Signature, sensor1.diagRegister);
    2688:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <sensor1+0x19>
    268c:	20 91 cb 01 	lds	r18, 0x01CB	; 0x8001cb <sensor1>
    2690:	3c 81       	ldd	r19, Y+4	; 0x04
    2692:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <sensor1+0x8>
    2696:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <sensor1+0x9>
    269a:	6a 81       	ldd	r22, Y+2	; 0x02
    269c:	7b 81       	ldd	r23, Y+3	; 0x03
    269e:	04 2f       	mov	r16, r20
    26a0:	43 2f       	mov	r20, r19
    26a2:	0e 94 87 0f 	call	0x1f0e	; 0x1f0e <can_send_debug_message>
			
			if (isActive() && sensor1.SensorStatus == WARMING_UP && sensor1.SystemVoltageOK && sensor1.SensorFaultState == OK)
    26a6:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <isActive>
    26aa:	88 23       	and	r24, r24
    26ac:	69 f1       	breq	.+90     	; 0x2708 <main+0x258>
    26ae:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    26b2:	81 30       	cpi	r24, 0x01	; 1
    26b4:	49 f5       	brne	.+82     	; 0x2708 <main+0x258>
    26b6:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <sensor1+0x18>
    26ba:	88 23       	and	r24, r24
    26bc:	29 f1       	breq	.+74     	; 0x2708 <main+0x258>
    26be:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <sensor1+0x1b>
    26c2:	88 23       	and	r24, r24
    26c4:	09 f5       	brne	.+66     	; 0x2708 <main+0x258>
			{
				// increase heater voltage
				sensor1.HeaterVoltage += 100;
    26c6:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <sensor1+0x14>
    26ca:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <sensor1+0x15>
    26ce:	8c 59       	subi	r24, 0x9C	; 156
    26d0:	9f 4f       	sbci	r25, 0xFF	; 255
    26d2:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <sensor1+0x15>
    26d6:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <sensor1+0x14>
				
				// heater voltage is 13v, warming up is completed, next status is RUN
				if (sensor1.HeaterVoltage > 13000)
    26da:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <sensor1+0x14>
    26de:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <sensor1+0x15>
    26e2:	89 3c       	cpi	r24, 0xC9	; 201
    26e4:	92 43       	sbci	r25, 0x32	; 50
    26e6:	48 f0       	brcs	.+18     	; 0x26fa <main+0x24a>
				{
					sensor1.HeaterVoltage = 13000;
    26e8:	88 ec       	ldi	r24, 0xC8	; 200
    26ea:	92 e3       	ldi	r25, 0x32	; 50
    26ec:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <sensor1+0x15>
    26f0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <sensor1+0x14>
					sensor1.SensorStatus = RUN;
    26f4:	86 e0       	ldi	r24, 0x06	; 6
    26f6:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
				}
				heater_setVoltage(sensor1.HeaterVoltage);
    26fa:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <sensor1+0x14>
    26fe:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <sensor1+0x15>
    2702:	0e 94 c8 18 	call	0x3190	; 0x3190 <heater_setVoltage>
    2706:	2f c0       	rjmp	.+94     	; 0x2766 <main+0x2b6>
			}
			
			// we are in a running state, just adjust PID and heater
			else if (isActive() && sensor1.SensorStatus == RUN)
    2708:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <isActive>
    270c:	88 23       	and	r24, r24
    270e:	09 f4       	brne	.+2      	; 0x2712 <main+0x262>
    2710:	20 cf       	rjmp	.-448    	; 0x2552 <main+0xa2>
    2712:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    2716:	86 30       	cpi	r24, 0x06	; 6
    2718:	09 f0       	breq	.+2      	; 0x271c <main+0x26c>
    271a:	1b cf       	rjmp	.-458    	; 0x2552 <main+0xa2>
			{
				adcValue = adc_read_UR();
    271c:	0e 94 3c 01 	call	0x278	; 0x278 <adc_read_UR>
    2720:	9b 83       	std	Y+3, r25	; 0x03
    2722:	8a 83       	std	Y+2, r24	; 0x02
				pid = calc_pid(sensor1.Ur_ref_raw, adcValue, true);
    2724:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <sensor1+0x8>
    2728:	90 91 d4 01 	lds	r25, 0x01D4	; 0x8001d4 <sensor1+0x9>
    272c:	2a 81       	ldd	r18, Y+2	; 0x02
    272e:	3b 81       	ldd	r19, Y+3	; 0x03
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	b9 01       	movw	r22, r18
    2734:	0e 94 25 19 	call	0x324a	; 0x324a <calc_pid>
    2738:	9d 83       	std	Y+5, r25	; 0x05
    273a:	8c 83       	std	Y+4, r24	; 0x04
				heater_setVoltage(duty_cycle2voltage(sensor1.SystemVoltage, pid, 256));
    273c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <sensor1+0x16>
    2740:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <sensor1+0x17>
    2744:	2c 81       	ldd	r18, Y+4	; 0x04
    2746:	3d 81       	ldd	r19, Y+5	; 0x05
    2748:	40 e0       	ldi	r20, 0x00	; 0
    274a:	51 e0       	ldi	r21, 0x01	; 1
    274c:	b9 01       	movw	r22, r18
    274e:	0e 94 01 12 	call	0x2402	; 0x2402 <__duty_cycle2voltage>
    2752:	0e 94 c8 18 	call	0x3190	; 0x3190 <heater_setVoltage>
				sensor1.Ur = adc2voltage_millis(adcValue);
    2756:	8a 81       	ldd	r24, Y+2	; 0x02
    2758:	9b 81       	ldd	r25, Y+3	; 0x03
    275a:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <__adc2voltage_millis>
    275e:	90 93 d8 01 	sts	0x01D8, r25	; 0x8001d8 <sensor1+0xd>
    2762:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <sensor1+0xc>
			}
		}
	}
    2766:	f5 ce       	rjmp	.-534    	; 0x2552 <main+0xa2>

00002768 <__adc2voltage_millis>:
}

void sensor_update_ur (tSensor *sensor, uint16_t ur_millis)
{
	sensor->Ur = ur_millis;
}
    2768:	cf 93       	push	r28
    276a:	df 93       	push	r29
    276c:	00 d0       	rcall	.+0      	; 0x276e <__adc2voltage_millis+0x6>
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9a 83       	std	Y+2, r25	; 0x02
    2774:	89 83       	std	Y+1, r24	; 0x01
    2776:	89 81       	ldd	r24, Y+1	; 0x01
    2778:	9a 81       	ldd	r25, Y+2	; 0x02
    277a:	9c 01       	movw	r18, r24
    277c:	40 e0       	ldi	r20, 0x00	; 0
    277e:	50 e0       	ldi	r21, 0x00	; 0
    2780:	88 e8       	ldi	r24, 0x88	; 136
    2782:	93 e1       	ldi	r25, 0x13	; 19
    2784:	dc 01       	movw	r26, r24
    2786:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__muluhisi3>
    278a:	dc 01       	movw	r26, r24
    278c:	cb 01       	movw	r24, r22
    278e:	07 2e       	mov	r0, r23
    2790:	7a e0       	ldi	r23, 0x0A	; 10
    2792:	b6 95       	lsr	r27
    2794:	a7 95       	ror	r26
    2796:	97 95       	ror	r25
    2798:	87 95       	ror	r24
    279a:	7a 95       	dec	r23
    279c:	d1 f7       	brne	.-12     	; 0x2792 <__adc2voltage_millis+0x2a>
    279e:	70 2d       	mov	r23, r0
    27a0:	0f 90       	pop	r0
    27a2:	0f 90       	pop	r0
    27a4:	df 91       	pop	r29
    27a6:	cf 91       	pop	r28
    27a8:	08 95       	ret

000027aa <__voltage2duty_cycle>:
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	cf 93       	push	r28
    27b4:	df 93       	push	r29
    27b6:	00 d0       	rcall	.+0      	; 0x27b8 <__voltage2duty_cycle+0xe>
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <__voltage2duty_cycle+0x10>
    27ba:	00 d0       	rcall	.+0      	; 0x27bc <__voltage2duty_cycle+0x12>
    27bc:	cd b7       	in	r28, 0x3d	; 61
    27be:	de b7       	in	r29, 0x3e	; 62
    27c0:	9a 83       	std	Y+2, r25	; 0x02
    27c2:	89 83       	std	Y+1, r24	; 0x01
    27c4:	7c 83       	std	Y+4, r23	; 0x04
    27c6:	6b 83       	std	Y+3, r22	; 0x03
    27c8:	5e 83       	std	Y+6, r21	; 0x06
    27ca:	4d 83       	std	Y+5, r20	; 0x05
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	cc 01       	movw	r24, r24
    27d2:	a0 e0       	ldi	r26, 0x00	; 0
    27d4:	b0 e0       	ldi	r27, 0x00	; 0
    27d6:	bc 01       	movw	r22, r24
    27d8:	cd 01       	movw	r24, r26
    27da:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    27de:	6b 01       	movw	r12, r22
    27e0:	7c 01       	movw	r14, r24
    27e2:	8b 81       	ldd	r24, Y+3	; 0x03
    27e4:	9c 81       	ldd	r25, Y+4	; 0x04
    27e6:	cc 01       	movw	r24, r24
    27e8:	a0 e0       	ldi	r26, 0x00	; 0
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	bc 01       	movw	r22, r24
    27ee:	cd 01       	movw	r24, r26
    27f0:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    27f4:	dc 01       	movw	r26, r24
    27f6:	cb 01       	movw	r24, r22
    27f8:	9c 01       	movw	r18, r24
    27fa:	ad 01       	movw	r20, r26
    27fc:	c7 01       	movw	r24, r14
    27fe:	b6 01       	movw	r22, r12
    2800:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    2804:	dc 01       	movw	r26, r24
    2806:	cb 01       	movw	r24, r22
    2808:	6c 01       	movw	r12, r24
    280a:	7d 01       	movw	r14, r26
    280c:	8d 81       	ldd	r24, Y+5	; 0x05
    280e:	9e 81       	ldd	r25, Y+6	; 0x06
    2810:	cc 01       	movw	r24, r24
    2812:	a0 e0       	ldi	r26, 0x00	; 0
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	bc 01       	movw	r22, r24
    2818:	cd 01       	movw	r24, r26
    281a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    281e:	dc 01       	movw	r26, r24
    2820:	cb 01       	movw	r24, r22
    2822:	9c 01       	movw	r18, r24
    2824:	ad 01       	movw	r20, r26
    2826:	c7 01       	movw	r24, r14
    2828:	b6 01       	movw	r22, r12
    282a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	40 e8       	ldi	r20, 0x80	; 128
    2838:	5f e3       	ldi	r21, 0x3F	; 63
    283a:	bc 01       	movw	r22, r24
    283c:	cd 01       	movw	r24, r26
    283e:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
    2842:	dc 01       	movw	r26, r24
    2844:	cb 01       	movw	r24, r22
    2846:	bc 01       	movw	r22, r24
    2848:	cd 01       	movw	r24, r26
    284a:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__fixunssfsi>
    284e:	dc 01       	movw	r26, r24
    2850:	cb 01       	movw	r24, r22
    2852:	26 96       	adiw	r28, 0x06	; 6
    2854:	0f b6       	in	r0, 0x3f	; 63
    2856:	f8 94       	cli
    2858:	de bf       	out	0x3e, r29	; 62
    285a:	0f be       	out	0x3f, r0	; 63
    285c:	cd bf       	out	0x3d, r28	; 61
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	ff 90       	pop	r15
    2864:	ef 90       	pop	r14
    2866:	df 90       	pop	r13
    2868:	cf 90       	pop	r12
    286a:	08 95       	ret

0000286c <__is_between>:
    286c:	cf 93       	push	r28
    286e:	df 93       	push	r29
    2870:	00 d0       	rcall	.+0      	; 0x2872 <__is_between+0x6>
    2872:	00 d0       	rcall	.+0      	; 0x2874 <__is_between+0x8>
    2874:	00 d0       	rcall	.+0      	; 0x2876 <__is_between+0xa>
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
    287e:	7c 83       	std	Y+4, r23	; 0x04
    2880:	6b 83       	std	Y+3, r22	; 0x03
    2882:	5e 83       	std	Y+6, r21	; 0x06
    2884:	4d 83       	std	Y+5, r20	; 0x05
    2886:	29 81       	ldd	r18, Y+1	; 0x01
    2888:	3a 81       	ldd	r19, Y+2	; 0x02
    288a:	8b 81       	ldd	r24, Y+3	; 0x03
    288c:	9c 81       	ldd	r25, Y+4	; 0x04
    288e:	82 17       	cp	r24, r18
    2890:	93 07       	cpc	r25, r19
    2892:	48 f4       	brcc	.+18     	; 0x28a6 <__is_between+0x3a>
    2894:	29 81       	ldd	r18, Y+1	; 0x01
    2896:	3a 81       	ldd	r19, Y+2	; 0x02
    2898:	8d 81       	ldd	r24, Y+5	; 0x05
    289a:	9e 81       	ldd	r25, Y+6	; 0x06
    289c:	28 17       	cp	r18, r24
    289e:	39 07       	cpc	r19, r25
    28a0:	10 f4       	brcc	.+4      	; 0x28a6 <__is_between+0x3a>
    28a2:	81 e0       	ldi	r24, 0x01	; 1
    28a4:	01 c0       	rjmp	.+2      	; 0x28a8 <__is_between+0x3c>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	26 96       	adiw	r28, 0x06	; 6
    28aa:	0f b6       	in	r0, 0x3f	; 63
    28ac:	f8 94       	cli
    28ae:	de bf       	out	0x3e, r29	; 62
    28b0:	0f be       	out	0x3f, r0	; 63
    28b2:	cd bf       	out	0x3d, r28	; 61
    28b4:	df 91       	pop	r29
    28b6:	cf 91       	pop	r28
    28b8:	08 95       	ret

000028ba <sensor_init>:
    28ba:	cf 93       	push	r28
    28bc:	df 93       	push	r29
    28be:	00 d0       	rcall	.+0      	; 0x28c0 <sensor_init+0x6>
    28c0:	1f 92       	push	r1
    28c2:	cd b7       	in	r28, 0x3d	; 61
    28c4:	de b7       	in	r29, 0x3e	; 62
    28c6:	9a 83       	std	Y+2, r25	; 0x02
    28c8:	89 83       	std	Y+1, r24	; 0x01
    28ca:	6b 83       	std	Y+3, r22	; 0x03
    28cc:	89 81       	ldd	r24, Y+1	; 0x01
    28ce:	9a 81       	ldd	r25, Y+2	; 0x02
    28d0:	fc 01       	movw	r30, r24
    28d2:	12 8e       	std	Z+26, r1	; 0x1a
    28d4:	89 81       	ldd	r24, Y+1	; 0x01
    28d6:	9a 81       	ldd	r25, Y+2	; 0x02
    28d8:	fc 01       	movw	r30, r24
    28da:	13 8e       	std	Z+27, r1	; 0x1b
    28dc:	89 81       	ldd	r24, Y+1	; 0x01
    28de:	9a 81       	ldd	r25, Y+2	; 0x02
    28e0:	2c ec       	ldi	r18, 0xCC	; 204
    28e2:	31 ef       	ldi	r19, 0xF1	; 241
    28e4:	fc 01       	movw	r30, r24
    28e6:	32 83       	std	Z+2, r19	; 0x02
    28e8:	21 83       	std	Z+1, r18	; 0x01
    28ea:	89 81       	ldd	r24, Y+1	; 0x01
    28ec:	9a 81       	ldd	r25, Y+2	; 0x02
    28ee:	fc 01       	movw	r30, r24
    28f0:	17 86       	std	Z+15, r1	; 0x0f
    28f2:	16 86       	std	Z+14, r1	; 0x0e
    28f4:	89 81       	ldd	r24, Y+1	; 0x01
    28f6:	9a 81       	ldd	r25, Y+2	; 0x02
    28f8:	fc 01       	movw	r30, r24
    28fa:	11 8a       	std	Z+17, r1	; 0x11
    28fc:	10 8a       	std	Z+16, r1	; 0x10
    28fe:	89 81       	ldd	r24, Y+1	; 0x01
    2900:	9a 81       	ldd	r25, Y+2	; 0x02
    2902:	fc 01       	movw	r30, r24
    2904:	13 86       	std	Z+11, r1	; 0x0b
    2906:	12 86       	std	Z+10, r1	; 0x0a
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	fc 01       	movw	r30, r24
    290e:	15 82       	std	Z+5, r1	; 0x05
    2910:	14 82       	std	Z+4, r1	; 0x04
    2912:	89 81       	ldd	r24, Y+1	; 0x01
    2914:	9a 81       	ldd	r25, Y+2	; 0x02
    2916:	fc 01       	movw	r30, r24
    2918:	15 86       	std	Z+13, r1	; 0x0d
    291a:	14 86       	std	Z+12, r1	; 0x0c
    291c:	89 81       	ldd	r24, Y+1	; 0x01
    291e:	9a 81       	ldd	r25, Y+2	; 0x02
    2920:	fc 01       	movw	r30, r24
    2922:	13 8a       	std	Z+19, r1	; 0x13
    2924:	12 8a       	std	Z+18, r1	; 0x12
    2926:	89 81       	ldd	r24, Y+1	; 0x01
    2928:	9a 81       	ldd	r25, Y+2	; 0x02
    292a:	fc 01       	movw	r30, r24
    292c:	15 8a       	std	Z+21, r1	; 0x15
    292e:	14 8a       	std	Z+20, r1	; 0x14
    2930:	89 81       	ldd	r24, Y+1	; 0x01
    2932:	9a 81       	ldd	r25, Y+2	; 0x02
    2934:	fc 01       	movw	r30, r24
    2936:	11 8e       	std	Z+25, r1	; 0x19
    2938:	89 81       	ldd	r24, Y+1	; 0x01
    293a:	9a 81       	ldd	r25, Y+2	; 0x02
    293c:	22 e0       	ldi	r18, 0x02	; 2
    293e:	fc 01       	movw	r30, r24
    2940:	24 8f       	std	Z+28, r18	; 0x1c
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	2b 81       	ldd	r18, Y+3	; 0x03
    2948:	fc 01       	movw	r30, r24
    294a:	23 83       	std	Z+3, r18	; 0x03
    294c:	89 81       	ldd	r24, Y+1	; 0x01
    294e:	9a 81       	ldd	r25, Y+2	; 0x02
    2950:	0e 94 40 10 	call	0x2080	; 0x2080 <cj125_readSignature>
    2954:	0e 94 b3 14 	call	0x2966	; 0x2966 <heater_init>
    2958:	00 00       	nop
    295a:	0f 90       	pop	r0
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	df 91       	pop	r29
    2962:	cf 91       	pop	r28
    2964:	08 95       	ret

00002966 <heater_init>:
    2966:	cf 93       	push	r28
    2968:	df 93       	push	r29
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
    296e:	87 e2       	ldi	r24, 0x27	; 39
    2970:	90 e0       	ldi	r25, 0x00	; 0
    2972:	27 e2       	ldi	r18, 0x27	; 39
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	f9 01       	movw	r30, r18
    2978:	20 81       	ld	r18, Z
    297a:	22 60       	ori	r18, 0x02	; 2
    297c:	fc 01       	movw	r30, r24
    297e:	20 83       	st	Z, r18
    2980:	88 e2       	ldi	r24, 0x28	; 40
    2982:	90 e0       	ldi	r25, 0x00	; 0
    2984:	28 e2       	ldi	r18, 0x28	; 40
    2986:	30 e0       	ldi	r19, 0x00	; 0
    2988:	f9 01       	movw	r30, r18
    298a:	20 81       	ld	r18, Z
    298c:	2d 7f       	andi	r18, 0xFD	; 253
    298e:	fc 01       	movw	r30, r24
    2990:	20 83       	st	Z, r18
    2992:	80 e8       	ldi	r24, 0x80	; 128
    2994:	90 e0       	ldi	r25, 0x00	; 0
    2996:	20 e8       	ldi	r18, 0x80	; 128
    2998:	30 e0       	ldi	r19, 0x00	; 0
    299a:	f9 01       	movw	r30, r18
    299c:	20 81       	ld	r18, Z
    299e:	21 62       	ori	r18, 0x21	; 33
    29a0:	fc 01       	movw	r30, r24
    29a2:	20 83       	st	Z, r18
    29a4:	81 e8       	ldi	r24, 0x81	; 129
    29a6:	90 e0       	ldi	r25, 0x00	; 0
    29a8:	21 e8       	ldi	r18, 0x81	; 129
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	f9 01       	movw	r30, r18
    29ae:	20 81       	ld	r18, Z
    29b0:	2c 60       	ori	r18, 0x0C	; 12
    29b2:	fc 01       	movw	r30, r24
    29b4:	20 83       	st	Z, r18
    29b6:	80 e0       	ldi	r24, 0x00	; 0
    29b8:	90 e0       	ldi	r25, 0x00	; 0
    29ba:	a0 ea       	ldi	r26, 0xA0	; 160
    29bc:	b0 e4       	ldi	r27, 0x40	; 64
    29be:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <pidController>
    29c2:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <pidController+0x1>
    29c6:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <pidController+0x2>
    29ca:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <pidController+0x3>
    29ce:	8d ec       	ldi	r24, 0xCD	; 205
    29d0:	9c ec       	ldi	r25, 0xCC	; 204
    29d2:	ac e4       	ldi	r26, 0x4C	; 76
    29d4:	bf e3       	ldi	r27, 0x3F	; 63
    29d6:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <pidController+0x4>
    29da:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <pidController+0x5>
    29de:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <pidController+0x6>
    29e2:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <pidController+0x7>
    29e6:	8d ec       	ldi	r24, 0xCD	; 205
    29e8:	9c ec       	ldi	r25, 0xCC	; 204
    29ea:	ac e4       	ldi	r26, 0x4C	; 76
    29ec:	b0 e4       	ldi	r27, 0x40	; 64
    29ee:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <pidController+0x8>
    29f2:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <pidController+0x9>
    29f6:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <pidController+0xa>
    29fa:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <pidController+0xb>
    29fe:	86 e0       	ldi	r24, 0x06	; 6
    2a00:	9f ef       	ldi	r25, 0xFF	; 255
    2a02:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <pidController+0x11>
    2a06:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <pidController+0x10>
    2a0a:	8a ef       	ldi	r24, 0xFA	; 250
    2a0c:	90 e0       	ldi	r25, 0x00	; 0
    2a0e:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <pidController+0x13>
    2a12:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <pidController+0x12>
    2a16:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <pidController+0x15>
    2a1a:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <pidController+0x14>
    2a1e:	80 ef       	ldi	r24, 0xF0	; 240
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pidController+0x17>
    2a26:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pidController+0x16>
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <heater_setDuty>
    2a32:	00 00       	nop
    2a34:	df 91       	pop	r29
    2a36:	cf 91       	pop	r28
    2a38:	08 95       	ret

00002a3a <sensor_update_status>:
    2a3a:	cf 93       	push	r28
    2a3c:	df 93       	push	r29
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read_battery>
    2a46:	0e 94 b4 13 	call	0x2768	; 0x2768 <__adc2voltage_millis>
    2a4a:	9c 01       	movw	r18, r24
    2a4c:	c9 01       	movw	r24, r18
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	88 0f       	add	r24, r24
    2a54:	99 1f       	adc	r25, r25
    2a56:	82 0f       	add	r24, r18
    2a58:	93 1f       	adc	r25, r19
    2a5a:	90 93 e2 01 	sts	0x01E2, r25	; 0x8001e2 <sensor1+0x17>
    2a5e:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <sensor1+0x16>
    2a62:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <sensor1+0x16>
    2a66:	90 91 e2 01 	lds	r25, 0x01E2	; 0x8001e2 <sensor1+0x17>
    2a6a:	44 e7       	ldi	r20, 0x74	; 116
    2a6c:	50 e4       	ldi	r21, 0x40	; 64
    2a6e:	68 ef       	ldi	r22, 0xF8	; 248
    2a70:	7a e2       	ldi	r23, 0x2A	; 42
    2a72:	0e 94 36 14 	call	0x286c	; 0x286c <__is_between>
    2a76:	98 2f       	mov	r25, r24
    2a78:	81 e0       	ldi	r24, 0x01	; 1
    2a7a:	99 23       	and	r25, r25
    2a7c:	09 f4       	brne	.+2      	; 0x2a80 <sensor_update_status+0x46>
    2a7e:	80 e0       	ldi	r24, 0x00	; 0
    2a80:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <sensor1+0x18>
    2a84:	84 ee       	ldi	r24, 0xE4	; 228
    2a86:	91 e0       	ldi	r25, 0x01	; 1
    2a88:	0e 94 6d 10 	call	0x20da	; 0x20da <cj125_readStatus>
    2a8c:	88 23       	and	r24, r24
    2a8e:	31 f5       	brne	.+76     	; 0x2adc <sensor_update_status+0xa2>
    2a90:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    2a94:	8f 3f       	cpi	r24, 0xFF	; 255
    2a96:	19 f4       	brne	.+6      	; 0x2a9e <sensor_update_status+0x64>
    2a98:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <sensor1+0x1b>
    2a9c:	26 c0       	rjmp	.+76     	; 0x2aea <sensor_update_status+0xb0>
    2a9e:	81 e0       	ldi	r24, 0x01	; 1
    2aa0:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <sensor1+0x1b>
    2aa4:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    2aa8:	82 95       	swap	r24
    2aaa:	86 95       	lsr	r24
    2aac:	86 95       	lsr	r24
    2aae:	83 70       	andi	r24, 0x03	; 3
    2ab0:	88 2f       	mov	r24, r24
    2ab2:	90 e0       	ldi	r25, 0x00	; 0
    2ab4:	83 70       	andi	r24, 0x03	; 3
    2ab6:	99 27       	eor	r25, r25
    2ab8:	81 30       	cpi	r24, 0x01	; 1
    2aba:	91 05       	cpc	r25, r1
    2abc:	51 f0       	breq	.+20     	; 0x2ad2 <sensor_update_status+0x98>
    2abe:	82 30       	cpi	r24, 0x02	; 2
    2ac0:	91 05       	cpc	r25, r1
    2ac2:	19 f0       	breq	.+6      	; 0x2aca <sensor_update_status+0x90>
    2ac4:	89 2b       	or	r24, r25
    2ac6:	09 f0       	breq	.+2      	; 0x2aca <sensor_update_status+0x90>
    2ac8:	10 c0       	rjmp	.+32     	; 0x2aea <sensor_update_status+0xb0>
    2aca:	89 e0       	ldi	r24, 0x09	; 9
    2acc:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
    2ad0:	0c c0       	rjmp	.+24     	; 0x2aea <sensor_update_status+0xb0>
    2ad2:	8a e0       	ldi	r24, 0x0A	; 10
    2ad4:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
    2ad8:	00 00       	nop
    2ada:	07 c0       	rjmp	.+14     	; 0x2aea <sensor_update_status+0xb0>
    2adc:	84 e1       	ldi	r24, 0x14	; 20
    2ade:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <sensor1+0x1b>
    2ae8:	00 c0       	rjmp	.+0      	; 0x2aea <sensor_update_status+0xb0>
    2aea:	00 00       	nop
    2aec:	df 91       	pop	r29
    2aee:	cf 91       	pop	r28
    2af0:	08 95       	ret

00002af2 <calculate_ip>:
    2af2:	cf 92       	push	r12
    2af4:	df 92       	push	r13
    2af6:	ef 92       	push	r14
    2af8:	ff 92       	push	r15
    2afa:	cf 93       	push	r28
    2afc:	df 93       	push	r29
    2afe:	cd b7       	in	r28, 0x3d	; 61
    2b00:	de b7       	in	r29, 0x3e	; 62
    2b02:	2f 97       	sbiw	r28, 0x0f	; 15
    2b04:	0f b6       	in	r0, 0x3f	; 63
    2b06:	f8 94       	cli
    2b08:	de bf       	out	0x3e, r29	; 62
    2b0a:	0f be       	out	0x3f, r0	; 63
    2b0c:	cd bf       	out	0x3d, r28	; 61
    2b0e:	9c 87       	std	Y+12, r25	; 0x0c
    2b10:	8b 87       	std	Y+11, r24	; 0x0b
    2b12:	7e 87       	std	Y+14, r23	; 0x0e
    2b14:	6d 87       	std	Y+13, r22	; 0x0d
    2b16:	4f 87       	std	Y+15, r20	; 0x0f
    2b18:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b1a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b1c:	9c 01       	movw	r18, r24
    2b1e:	40 e0       	ldi	r20, 0x00	; 0
    2b20:	50 e0       	ldi	r21, 0x00	; 0
    2b22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2b24:	9c 85       	ldd	r25, Y+12	; 0x0c
    2b26:	cc 01       	movw	r24, r24
    2b28:	a0 e0       	ldi	r26, 0x00	; 0
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	28 1b       	sub	r18, r24
    2b2e:	39 0b       	sbc	r19, r25
    2b30:	4a 0b       	sbc	r20, r26
    2b32:	5b 0b       	sbc	r21, r27
    2b34:	88 ee       	ldi	r24, 0xE8	; 232
    2b36:	93 e0       	ldi	r25, 0x03	; 3
    2b38:	dc 01       	movw	r26, r24
    2b3a:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__muluhisi3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	ab 83       	std	Y+3, r26	; 0x03
    2b48:	bc 83       	std	Y+4, r27	; 0x04
    2b4a:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <sensor1+0x1>
    2b4e:	90 91 cd 01 	lds	r25, 0x01CD	; 0x8001cd <sensor1+0x2>
    2b52:	9c 01       	movw	r18, r24
    2b54:	40 e0       	ldi	r20, 0x00	; 0
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2b5a:	88 2f       	mov	r24, r24
    2b5c:	90 e0       	ldi	r25, 0x00	; 0
    2b5e:	a0 e0       	ldi	r26, 0x00	; 0
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	bc 01       	movw	r22, r24
    2b64:	cd 01       	movw	r24, r26
    2b66:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <__mulsi3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	8d 83       	std	Y+5, r24	; 0x05
    2b70:	9e 83       	std	Y+6, r25	; 0x06
    2b72:	af 83       	std	Y+7, r26	; 0x07
    2b74:	b8 87       	std	Y+8, r27	; 0x08
    2b76:	69 81       	ldd	r22, Y+1	; 0x01
    2b78:	7a 81       	ldd	r23, Y+2	; 0x02
    2b7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b7e:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2b82:	6b 01       	movw	r12, r22
    2b84:	7c 01       	movw	r14, r24
    2b86:	6d 81       	ldd	r22, Y+5	; 0x05
    2b88:	7e 81       	ldd	r23, Y+6	; 0x06
    2b8a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b8c:	98 85       	ldd	r25, Y+8	; 0x08
    2b8e:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2b92:	dc 01       	movw	r26, r24
    2b94:	cb 01       	movw	r24, r22
    2b96:	9c 01       	movw	r18, r24
    2b98:	ad 01       	movw	r20, r26
    2b9a:	c7 01       	movw	r24, r14
    2b9c:	b6 01       	movw	r22, r12
    2b9e:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    2ba2:	dc 01       	movw	r26, r24
    2ba4:	cb 01       	movw	r24, r22
    2ba6:	20 e0       	ldi	r18, 0x00	; 0
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	4a e7       	ldi	r20, 0x7A	; 122
    2bac:	54 e4       	ldi	r21, 0x44	; 68
    2bae:	bc 01       	movw	r22, r24
    2bb0:	cd 01       	movw	r24, r26
    2bb2:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    2bb6:	dc 01       	movw	r26, r24
    2bb8:	cb 01       	movw	r24, r22
    2bba:	bc 01       	movw	r22, r24
    2bbc:	cd 01       	movw	r24, r26
    2bbe:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__fixsfsi>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	cb 01       	movw	r24, r22
    2bc6:	9a 87       	std	Y+10, r25	; 0x0a
    2bc8:	89 87       	std	Y+9, r24	; 0x09
    2bca:	89 85       	ldd	r24, Y+9	; 0x09
    2bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bce:	2f 96       	adiw	r28, 0x0f	; 15
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	ff 90       	pop	r15
    2be0:	ef 90       	pop	r14
    2be2:	df 90       	pop	r13
    2be4:	cf 90       	pop	r12
    2be6:	08 95       	ret

00002be8 <calculate_lambda>:
    2be8:	cf 92       	push	r12
    2bea:	df 92       	push	r13
    2bec:	ef 92       	push	r14
    2bee:	ff 92       	push	r15
    2bf0:	cf 93       	push	r28
    2bf2:	df 93       	push	r29
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	2d 97       	sbiw	r28, 0x0d	; 13
    2bfa:	0f b6       	in	r0, 0x3f	; 63
    2bfc:	f8 94       	cli
    2bfe:	de bf       	out	0x3e, r29	; 62
    2c00:	0f be       	out	0x3f, r0	; 63
    2c02:	cd bf       	out	0x3d, r28	; 61
    2c04:	9d 87       	std	Y+13, r25	; 0x0d
    2c06:	8c 87       	std	Y+12, r24	; 0x0c
    2c08:	19 82       	std	Y+1, r1	; 0x01
    2c0a:	1b 82       	std	Y+3, r1	; 0x03
    2c0c:	1a 82       	std	Y+2, r1	; 0x02
    2c0e:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <ip_values>
    2c12:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <ip_values+0x1>
    2c16:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c18:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c1a:	28 17       	cp	r18, r24
    2c1c:	39 07       	cpc	r19, r25
    2c1e:	34 f0       	brlt	.+12     	; 0x2c2c <calculate_lambda+0x44>
    2c20:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <lambda_values>
    2c24:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <lambda_values+0x1>
    2c28:	9b 83       	std	Y+3, r25	; 0x03
    2c2a:	8a 83       	std	Y+2, r24	; 0x02
    2c2c:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <ip_values+0x2c>
    2c30:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <ip_values+0x2d>
    2c34:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c36:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c38:	82 17       	cp	r24, r18
    2c3a:	93 07       	cpc	r25, r19
    2c3c:	0c f4       	brge	.+2      	; 0x2c40 <calculate_lambda+0x58>
    2c3e:	ff c0       	rjmp	.+510    	; 0x2e3e <calculate_lambda+0x256>
    2c40:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lambda_values+0x2c>
    2c44:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <lambda_values+0x2d>
    2c48:	9b 83       	std	Y+3, r25	; 0x03
    2c4a:	8a 83       	std	Y+2, r24	; 0x02
    2c4c:	f8 c0       	rjmp	.+496    	; 0x2e3e <calculate_lambda+0x256>
    2c4e:	89 81       	ldd	r24, Y+1	; 0x01
    2c50:	88 2f       	mov	r24, r24
    2c52:	90 e0       	ldi	r25, 0x00	; 0
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	88 5c       	subi	r24, 0xC8	; 200
    2c5a:	9e 4f       	sbci	r25, 0xFE	; 254
    2c5c:	fc 01       	movw	r30, r24
    2c5e:	20 81       	ld	r18, Z
    2c60:	31 81       	ldd	r19, Z+1	; 0x01
    2c62:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c64:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c66:	28 17       	cp	r18, r24
    2c68:	39 07       	cpc	r19, r25
    2c6a:	69 f4       	brne	.+26     	; 0x2c86 <calculate_lambda+0x9e>
    2c6c:	89 81       	ldd	r24, Y+1	; 0x01
    2c6e:	88 2f       	mov	r24, r24
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	88 0f       	add	r24, r24
    2c74:	99 1f       	adc	r25, r25
    2c76:	88 59       	subi	r24, 0x98	; 152
    2c78:	9e 4f       	sbci	r25, 0xFE	; 254
    2c7a:	fc 01       	movw	r30, r24
    2c7c:	80 81       	ld	r24, Z
    2c7e:	91 81       	ldd	r25, Z+1	; 0x01
    2c80:	9b 83       	std	Y+3, r25	; 0x03
    2c82:	8a 83       	std	Y+2, r24	; 0x02
    2c84:	d9 c0       	rjmp	.+434    	; 0x2e38 <calculate_lambda+0x250>
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	88 2f       	mov	r24, r24
    2c8a:	90 e0       	ldi	r25, 0x00	; 0
    2c8c:	88 0f       	add	r24, r24
    2c8e:	99 1f       	adc	r25, r25
    2c90:	88 5c       	subi	r24, 0xC8	; 200
    2c92:	9e 4f       	sbci	r25, 0xFE	; 254
    2c94:	fc 01       	movw	r30, r24
    2c96:	20 81       	ld	r18, Z
    2c98:	31 81       	ldd	r19, Z+1	; 0x01
    2c9a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2c9c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2c9e:	82 17       	cp	r24, r18
    2ca0:	93 07       	cpc	r25, r19
    2ca2:	0c f4       	brge	.+2      	; 0x2ca6 <calculate_lambda+0xbe>
    2ca4:	c9 c0       	rjmp	.+402    	; 0x2e38 <calculate_lambda+0x250>
    2ca6:	89 81       	ldd	r24, Y+1	; 0x01
    2ca8:	88 2f       	mov	r24, r24
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	01 96       	adiw	r24, 0x01	; 1
    2cae:	88 0f       	add	r24, r24
    2cb0:	99 1f       	adc	r25, r25
    2cb2:	88 5c       	subi	r24, 0xC8	; 200
    2cb4:	9e 4f       	sbci	r25, 0xFE	; 254
    2cb6:	fc 01       	movw	r30, r24
    2cb8:	20 81       	ld	r18, Z
    2cba:	31 81       	ldd	r19, Z+1	; 0x01
    2cbc:	8c 85       	ldd	r24, Y+12	; 0x0c
    2cbe:	9d 85       	ldd	r25, Y+13	; 0x0d
    2cc0:	28 17       	cp	r18, r24
    2cc2:	39 07       	cpc	r19, r25
    2cc4:	0c f4       	brge	.+2      	; 0x2cc8 <calculate_lambda+0xe0>
    2cc6:	b8 c0       	rjmp	.+368    	; 0x2e38 <calculate_lambda+0x250>
    2cc8:	89 81       	ldd	r24, Y+1	; 0x01
    2cca:	88 2f       	mov	r24, r24
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	88 59       	subi	r24, 0x98	; 152
    2cd6:	9e 4f       	sbci	r25, 0xFE	; 254
    2cd8:	fc 01       	movw	r30, r24
    2cda:	20 81       	ld	r18, Z
    2cdc:	31 81       	ldd	r19, Z+1	; 0x01
    2cde:	89 81       	ldd	r24, Y+1	; 0x01
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	88 59       	subi	r24, 0x98	; 152
    2cea:	9e 4f       	sbci	r25, 0xFE	; 254
    2cec:	fc 01       	movw	r30, r24
    2cee:	80 81       	ld	r24, Z
    2cf0:	91 81       	ldd	r25, Z+1	; 0x01
    2cf2:	a9 01       	movw	r20, r18
    2cf4:	48 1b       	sub	r20, r24
    2cf6:	59 0b       	sbc	r21, r25
    2cf8:	ca 01       	movw	r24, r20
    2cfa:	cc 01       	movw	r24, r24
    2cfc:	a0 e0       	ldi	r26, 0x00	; 0
    2cfe:	b0 e0       	ldi	r27, 0x00	; 0
    2d00:	bc 01       	movw	r22, r24
    2d02:	cd 01       	movw	r24, r26
    2d04:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    2d08:	6b 01       	movw	r12, r22
    2d0a:	7c 01       	movw	r14, r24
    2d0c:	89 81       	ldd	r24, Y+1	; 0x01
    2d0e:	88 2f       	mov	r24, r24
    2d10:	90 e0       	ldi	r25, 0x00	; 0
    2d12:	01 96       	adiw	r24, 0x01	; 1
    2d14:	88 0f       	add	r24, r24
    2d16:	99 1f       	adc	r25, r25
    2d18:	88 5c       	subi	r24, 0xC8	; 200
    2d1a:	9e 4f       	sbci	r25, 0xFE	; 254
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	20 81       	ld	r18, Z
    2d20:	31 81       	ldd	r19, Z+1	; 0x01
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	88 5c       	subi	r24, 0xC8	; 200
    2d2e:	9e 4f       	sbci	r25, 0xFE	; 254
    2d30:	fc 01       	movw	r30, r24
    2d32:	80 81       	ld	r24, Z
    2d34:	91 81       	ldd	r25, Z+1	; 0x01
    2d36:	a9 01       	movw	r20, r18
    2d38:	48 1b       	sub	r20, r24
    2d3a:	59 0b       	sbc	r21, r25
    2d3c:	ca 01       	movw	r24, r20
    2d3e:	09 2e       	mov	r0, r25
    2d40:	00 0c       	add	r0, r0
    2d42:	aa 0b       	sbc	r26, r26
    2d44:	bb 0b       	sbc	r27, r27
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9c 01       	movw	r18, r24
    2d54:	ad 01       	movw	r20, r26
    2d56:	c7 01       	movw	r24, r14
    2d58:	b6 01       	movw	r22, r12
    2d5a:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    2d5e:	dc 01       	movw	r26, r24
    2d60:	cb 01       	movw	r24, r22
    2d62:	8c 83       	std	Y+4, r24	; 0x04
    2d64:	9d 83       	std	Y+5, r25	; 0x05
    2d66:	ae 83       	std	Y+6, r26	; 0x06
    2d68:	bf 83       	std	Y+7, r27	; 0x07
    2d6a:	89 81       	ldd	r24, Y+1	; 0x01
    2d6c:	88 2f       	mov	r24, r24
    2d6e:	90 e0       	ldi	r25, 0x00	; 0
    2d70:	01 96       	adiw	r24, 0x01	; 1
    2d72:	88 0f       	add	r24, r24
    2d74:	99 1f       	adc	r25, r25
    2d76:	88 59       	subi	r24, 0x98	; 152
    2d78:	9e 4f       	sbci	r25, 0xFE	; 254
    2d7a:	fc 01       	movw	r30, r24
    2d7c:	80 81       	ld	r24, Z
    2d7e:	91 81       	ldd	r25, Z+1	; 0x01
    2d80:	cc 01       	movw	r24, r24
    2d82:	a0 e0       	ldi	r26, 0x00	; 0
    2d84:	b0 e0       	ldi	r27, 0x00	; 0
    2d86:	bc 01       	movw	r22, r24
    2d88:	cd 01       	movw	r24, r26
    2d8a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    2d8e:	6b 01       	movw	r12, r22
    2d90:	7c 01       	movw	r14, r24
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	88 2f       	mov	r24, r24
    2d96:	90 e0       	ldi	r25, 0x00	; 0
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	88 0f       	add	r24, r24
    2d9c:	99 1f       	adc	r25, r25
    2d9e:	88 5c       	subi	r24, 0xC8	; 200
    2da0:	9e 4f       	sbci	r25, 0xFE	; 254
    2da2:	fc 01       	movw	r30, r24
    2da4:	80 81       	ld	r24, Z
    2da6:	91 81       	ldd	r25, Z+1	; 0x01
    2da8:	09 2e       	mov	r0, r25
    2daa:	00 0c       	add	r0, r0
    2dac:	aa 0b       	sbc	r26, r26
    2dae:	bb 0b       	sbc	r27, r27
    2db0:	bc 01       	movw	r22, r24
    2db2:	cd 01       	movw	r24, r26
    2db4:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2db8:	dc 01       	movw	r26, r24
    2dba:	cb 01       	movw	r24, r22
    2dbc:	2c 81       	ldd	r18, Y+4	; 0x04
    2dbe:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc0:	4e 81       	ldd	r20, Y+6	; 0x06
    2dc2:	5f 81       	ldd	r21, Y+7	; 0x07
    2dc4:	bc 01       	movw	r22, r24
    2dc6:	cd 01       	movw	r24, r26
    2dc8:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    2dcc:	dc 01       	movw	r26, r24
    2dce:	cb 01       	movw	r24, r22
    2dd0:	9c 01       	movw	r18, r24
    2dd2:	ad 01       	movw	r20, r26
    2dd4:	c7 01       	movw	r24, r14
    2dd6:	b6 01       	movw	r22, r12
    2dd8:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
    2ddc:	dc 01       	movw	r26, r24
    2dde:	cb 01       	movw	r24, r22
    2de0:	88 87       	std	Y+8, r24	; 0x08
    2de2:	99 87       	std	Y+9, r25	; 0x09
    2de4:	aa 87       	std	Y+10, r26	; 0x0a
    2de6:	bb 87       	std	Y+11, r27	; 0x0b
    2de8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dea:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dec:	09 2e       	mov	r0, r25
    2dee:	00 0c       	add	r0, r0
    2df0:	aa 0b       	sbc	r26, r26
    2df2:	bb 0b       	sbc	r27, r27
    2df4:	bc 01       	movw	r22, r24
    2df6:	cd 01       	movw	r24, r26
    2df8:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	2c 81       	ldd	r18, Y+4	; 0x04
    2e02:	3d 81       	ldd	r19, Y+5	; 0x05
    2e04:	4e 81       	ldd	r20, Y+6	; 0x06
    2e06:	5f 81       	ldd	r21, Y+7	; 0x07
    2e08:	bc 01       	movw	r22, r24
    2e0a:	cd 01       	movw	r24, r26
    2e0c:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    2e10:	dc 01       	movw	r26, r24
    2e12:	cb 01       	movw	r24, r22
    2e14:	28 85       	ldd	r18, Y+8	; 0x08
    2e16:	39 85       	ldd	r19, Y+9	; 0x09
    2e18:	4a 85       	ldd	r20, Y+10	; 0x0a
    2e1a:	5b 85       	ldd	r21, Y+11	; 0x0b
    2e1c:	bc 01       	movw	r22, r24
    2e1e:	cd 01       	movw	r24, r26
    2e20:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
    2e24:	dc 01       	movw	r26, r24
    2e26:	cb 01       	movw	r24, r22
    2e28:	bc 01       	movw	r22, r24
    2e2a:	cd 01       	movw	r24, r26
    2e2c:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__fixunssfsi>
    2e30:	dc 01       	movw	r26, r24
    2e32:	cb 01       	movw	r24, r22
    2e34:	9b 83       	std	Y+3, r25	; 0x03
    2e36:	8a 83       	std	Y+2, r24	; 0x02
    2e38:	89 81       	ldd	r24, Y+1	; 0x01
    2e3a:	8f 5f       	subi	r24, 0xFF	; 255
    2e3c:	89 83       	std	Y+1, r24	; 0x01
    2e3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e40:	9b 81       	ldd	r25, Y+3	; 0x03
    2e42:	89 2b       	or	r24, r25
    2e44:	21 f4       	brne	.+8      	; 0x2e4e <calculate_lambda+0x266>
    2e46:	89 81       	ldd	r24, Y+1	; 0x01
    2e48:	86 31       	cpi	r24, 0x16	; 22
    2e4a:	08 f4       	brcc	.+2      	; 0x2e4e <calculate_lambda+0x266>
    2e4c:	00 cf       	rjmp	.-512    	; 0x2c4e <calculate_lambda+0x66>
    2e4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e50:	9b 81       	ldd	r25, Y+3	; 0x03
    2e52:	89 3c       	cpi	r24, 0xC9	; 201
    2e54:	99 41       	sbci	r25, 0x19	; 25
    2e56:	20 f0       	brcs	.+8      	; 0x2e60 <calculate_lambda+0x278>
    2e58:	89 e9       	ldi	r24, 0x99	; 153
    2e5a:	99 e1       	ldi	r25, 0x19	; 25
    2e5c:	9b 83       	std	Y+3, r25	; 0x03
    2e5e:	8a 83       	std	Y+2, r24	; 0x02
    2e60:	8a 81       	ldd	r24, Y+2	; 0x02
    2e62:	9b 81       	ldd	r25, Y+3	; 0x03
    2e64:	2d 96       	adiw	r28, 0x0d	; 13
    2e66:	0f b6       	in	r0, 0x3f	; 63
    2e68:	f8 94       	cli
    2e6a:	de bf       	out	0x3e, r29	; 62
    2e6c:	0f be       	out	0x3f, r0	; 63
    2e6e:	cd bf       	out	0x3d, r28	; 61
    2e70:	df 91       	pop	r29
    2e72:	cf 91       	pop	r28
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	08 95       	ret

00002e7e <calculate_o2>:
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	2d 97       	sbiw	r28, 0x0d	; 13
    2e90:	0f b6       	in	r0, 0x3f	; 63
    2e92:	f8 94       	cli
    2e94:	de bf       	out	0x3e, r29	; 62
    2e96:	0f be       	out	0x3f, r0	; 63
    2e98:	cd bf       	out	0x3d, r28	; 61
    2e9a:	9d 87       	std	Y+13, r25	; 0x0d
    2e9c:	8c 87       	std	Y+12, r24	; 0x0c
    2e9e:	19 82       	std	Y+1, r1	; 0x01
    2ea0:	1b 82       	std	Y+3, r1	; 0x03
    2ea2:	1a 82       	std	Y+2, r1	; 0x02
    2ea4:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ip_values_o2>
    2ea8:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ip_values_o2+0x1>
    2eac:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eae:	9d 85       	ldd	r25, Y+13	; 0x0d
    2eb0:	28 17       	cp	r18, r24
    2eb2:	39 07       	cpc	r19, r25
    2eb4:	2c f0       	brlt	.+10     	; 0x2ec0 <calculate_o2+0x42>
    2eb6:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <o2_values_percent>
    2eba:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <o2_values_percent+0x1>
    2ebe:	11 c1       	rjmp	.+546    	; 0x30e2 <calculate_o2+0x264>
    2ec0:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <ip_values_o2+0xa>
    2ec4:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <ip_values_o2+0xb>
    2ec8:	8c 85       	ldd	r24, Y+12	; 0x0c
    2eca:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ecc:	82 17       	cp	r24, r18
    2ece:	93 07       	cpc	r25, r19
    2ed0:	0c f4       	brge	.+2      	; 0x2ed4 <calculate_o2+0x56>
    2ed2:	fd c0       	rjmp	.+506    	; 0x30ce <calculate_o2+0x250>
    2ed4:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <o2_values_percent+0xa>
    2ed8:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <o2_values_percent+0xb>
    2edc:	02 c1       	rjmp	.+516    	; 0x30e2 <calculate_o2+0x264>
    2ede:	89 81       	ldd	r24, Y+1	; 0x01
    2ee0:	88 2f       	mov	r24, r24
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	88 0f       	add	r24, r24
    2ee6:	99 1f       	adc	r25, r25
    2ee8:	88 56       	subi	r24, 0x68	; 104
    2eea:	9e 4f       	sbci	r25, 0xFE	; 254
    2eec:	fc 01       	movw	r30, r24
    2eee:	20 81       	ld	r18, Z
    2ef0:	31 81       	ldd	r19, Z+1	; 0x01
    2ef2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ef4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ef6:	28 17       	cp	r18, r24
    2ef8:	39 07       	cpc	r19, r25
    2efa:	69 f4       	brne	.+26     	; 0x2f16 <calculate_o2+0x98>
    2efc:	89 81       	ldd	r24, Y+1	; 0x01
    2efe:	88 2f       	mov	r24, r24
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	88 0f       	add	r24, r24
    2f04:	99 1f       	adc	r25, r25
    2f06:	8c 55       	subi	r24, 0x5C	; 92
    2f08:	9e 4f       	sbci	r25, 0xFE	; 254
    2f0a:	fc 01       	movw	r30, r24
    2f0c:	80 81       	ld	r24, Z
    2f0e:	91 81       	ldd	r25, Z+1	; 0x01
    2f10:	9b 83       	std	Y+3, r25	; 0x03
    2f12:	8a 83       	std	Y+2, r24	; 0x02
    2f14:	d9 c0       	rjmp	.+434    	; 0x30c8 <calculate_o2+0x24a>
    2f16:	89 81       	ldd	r24, Y+1	; 0x01
    2f18:	88 2f       	mov	r24, r24
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 56       	subi	r24, 0x68	; 104
    2f22:	9e 4f       	sbci	r25, 0xFE	; 254
    2f24:	fc 01       	movw	r30, r24
    2f26:	20 81       	ld	r18, Z
    2f28:	31 81       	ldd	r19, Z+1	; 0x01
    2f2a:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f2c:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f2e:	82 17       	cp	r24, r18
    2f30:	93 07       	cpc	r25, r19
    2f32:	0c f4       	brge	.+2      	; 0x2f36 <calculate_o2+0xb8>
    2f34:	c9 c0       	rjmp	.+402    	; 0x30c8 <calculate_o2+0x24a>
    2f36:	89 81       	ldd	r24, Y+1	; 0x01
    2f38:	88 2f       	mov	r24, r24
    2f3a:	90 e0       	ldi	r25, 0x00	; 0
    2f3c:	01 96       	adiw	r24, 0x01	; 1
    2f3e:	88 0f       	add	r24, r24
    2f40:	99 1f       	adc	r25, r25
    2f42:	88 56       	subi	r24, 0x68	; 104
    2f44:	9e 4f       	sbci	r25, 0xFE	; 254
    2f46:	fc 01       	movw	r30, r24
    2f48:	20 81       	ld	r18, Z
    2f4a:	31 81       	ldd	r19, Z+1	; 0x01
    2f4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f50:	28 17       	cp	r18, r24
    2f52:	39 07       	cpc	r19, r25
    2f54:	0c f4       	brge	.+2      	; 0x2f58 <calculate_o2+0xda>
    2f56:	b8 c0       	rjmp	.+368    	; 0x30c8 <calculate_o2+0x24a>
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	88 2f       	mov	r24, r24
    2f5c:	90 e0       	ldi	r25, 0x00	; 0
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	88 0f       	add	r24, r24
    2f62:	99 1f       	adc	r25, r25
    2f64:	8c 55       	subi	r24, 0x5C	; 92
    2f66:	9e 4f       	sbci	r25, 0xFE	; 254
    2f68:	fc 01       	movw	r30, r24
    2f6a:	20 81       	ld	r18, Z
    2f6c:	31 81       	ldd	r19, Z+1	; 0x01
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	88 0f       	add	r24, r24
    2f76:	99 1f       	adc	r25, r25
    2f78:	8c 55       	subi	r24, 0x5C	; 92
    2f7a:	9e 4f       	sbci	r25, 0xFE	; 254
    2f7c:	fc 01       	movw	r30, r24
    2f7e:	80 81       	ld	r24, Z
    2f80:	91 81       	ldd	r25, Z+1	; 0x01
    2f82:	a9 01       	movw	r20, r18
    2f84:	48 1b       	sub	r20, r24
    2f86:	59 0b       	sbc	r21, r25
    2f88:	ca 01       	movw	r24, r20
    2f8a:	cc 01       	movw	r24, r24
    2f8c:	a0 e0       	ldi	r26, 0x00	; 0
    2f8e:	b0 e0       	ldi	r27, 0x00	; 0
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    2f98:	6b 01       	movw	r12, r22
    2f9a:	7c 01       	movw	r14, r24
    2f9c:	89 81       	ldd	r24, Y+1	; 0x01
    2f9e:	88 2f       	mov	r24, r24
    2fa0:	90 e0       	ldi	r25, 0x00	; 0
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	88 0f       	add	r24, r24
    2fa6:	99 1f       	adc	r25, r25
    2fa8:	88 56       	subi	r24, 0x68	; 104
    2faa:	9e 4f       	sbci	r25, 0xFE	; 254
    2fac:	fc 01       	movw	r30, r24
    2fae:	20 81       	ld	r18, Z
    2fb0:	31 81       	ldd	r19, Z+1	; 0x01
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	88 2f       	mov	r24, r24
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	88 0f       	add	r24, r24
    2fba:	99 1f       	adc	r25, r25
    2fbc:	88 56       	subi	r24, 0x68	; 104
    2fbe:	9e 4f       	sbci	r25, 0xFE	; 254
    2fc0:	fc 01       	movw	r30, r24
    2fc2:	80 81       	ld	r24, Z
    2fc4:	91 81       	ldd	r25, Z+1	; 0x01
    2fc6:	a9 01       	movw	r20, r18
    2fc8:	48 1b       	sub	r20, r24
    2fca:	59 0b       	sbc	r21, r25
    2fcc:	ca 01       	movw	r24, r20
    2fce:	09 2e       	mov	r0, r25
    2fd0:	00 0c       	add	r0, r0
    2fd2:	aa 0b       	sbc	r26, r26
    2fd4:	bb 0b       	sbc	r27, r27
    2fd6:	bc 01       	movw	r22, r24
    2fd8:	cd 01       	movw	r24, r26
    2fda:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    2fde:	dc 01       	movw	r26, r24
    2fe0:	cb 01       	movw	r24, r22
    2fe2:	9c 01       	movw	r18, r24
    2fe4:	ad 01       	movw	r20, r26
    2fe6:	c7 01       	movw	r24, r14
    2fe8:	b6 01       	movw	r22, r12
    2fea:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <__divsf3>
    2fee:	dc 01       	movw	r26, r24
    2ff0:	cb 01       	movw	r24, r22
    2ff2:	8c 83       	std	Y+4, r24	; 0x04
    2ff4:	9d 83       	std	Y+5, r25	; 0x05
    2ff6:	ae 83       	std	Y+6, r26	; 0x06
    2ff8:	bf 83       	std	Y+7, r27	; 0x07
    2ffa:	89 81       	ldd	r24, Y+1	; 0x01
    2ffc:	88 2f       	mov	r24, r24
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	01 96       	adiw	r24, 0x01	; 1
    3002:	88 0f       	add	r24, r24
    3004:	99 1f       	adc	r25, r25
    3006:	8c 55       	subi	r24, 0x5C	; 92
    3008:	9e 4f       	sbci	r25, 0xFE	; 254
    300a:	fc 01       	movw	r30, r24
    300c:	80 81       	ld	r24, Z
    300e:	91 81       	ldd	r25, Z+1	; 0x01
    3010:	cc 01       	movw	r24, r24
    3012:	a0 e0       	ldi	r26, 0x00	; 0
    3014:	b0 e0       	ldi	r27, 0x00	; 0
    3016:	bc 01       	movw	r22, r24
    3018:	cd 01       	movw	r24, r26
    301a:	0e 94 56 1e 	call	0x3cac	; 0x3cac <__floatunsisf>
    301e:	6b 01       	movw	r12, r22
    3020:	7c 01       	movw	r14, r24
    3022:	89 81       	ldd	r24, Y+1	; 0x01
    3024:	88 2f       	mov	r24, r24
    3026:	90 e0       	ldi	r25, 0x00	; 0
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	88 0f       	add	r24, r24
    302c:	99 1f       	adc	r25, r25
    302e:	88 56       	subi	r24, 0x68	; 104
    3030:	9e 4f       	sbci	r25, 0xFE	; 254
    3032:	fc 01       	movw	r30, r24
    3034:	80 81       	ld	r24, Z
    3036:	91 81       	ldd	r25, Z+1	; 0x01
    3038:	09 2e       	mov	r0, r25
    303a:	00 0c       	add	r0, r0
    303c:	aa 0b       	sbc	r26, r26
    303e:	bb 0b       	sbc	r27, r27
    3040:	bc 01       	movw	r22, r24
    3042:	cd 01       	movw	r24, r26
    3044:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    3048:	dc 01       	movw	r26, r24
    304a:	cb 01       	movw	r24, r22
    304c:	2c 81       	ldd	r18, Y+4	; 0x04
    304e:	3d 81       	ldd	r19, Y+5	; 0x05
    3050:	4e 81       	ldd	r20, Y+6	; 0x06
    3052:	5f 81       	ldd	r21, Y+7	; 0x07
    3054:	bc 01       	movw	r22, r24
    3056:	cd 01       	movw	r24, r26
    3058:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    305c:	dc 01       	movw	r26, r24
    305e:	cb 01       	movw	r24, r22
    3060:	9c 01       	movw	r18, r24
    3062:	ad 01       	movw	r20, r26
    3064:	c7 01       	movw	r24, r14
    3066:	b6 01       	movw	r22, r12
    3068:	0e 94 41 1d 	call	0x3a82	; 0x3a82 <__subsf3>
    306c:	dc 01       	movw	r26, r24
    306e:	cb 01       	movw	r24, r22
    3070:	88 87       	std	Y+8, r24	; 0x08
    3072:	99 87       	std	Y+9, r25	; 0x09
    3074:	aa 87       	std	Y+10, r26	; 0x0a
    3076:	bb 87       	std	Y+11, r27	; 0x0b
    3078:	8c 85       	ldd	r24, Y+12	; 0x0c
    307a:	9d 85       	ldd	r25, Y+13	; 0x0d
    307c:	09 2e       	mov	r0, r25
    307e:	00 0c       	add	r0, r0
    3080:	aa 0b       	sbc	r26, r26
    3082:	bb 0b       	sbc	r27, r27
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	2c 81       	ldd	r18, Y+4	; 0x04
    3092:	3d 81       	ldd	r19, Y+5	; 0x05
    3094:	4e 81       	ldd	r20, Y+6	; 0x06
    3096:	5f 81       	ldd	r21, Y+7	; 0x07
    3098:	bc 01       	movw	r22, r24
    309a:	cd 01       	movw	r24, r26
    309c:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    30a0:	dc 01       	movw	r26, r24
    30a2:	cb 01       	movw	r24, r22
    30a4:	28 85       	ldd	r18, Y+8	; 0x08
    30a6:	39 85       	ldd	r19, Y+9	; 0x09
    30a8:	4a 85       	ldd	r20, Y+10	; 0x0a
    30aa:	5b 85       	ldd	r21, Y+11	; 0x0b
    30ac:	bc 01       	movw	r22, r24
    30ae:	cd 01       	movw	r24, r26
    30b0:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
    30b4:	dc 01       	movw	r26, r24
    30b6:	cb 01       	movw	r24, r22
    30b8:	bc 01       	movw	r22, r24
    30ba:	cd 01       	movw	r24, r26
    30bc:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__fixunssfsi>
    30c0:	dc 01       	movw	r26, r24
    30c2:	cb 01       	movw	r24, r22
    30c4:	9b 83       	std	Y+3, r25	; 0x03
    30c6:	8a 83       	std	Y+2, r24	; 0x02
    30c8:	89 81       	ldd	r24, Y+1	; 0x01
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	89 83       	std	Y+1, r24	; 0x01
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	9b 81       	ldd	r25, Y+3	; 0x03
    30d2:	89 2b       	or	r24, r25
    30d4:	21 f4       	brne	.+8      	; 0x30de <calculate_o2+0x260>
    30d6:	89 81       	ldd	r24, Y+1	; 0x01
    30d8:	85 30       	cpi	r24, 0x05	; 5
    30da:	08 f4       	brcc	.+2      	; 0x30de <calculate_o2+0x260>
    30dc:	00 cf       	rjmp	.-512    	; 0x2ede <calculate_o2+0x60>
    30de:	8a 81       	ldd	r24, Y+2	; 0x02
    30e0:	9b 81       	ldd	r25, Y+3	; 0x03
    30e2:	2d 96       	adiw	r28, 0x0d	; 13
    30e4:	0f b6       	in	r0, 0x3f	; 63
    30e6:	f8 94       	cli
    30e8:	de bf       	out	0x3e, r29	; 62
    30ea:	0f be       	out	0x3f, r0	; 63
    30ec:	cd bf       	out	0x3d, r28	; 61
    30ee:	df 91       	pop	r29
    30f0:	cf 91       	pop	r28
    30f2:	ff 90       	pop	r15
    30f4:	ef 90       	pop	r14
    30f6:	df 90       	pop	r13
    30f8:	cf 90       	pop	r12
    30fa:	08 95       	ret

000030fc <sensor_update_ua>:
    30fc:	cf 93       	push	r28
    30fe:	df 93       	push	r29
    3100:	00 d0       	rcall	.+0      	; 0x3102 <sensor_update_ua+0x6>
    3102:	00 d0       	rcall	.+0      	; 0x3104 <sensor_update_ua+0x8>
    3104:	cd b7       	in	r28, 0x3d	; 61
    3106:	de b7       	in	r29, 0x3e	; 62
    3108:	9a 83       	std	Y+2, r25	; 0x02
    310a:	89 83       	std	Y+1, r24	; 0x01
    310c:	7c 83       	std	Y+4, r23	; 0x04
    310e:	6b 83       	std	Y+3, r22	; 0x03
    3110:	89 81       	ldd	r24, Y+1	; 0x01
    3112:	9a 81       	ldd	r25, Y+2	; 0x02
    3114:	2b 81       	ldd	r18, Y+3	; 0x03
    3116:	3c 81       	ldd	r19, Y+4	; 0x04
    3118:	fc 01       	movw	r30, r24
    311a:	33 87       	std	Z+11, r19	; 0x0b
    311c:	22 87       	std	Z+10, r18	; 0x0a
    311e:	89 81       	ldd	r24, Y+1	; 0x01
    3120:	9a 81       	ldd	r25, Y+2	; 0x02
    3122:	fc 01       	movw	r30, r24
    3124:	43 81       	ldd	r20, Z+3	; 0x03
    3126:	89 81       	ldd	r24, Y+1	; 0x01
    3128:	9a 81       	ldd	r25, Y+2	; 0x02
    312a:	fc 01       	movw	r30, r24
    312c:	22 85       	ldd	r18, Z+10	; 0x0a
    312e:	33 85       	ldd	r19, Z+11	; 0x0b
    3130:	89 81       	ldd	r24, Y+1	; 0x01
    3132:	9a 81       	ldd	r25, Y+2	; 0x02
    3134:	fc 01       	movw	r30, r24
    3136:	84 81       	ldd	r24, Z+4	; 0x04
    3138:	95 81       	ldd	r25, Z+5	; 0x05
    313a:	b9 01       	movw	r22, r18
    313c:	0e 94 79 15 	call	0x2af2	; 0x2af2 <calculate_ip>
    3140:	9c 01       	movw	r18, r24
    3142:	89 81       	ldd	r24, Y+1	; 0x01
    3144:	9a 81       	ldd	r25, Y+2	; 0x02
    3146:	fc 01       	movw	r30, r24
    3148:	37 87       	std	Z+15, r19	; 0x0f
    314a:	26 87       	std	Z+14, r18	; 0x0e
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	9a 81       	ldd	r25, Y+2	; 0x02
    3150:	fc 01       	movw	r30, r24
    3152:	86 85       	ldd	r24, Z+14	; 0x0e
    3154:	97 85       	ldd	r25, Z+15	; 0x0f
    3156:	0e 94 f4 15 	call	0x2be8	; 0x2be8 <calculate_lambda>
    315a:	9c 01       	movw	r18, r24
    315c:	89 81       	ldd	r24, Y+1	; 0x01
    315e:	9a 81       	ldd	r25, Y+2	; 0x02
    3160:	fc 01       	movw	r30, r24
    3162:	31 8b       	std	Z+17, r19	; 0x11
    3164:	20 8b       	std	Z+16, r18	; 0x10
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	fc 01       	movw	r30, r24
    316c:	86 85       	ldd	r24, Z+14	; 0x0e
    316e:	97 85       	ldd	r25, Z+15	; 0x0f
    3170:	0e 94 3f 17 	call	0x2e7e	; 0x2e7e <calculate_o2>
    3174:	9c 01       	movw	r18, r24
    3176:	89 81       	ldd	r24, Y+1	; 0x01
    3178:	9a 81       	ldd	r25, Y+2	; 0x02
    317a:	fc 01       	movw	r30, r24
    317c:	33 8b       	std	Z+19, r19	; 0x13
    317e:	22 8b       	std	Z+18, r18	; 0x12
    3180:	00 00       	nop
    3182:	0f 90       	pop	r0
    3184:	0f 90       	pop	r0
    3186:	0f 90       	pop	r0
    3188:	0f 90       	pop	r0
    318a:	df 91       	pop	r29
    318c:	cf 91       	pop	r28
    318e:	08 95       	ret

00003190 <heater_setVoltage>:

void heater_setVoltage (uint16_t voltageMillis)
{
    3190:	cf 93       	push	r28
    3192:	df 93       	push	r29
    3194:	00 d0       	rcall	.+0      	; 0x3196 <heater_setVoltage+0x6>
    3196:	00 d0       	rcall	.+0      	; 0x3198 <heater_setVoltage+0x8>
    3198:	cd b7       	in	r28, 0x3d	; 61
    319a:	de b7       	in	r29, 0x3e	; 62
    319c:	9c 83       	std	Y+4, r25	; 0x04
    319e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t duty = 0;
    31a0:	1a 82       	std	Y+2, r1	; 0x02
    31a2:	19 82       	std	Y+1, r1	; 0x01
	sensor1.HeaterVoltage = voltageMillis;
    31a4:	8b 81       	ldd	r24, Y+3	; 0x03
    31a6:	9c 81       	ldd	r25, Y+4	; 0x04
    31a8:	90 93 e0 01 	sts	0x01E0, r25	; 0x8001e0 <sensor1+0x15>
    31ac:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <sensor1+0x14>
	
	if (voltageMillis == 0)
    31b0:	8b 81       	ldd	r24, Y+3	; 0x03
    31b2:	9c 81       	ldd	r25, Y+4	; 0x04
    31b4:	89 2b       	or	r24, r25
    31b6:	29 f4       	brne	.+10     	; 0x31c2 <heater_setVoltage+0x32>
	{
		heater_setDuty(0);
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	90 e0       	ldi	r25, 0x00	; 0
    31bc:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <heater_setDuty>
	else
	{
		duty = voltage2duty_cycle (voltageMillis, sensor1.SystemVoltage, 256);
		heater_setDuty(duty);	
	}
}
    31c0:	11 c0       	rjmp	.+34     	; 0x31e4 <heater_setVoltage+0x54>
	{
		heater_setDuty(0);
	}
	else
	{
		duty = voltage2duty_cycle (voltageMillis, sensor1.SystemVoltage, 256);
    31c2:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <sensor1+0x16>
    31c6:	30 91 e2 01 	lds	r19, 0x01E2	; 0x8001e2 <sensor1+0x17>
    31ca:	8b 81       	ldd	r24, Y+3	; 0x03
    31cc:	9c 81       	ldd	r25, Y+4	; 0x04
    31ce:	40 e0       	ldi	r20, 0x00	; 0
    31d0:	51 e0       	ldi	r21, 0x01	; 1
    31d2:	b9 01       	movw	r22, r18
    31d4:	0e 94 d5 13 	call	0x27aa	; 0x27aa <__voltage2duty_cycle>
    31d8:	9a 83       	std	Y+2, r25	; 0x02
    31da:	89 83       	std	Y+1, r24	; 0x01
		heater_setDuty(duty);	
    31dc:	89 81       	ldd	r24, Y+1	; 0x01
    31de:	9a 81       	ldd	r25, Y+2	; 0x02
    31e0:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <heater_setDuty>
	}
}
    31e4:	00 00       	nop
    31e6:	0f 90       	pop	r0
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	df 91       	pop	r29
    31f0:	cf 91       	pop	r28
    31f2:	08 95       	ret

000031f4 <heater_setDuty>:

void heater_setDuty (uint16_t duty)
{
    31f4:	cf 93       	push	r28
    31f6:	df 93       	push	r29
    31f8:	00 d0       	rcall	.+0      	; 0x31fa <heater_setDuty+0x6>
    31fa:	cd b7       	in	r28, 0x3d	; 61
    31fc:	de b7       	in	r29, 0x3e	; 62
    31fe:	9a 83       	std	Y+2, r25	; 0x02
    3200:	89 83       	std	Y+1, r24	; 0x01
	if (duty == 0)
    3202:	89 81       	ldd	r24, Y+1	; 0x01
    3204:	9a 81       	ldd	r25, Y+2	; 0x02
    3206:	89 2b       	or	r24, r25
    3208:	51 f4       	brne	.+20     	; 0x321e <heater_setDuty+0x2a>
	{
		TCCR1A &= ~(1 << COM1B1);
    320a:	80 e8       	ldi	r24, 0x80	; 128
    320c:	90 e0       	ldi	r25, 0x00	; 0
    320e:	20 e8       	ldi	r18, 0x80	; 128
    3210:	30 e0       	ldi	r19, 0x00	; 0
    3212:	f9 01       	movw	r30, r18
    3214:	20 81       	ld	r18, Z
    3216:	2f 7d       	andi	r18, 0xDF	; 223
    3218:	fc 01       	movw	r30, r24
    321a:	20 83       	st	Z, r18
		if (!(TCCR1A |= (1 << COM1B1)))
		{
			TCCR1A |= (1 << COM1B1);
		}
	}
}
    321c:	10 c0       	rjmp	.+32     	; 0x323e <heater_setDuty+0x4a>
	{
		TCCR1A &= ~(1 << COM1B1);
	}
	else
	{
		OCR1B = duty;
    321e:	8a e8       	ldi	r24, 0x8A	; 138
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	29 81       	ldd	r18, Y+1	; 0x01
    3224:	3a 81       	ldd	r19, Y+2	; 0x02
    3226:	fc 01       	movw	r30, r24
    3228:	31 83       	std	Z+1, r19	; 0x01
    322a:	20 83       	st	Z, r18
		if (!(TCCR1A |= (1 << COM1B1)))
    322c:	80 e8       	ldi	r24, 0x80	; 128
    322e:	90 e0       	ldi	r25, 0x00	; 0
    3230:	20 e8       	ldi	r18, 0x80	; 128
    3232:	30 e0       	ldi	r19, 0x00	; 0
    3234:	f9 01       	movw	r30, r18
    3236:	20 81       	ld	r18, Z
    3238:	20 62       	ori	r18, 0x20	; 32
    323a:	fc 01       	movw	r30, r24
    323c:	20 83       	st	Z, r18
		{
			TCCR1A |= (1 << COM1B1);
		}
	}
}
    323e:	00 00       	nop
    3240:	0f 90       	pop	r0
    3242:	0f 90       	pop	r0
    3244:	df 91       	pop	r29
    3246:	cf 91       	pop	r28
    3248:	08 95       	ret

0000324a <calc_pid>:

uint16_t calc_pid (uint16_t referenceValue, uint16_t measuredValue, bool inverted)
{
    324a:	cf 92       	push	r12
    324c:	df 92       	push	r13
    324e:	ef 92       	push	r14
    3250:	ff 92       	push	r15
    3252:	cf 93       	push	r28
    3254:	df 93       	push	r29
    3256:	cd b7       	in	r28, 0x3d	; 61
    3258:	de b7       	in	r29, 0x3e	; 62
    325a:	67 97       	sbiw	r28, 0x17	; 23
    325c:	0f b6       	in	r0, 0x3f	; 63
    325e:	f8 94       	cli
    3260:	de bf       	out	0x3e, r29	; 62
    3262:	0f be       	out	0x3f, r0	; 63
    3264:	cd bf       	out	0x3d, r28	; 61
    3266:	9c 8b       	std	Y+20, r25	; 0x14
    3268:	8b 8b       	std	Y+19, r24	; 0x13
    326a:	7e 8b       	std	Y+22, r23	; 0x16
    326c:	6d 8b       	std	Y+21, r22	; 0x15
    326e:	4f 8b       	std	Y+23, r20	; 0x17
	float pTerm = 0, iTerm = 0, dTerm = 0;
    3270:	19 82       	std	Y+1, r1	; 0x01
    3272:	1a 82       	std	Y+2, r1	; 0x02
    3274:	1b 82       	std	Y+3, r1	; 0x03
    3276:	1c 82       	std	Y+4, r1	; 0x04
    3278:	1d 82       	std	Y+5, r1	; 0x05
    327a:	1e 82       	std	Y+6, r1	; 0x06
    327c:	1f 82       	std	Y+7, r1	; 0x07
    327e:	18 86       	std	Y+8, r1	; 0x08
    3280:	19 86       	std	Y+9, r1	; 0x09
    3282:	1a 86       	std	Y+10, r1	; 0x0a
    3284:	1b 86       	std	Y+11, r1	; 0x0b
    3286:	1c 86       	std	Y+12, r1	; 0x0c
	// calculation error:
	int16_t error = (int16_t) referenceValue - (int16_t) measuredValue;
    3288:	2b 89       	ldd	r18, Y+19	; 0x13
    328a:	3c 89       	ldd	r19, Y+20	; 0x14
    328c:	8d 89       	ldd	r24, Y+21	; 0x15
    328e:	9e 89       	ldd	r25, Y+22	; 0x16
    3290:	a9 01       	movw	r20, r18
    3292:	48 1b       	sub	r20, r24
    3294:	59 0b       	sbc	r21, r25
    3296:	ca 01       	movw	r24, r20
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
	int16_t position = (int16_t) measuredValue;
    329c:	8d 89       	ldd	r24, Y+21	; 0x15
    329e:	9e 89       	ldd	r25, Y+22	; 0x16
    32a0:	9a 8b       	std	Y+18, r25	; 0x12
    32a2:	89 8b       	std	Y+17, r24	; 0x11
	
	// calculate p-term;
	if (inverted)
    32a4:	8f 89       	ldd	r24, Y+23	; 0x17
    32a6:	88 23       	and	r24, r24
    32a8:	39 f1       	breq	.+78     	; 0x32f8 <calc_pid+0xae>
	{
		pTerm = -pidController.pGain * error;
    32aa:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <pidController>
    32ae:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <pidController+0x1>
    32b2:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <pidController+0x2>
    32b6:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <pidController+0x3>
    32ba:	6c 01       	movw	r12, r24
    32bc:	7d 01       	movw	r14, r26
    32be:	f7 fa       	bst	r15, 7
    32c0:	f0 94       	com	r15
    32c2:	f7 f8       	bld	r15, 7
    32c4:	f0 94       	com	r15
    32c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32c8:	98 89       	ldd	r25, Y+16	; 0x10
    32ca:	09 2e       	mov	r0, r25
    32cc:	00 0c       	add	r0, r0
    32ce:	aa 0b       	sbc	r26, r26
    32d0:	bb 0b       	sbc	r27, r27
    32d2:	bc 01       	movw	r22, r24
    32d4:	cd 01       	movw	r24, r26
    32d6:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    32da:	dc 01       	movw	r26, r24
    32dc:	cb 01       	movw	r24, r22
    32de:	9c 01       	movw	r18, r24
    32e0:	ad 01       	movw	r20, r26
    32e2:	c7 01       	movw	r24, r14
    32e4:	b6 01       	movw	r22, r12
    32e6:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    32ea:	dc 01       	movw	r26, r24
    32ec:	cb 01       	movw	r24, r22
    32ee:	89 83       	std	Y+1, r24	; 0x01
    32f0:	9a 83       	std	Y+2, r25	; 0x02
    32f2:	ab 83       	std	Y+3, r26	; 0x03
    32f4:	bc 83       	std	Y+4, r27	; 0x04
    32f6:	20 c0       	rjmp	.+64     	; 0x3338 <calc_pid+0xee>
	} else {
		pTerm = pidController.pGain * error;
    32f8:	c0 90 b3 01 	lds	r12, 0x01B3	; 0x8001b3 <pidController>
    32fc:	d0 90 b4 01 	lds	r13, 0x01B4	; 0x8001b4 <pidController+0x1>
    3300:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <pidController+0x2>
    3304:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <pidController+0x3>
    3308:	8f 85       	ldd	r24, Y+15	; 0x0f
    330a:	98 89       	ldd	r25, Y+16	; 0x10
    330c:	09 2e       	mov	r0, r25
    330e:	00 0c       	add	r0, r0
    3310:	aa 0b       	sbc	r26, r26
    3312:	bb 0b       	sbc	r27, r27
    3314:	bc 01       	movw	r22, r24
    3316:	cd 01       	movw	r24, r26
    3318:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    331c:	dc 01       	movw	r26, r24
    331e:	cb 01       	movw	r24, r22
    3320:	9c 01       	movw	r18, r24
    3322:	ad 01       	movw	r20, r26
    3324:	c7 01       	movw	r24, r14
    3326:	b6 01       	movw	r22, r12
    3328:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    332c:	dc 01       	movw	r26, r24
    332e:	cb 01       	movw	r24, r22
    3330:	89 83       	std	Y+1, r24	; 0x01
    3332:	9a 83       	std	Y+2, r25	; 0x02
    3334:	ab 83       	std	Y+3, r26	; 0x03
    3336:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	
	//Calculate the integral state
	pidController.iState += error;
    3338:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    333c:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    3340:	8f 85       	ldd	r24, Y+15	; 0x0f
    3342:	98 89       	ldd	r25, Y+16	; 0x10
    3344:	82 0f       	add	r24, r18
    3346:	93 1f       	adc	r25, r19
    3348:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    334c:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	
	// check limits of iState
	if (pidController.iState > pidController.iMax) pidController.iState = pidController.iMax;
    3350:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    3354:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    3358:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pidController+0x12>
    335c:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pidController+0x13>
    3360:	82 17       	cp	r24, r18
    3362:	93 07       	cpc	r25, r19
    3364:	44 f4       	brge	.+16     	; 0x3376 <calc_pid+0x12c>
    3366:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pidController+0x12>
    336a:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pidController+0x13>
    336e:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    3372:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	if (pidController.iState < pidController.iMin) pidController.iState = pidController.iMin;
    3376:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    337a:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    337e:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pidController+0x10>
    3382:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pidController+0x11>
    3386:	28 17       	cp	r18, r24
    3388:	39 07       	cpc	r19, r25
    338a:	44 f4       	brge	.+16     	; 0x339c <calc_pid+0x152>
    338c:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pidController+0x10>
    3390:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pidController+0x11>
    3394:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    3398:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	
	//Calculate the integral term.
	if (inverted)
    339c:	8f 89       	ldd	r24, Y+23	; 0x17
    339e:	88 23       	and	r24, r24
    33a0:	49 f1       	breq	.+82     	; 0x33f4 <calc_pid+0x1aa>
	{
		iTerm = -pidController.iGain * pidController.iState;
    33a2:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <pidController+0x4>
    33a6:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <pidController+0x5>
    33aa:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <pidController+0x6>
    33ae:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <pidController+0x7>
    33b2:	6c 01       	movw	r12, r24
    33b4:	7d 01       	movw	r14, r26
    33b6:	f7 fa       	bst	r15, 7
    33b8:	f0 94       	com	r15
    33ba:	f7 f8       	bld	r15, 7
    33bc:	f0 94       	com	r15
    33be:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <pidController+0xc>
    33c2:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <pidController+0xd>
    33c6:	09 2e       	mov	r0, r25
    33c8:	00 0c       	add	r0, r0
    33ca:	aa 0b       	sbc	r26, r26
    33cc:	bb 0b       	sbc	r27, r27
    33ce:	bc 01       	movw	r22, r24
    33d0:	cd 01       	movw	r24, r26
    33d2:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    33d6:	dc 01       	movw	r26, r24
    33d8:	cb 01       	movw	r24, r22
    33da:	9c 01       	movw	r18, r24
    33dc:	ad 01       	movw	r20, r26
    33de:	c7 01       	movw	r24, r14
    33e0:	b6 01       	movw	r22, r12
    33e2:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    33e6:	dc 01       	movw	r26, r24
    33e8:	cb 01       	movw	r24, r22
    33ea:	8d 83       	std	Y+5, r24	; 0x05
    33ec:	9e 83       	std	Y+6, r25	; 0x06
    33ee:	af 83       	std	Y+7, r26	; 0x07
    33f0:	b8 87       	std	Y+8, r27	; 0x08
    33f2:	22 c0       	rjmp	.+68     	; 0x3438 <calc_pid+0x1ee>
	} else {
		iTerm = pidController.iGain * pidController.iState;
    33f4:	c0 90 b7 01 	lds	r12, 0x01B7	; 0x8001b7 <pidController+0x4>
    33f8:	d0 90 b8 01 	lds	r13, 0x01B8	; 0x8001b8 <pidController+0x5>
    33fc:	e0 90 b9 01 	lds	r14, 0x01B9	; 0x8001b9 <pidController+0x6>
    3400:	f0 90 ba 01 	lds	r15, 0x01BA	; 0x8001ba <pidController+0x7>
    3404:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <pidController+0xc>
    3408:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <pidController+0xd>
    340c:	09 2e       	mov	r0, r25
    340e:	00 0c       	add	r0, r0
    3410:	aa 0b       	sbc	r26, r26
    3412:	bb 0b       	sbc	r27, r27
    3414:	bc 01       	movw	r22, r24
    3416:	cd 01       	movw	r24, r26
    3418:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    341c:	dc 01       	movw	r26, r24
    341e:	cb 01       	movw	r24, r22
    3420:	9c 01       	movw	r18, r24
    3422:	ad 01       	movw	r20, r26
    3424:	c7 01       	movw	r24, r14
    3426:	b6 01       	movw	r22, r12
    3428:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    342c:	dc 01       	movw	r26, r24
    342e:	cb 01       	movw	r24, r22
    3430:	8d 83       	std	Y+5, r24	; 0x05
    3432:	9e 83       	std	Y+6, r25	; 0x06
    3434:	af 83       	std	Y+7, r26	; 0x07
    3436:	b8 87       	std	Y+8, r27	; 0x08
	}
	
	//Calculate the derivative term.
	if (inverted)
    3438:	8f 89       	ldd	r24, Y+23	; 0x17
    343a:	88 23       	and	r24, r24
    343c:	79 f1       	breq	.+94     	; 0x349c <calc_pid+0x252>
	{
		dTerm = -pidController.dGain * (pidController.dState - position);
    343e:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <pidController+0x8>
    3442:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <pidController+0x9>
    3446:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <pidController+0xa>
    344a:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <pidController+0xb>
    344e:	6c 01       	movw	r12, r24
    3450:	7d 01       	movw	r14, r26
    3452:	f7 fa       	bst	r15, 7
    3454:	f0 94       	com	r15
    3456:	f7 f8       	bld	r15, 7
    3458:	f0 94       	com	r15
    345a:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <pidController+0xe>
    345e:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <pidController+0xf>
    3462:	89 89       	ldd	r24, Y+17	; 0x11
    3464:	9a 89       	ldd	r25, Y+18	; 0x12
    3466:	a9 01       	movw	r20, r18
    3468:	48 1b       	sub	r20, r24
    346a:	59 0b       	sbc	r21, r25
    346c:	ca 01       	movw	r24, r20
    346e:	09 2e       	mov	r0, r25
    3470:	00 0c       	add	r0, r0
    3472:	aa 0b       	sbc	r26, r26
    3474:	bb 0b       	sbc	r27, r27
    3476:	bc 01       	movw	r22, r24
    3478:	cd 01       	movw	r24, r26
    347a:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    347e:	dc 01       	movw	r26, r24
    3480:	cb 01       	movw	r24, r22
    3482:	9c 01       	movw	r18, r24
    3484:	ad 01       	movw	r20, r26
    3486:	c7 01       	movw	r24, r14
    3488:	b6 01       	movw	r22, r12
    348a:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    348e:	dc 01       	movw	r26, r24
    3490:	cb 01       	movw	r24, r22
    3492:	89 87       	std	Y+9, r24	; 0x09
    3494:	9a 87       	std	Y+10, r25	; 0x0a
    3496:	ab 87       	std	Y+11, r26	; 0x0b
    3498:	bc 87       	std	Y+12, r27	; 0x0c
    349a:	28 c0       	rjmp	.+80     	; 0x34ec <calc_pid+0x2a2>
	} else {
		dTerm = pidController.dGain * (pidController.dState - position);
    349c:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <pidController+0x8>
    34a0:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <pidController+0x9>
    34a4:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <pidController+0xa>
    34a8:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <pidController+0xb>
    34ac:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <pidController+0xe>
    34b0:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <pidController+0xf>
    34b4:	89 89       	ldd	r24, Y+17	; 0x11
    34b6:	9a 89       	ldd	r25, Y+18	; 0x12
    34b8:	a9 01       	movw	r20, r18
    34ba:	48 1b       	sub	r20, r24
    34bc:	59 0b       	sbc	r21, r25
    34be:	ca 01       	movw	r24, r20
    34c0:	09 2e       	mov	r0, r25
    34c2:	00 0c       	add	r0, r0
    34c4:	aa 0b       	sbc	r26, r26
    34c6:	bb 0b       	sbc	r27, r27
    34c8:	bc 01       	movw	r22, r24
    34ca:	cd 01       	movw	r24, r26
    34cc:	0e 94 58 1e 	call	0x3cb0	; 0x3cb0 <__floatsisf>
    34d0:	dc 01       	movw	r26, r24
    34d2:	cb 01       	movw	r24, r22
    34d4:	9c 01       	movw	r18, r24
    34d6:	ad 01       	movw	r20, r26
    34d8:	c7 01       	movw	r24, r14
    34da:	b6 01       	movw	r22, r12
    34dc:	0e 94 e4 1e 	call	0x3dc8	; 0x3dc8 <__mulsf3>
    34e0:	dc 01       	movw	r26, r24
    34e2:	cb 01       	movw	r24, r22
    34e4:	89 87       	std	Y+9, r24	; 0x09
    34e6:	9a 87       	std	Y+10, r25	; 0x0a
    34e8:	ab 87       	std	Y+11, r26	; 0x0b
    34ea:	bc 87       	std	Y+12, r27	; 0x0c
	}
	pidController.dState = position;
    34ec:	89 89       	ldd	r24, Y+17	; 0x11
    34ee:	9a 89       	ldd	r25, Y+18	; 0x12
    34f0:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <pidController+0xf>
    34f4:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <pidController+0xe>
	
	//Calculate regulation (PI).
	int16_t RegulationOutput = pTerm + iTerm + dTerm;
    34f8:	2d 81       	ldd	r18, Y+5	; 0x05
    34fa:	3e 81       	ldd	r19, Y+6	; 0x06
    34fc:	4f 81       	ldd	r20, Y+7	; 0x07
    34fe:	58 85       	ldd	r21, Y+8	; 0x08
    3500:	69 81       	ldd	r22, Y+1	; 0x01
    3502:	7a 81       	ldd	r23, Y+2	; 0x02
    3504:	8b 81       	ldd	r24, Y+3	; 0x03
    3506:	9c 81       	ldd	r25, Y+4	; 0x04
    3508:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
    350c:	dc 01       	movw	r26, r24
    350e:	cb 01       	movw	r24, r22
    3510:	29 85       	ldd	r18, Y+9	; 0x09
    3512:	3a 85       	ldd	r19, Y+10	; 0x0a
    3514:	4b 85       	ldd	r20, Y+11	; 0x0b
    3516:	5c 85       	ldd	r21, Y+12	; 0x0c
    3518:	bc 01       	movw	r22, r24
    351a:	cd 01       	movw	r24, r26
    351c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <__addsf3>
    3520:	dc 01       	movw	r26, r24
    3522:	cb 01       	movw	r24, r22
    3524:	bc 01       	movw	r22, r24
    3526:	cd 01       	movw	r24, r26
    3528:	0e 94 20 1e 	call	0x3c40	; 0x3c40 <__fixsfsi>
    352c:	dc 01       	movw	r26, r24
    352e:	cb 01       	movw	r24, r22
    3530:	9e 87       	std	Y+14, r25	; 0x0e
    3532:	8d 87       	std	Y+13, r24	; 0x0d
	
	// check limits of pwm here....
	
	if (RegulationOutput > pidController.pwmMax) 
    3534:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <pidController+0x16>
    3538:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <pidController+0x17>
    353c:	8d 85       	ldd	r24, Y+13	; 0x0d
    353e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3540:	28 17       	cp	r18, r24
    3542:	39 07       	cpc	r19, r25
    3544:	34 f4       	brge	.+12     	; 0x3552 <calc_pid+0x308>
	{
		RegulationOutput = pidController.pwmMax;
    3546:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pidController+0x16>
    354a:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pidController+0x17>
    354e:	9e 87       	std	Y+14, r25	; 0x0e
    3550:	8d 87       	std	Y+13, r24	; 0x0d
	}
	
	if (RegulationOutput < pidController.pwmMin)
    3552:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <pidController+0x14>
    3556:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <pidController+0x15>
    355a:	8d 85       	ldd	r24, Y+13	; 0x0d
    355c:	9e 85       	ldd	r25, Y+14	; 0x0e
    355e:	82 17       	cp	r24, r18
    3560:	93 07       	cpc	r25, r19
    3562:	34 f4       	brge	.+12     	; 0x3570 <calc_pid+0x326>
	{
		 RegulationOutput = pidController.pwmMin;
    3564:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pidController+0x14>
    3568:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pidController+0x15>
    356c:	9e 87       	std	Y+14, r25	; 0x0e
    356e:	8d 87       	std	Y+13, r24	; 0x0d
	}
		
	return  (uint16_t) RegulationOutput;
    3570:	8d 85       	ldd	r24, Y+13	; 0x0d
    3572:	9e 85       	ldd	r25, Y+14	; 0x0e
}
    3574:	67 96       	adiw	r28, 0x17	; 23
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	df 91       	pop	r29
    3582:	cf 91       	pop	r28
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	df 90       	pop	r13
    358a:	cf 90       	pop	r12
    358c:	08 95       	ret

0000358e <sensor_shutdown>:

void sensor_shutdown (void)
{
    358e:	cf 93       	push	r28
    3590:	df 93       	push	r29
    3592:	cd b7       	in	r28, 0x3d	; 61
    3594:	de b7       	in	r29, 0x3e	; 62
	sensor1.SensorStatus = RESET;
    3596:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sensor1+0x1a>
	sensor1.HeaterVoltage = 0;
    359a:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <sensor1+0x15>
    359e:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <sensor1+0x14>
	heater_setVoltage(sensor1.HeaterVoltage);
    35a2:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <sensor1+0x14>
    35a6:	90 91 e0 01 	lds	r25, 0x01E0	; 0x8001e0 <sensor1+0x15>
    35aa:	0e 94 c8 18 	call	0x3190	; 0x3190 <heater_setVoltage>
	sensor1.Ua = 0;
    35ae:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <sensor1+0xb>
    35b2:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <sensor1+0xa>
	sensor1.Ur = 0;
    35b6:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <sensor1+0xd>
    35ba:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <sensor1+0xc>
	sensor1.Ip = 0;
    35be:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <sensor1+0xf>
    35c2:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <sensor1+0xe>
	sensor1.Lambda = 0;	
    35c6:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <sensor1+0x11>
    35ca:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <sensor1+0x10>
    35ce:	00 00       	nop
    35d0:	df 91       	pop	r29
    35d2:	cf 91       	pop	r28
    35d4:	08 95       	ret

000035d6 <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
    35d6:	cf 93       	push	r28
    35d8:	df 93       	push	r29
    35da:	00 d0       	rcall	.+0      	; 0x35dc <__make_u16t+0x6>
    35dc:	cd b7       	in	r28, 0x3d	; 61
    35de:	de b7       	in	r29, 0x3e	; 62
    35e0:	89 83       	std	Y+1, r24	; 0x01
    35e2:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
    35e4:	89 81       	ldd	r24, Y+1	; 0x01
    35e6:	88 2f       	mov	r24, r24
    35e8:	90 e0       	ldi	r25, 0x00	; 0
    35ea:	38 2f       	mov	r19, r24
    35ec:	22 27       	eor	r18, r18
    35ee:	8a 81       	ldd	r24, Y+2	; 0x02
    35f0:	88 2f       	mov	r24, r24
    35f2:	90 e0       	ldi	r25, 0x00	; 0
    35f4:	82 2b       	or	r24, r18
    35f6:	93 2b       	or	r25, r19
}
    35f8:	0f 90       	pop	r0
    35fa:	0f 90       	pop	r0
    35fc:	df 91       	pop	r29
    35fe:	cf 91       	pop	r28
    3600:	08 95       	ret

00003602 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
    3602:	cf 93       	push	r28
    3604:	df 93       	push	r29
    3606:	cd b7       	in	r28, 0x3d	; 61
    3608:	de b7       	in	r29, 0x3e	; 62
	// mosi (pb1) and sck (pb7) are outputs
	DDRB |= (1 << PINB1)|(1 << PINB7);
    360a:	84 e2       	ldi	r24, 0x24	; 36
    360c:	90 e0       	ldi	r25, 0x00	; 0
    360e:	24 e2       	ldi	r18, 0x24	; 36
    3610:	30 e0       	ldi	r19, 0x00	; 0
    3612:	f9 01       	movw	r30, r18
    3614:	20 81       	ld	r18, Z
    3616:	22 68       	ori	r18, 0x82	; 130
    3618:	fc 01       	movw	r30, r24
    361a:	20 83       	st	Z, r18
	// spi ss is output too
	DDRD |= (1 << PIND5);
    361c:	8a e2       	ldi	r24, 0x2A	; 42
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	2a e2       	ldi	r18, 0x2A	; 42
    3622:	30 e0       	ldi	r19, 0x00	; 0
    3624:	f9 01       	movw	r30, r18
    3626:	20 81       	ld	r18, Z
    3628:	20 62       	ori	r18, 0x20	; 32
    362a:	fc 01       	movw	r30, r24
    362c:	20 83       	st	Z, r18
	// bring them high
	SPI_SS_DESELECT;
    362e:	8b e2       	ldi	r24, 0x2B	; 43
    3630:	90 e0       	ldi	r25, 0x00	; 0
    3632:	2b e2       	ldi	r18, 0x2B	; 43
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	f9 01       	movw	r30, r18
    3638:	20 81       	ld	r18, Z
    363a:	20 62       	ori	r18, 0x20	; 32
    363c:	fc 01       	movw	r30, r24
    363e:	20 83       	st	Z, r18
	
	// enable spi, 2MHz (div 8), master, mode1 (cpol 0, cpha 1)
	// SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPI2X)|(1 << SPR0);
	
	// enable spi, 1MHz (div 16), master, mode1 (cpol 0, cpha 1)
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << CPHA)|(1 << SPR0);
    3640:	8c e4       	ldi	r24, 0x4C	; 76
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	25 e5       	ldi	r18, 0x55	; 85
    3646:	fc 01       	movw	r30, r24
    3648:	20 83       	st	Z, r18
	
	// enable spi, 4MHz (div 16), master, mode1 (cpol 0, cpha 1)
	// SPCR = (1 << SPE)|(1 << MSTR)|(1 << CPHA);
}
    364a:	00 00       	nop
    364c:	df 91       	pop	r29
    364e:	cf 91       	pop	r28
    3650:	08 95       	ret

00003652 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
    3652:	cf 93       	push	r28
    3654:	df 93       	push	r29
    3656:	00 d0       	rcall	.+0      	; 0x3658 <spi_read_write+0x6>
    3658:	00 d0       	rcall	.+0      	; 0x365a <spi_read_write+0x8>
    365a:	cd b7       	in	r28, 0x3d	; 61
    365c:	de b7       	in	r29, 0x3e	; 62
    365e:	9c 83       	std	Y+4, r25	; 0x04
    3660:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
    3662:	8b e2       	ldi	r24, 0x2B	; 43
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	2b e2       	ldi	r18, 0x2B	; 43
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	f9 01       	movw	r30, r18
    366c:	20 81       	ld	r18, Z
    366e:	2f 7d       	andi	r18, 0xDF	; 223
    3670:	fc 01       	movw	r30, r24
    3672:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
    3674:	8e e4       	ldi	r24, 0x4E	; 78
    3676:	90 e0       	ldi	r25, 0x00	; 0
    3678:	2b 81       	ldd	r18, Y+3	; 0x03
    367a:	3c 81       	ldd	r19, Y+4	; 0x04
    367c:	23 2f       	mov	r18, r19
    367e:	33 27       	eor	r19, r19
    3680:	fc 01       	movw	r30, r24
    3682:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    3684:	00 00       	nop
    3686:	8d e4       	ldi	r24, 0x4D	; 77
    3688:	90 e0       	ldi	r25, 0x00	; 0
    368a:	fc 01       	movw	r30, r24
    368c:	80 81       	ld	r24, Z
    368e:	88 23       	and	r24, r24
    3690:	d4 f7       	brge	.-12     	; 0x3686 <spi_read_write+0x34>
	byte1 = SPDR;
    3692:	8e e4       	ldi	r24, 0x4E	; 78
    3694:	90 e0       	ldi	r25, 0x00	; 0
    3696:	fc 01       	movw	r30, r24
    3698:	80 81       	ld	r24, Z
    369a:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	8f 73       	andi	r24, 0x3F	; 63
    36a0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
    36a2:	8e e4       	ldi	r24, 0x4E	; 78
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	2b 81       	ldd	r18, Y+3	; 0x03
    36a8:	fc 01       	movw	r30, r24
    36aa:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    36ac:	00 00       	nop
    36ae:	8d e4       	ldi	r24, 0x4D	; 77
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	fc 01       	movw	r30, r24
    36b4:	80 81       	ld	r24, Z
    36b6:	88 23       	and	r24, r24
    36b8:	d4 f7       	brge	.-12     	; 0x36ae <spi_read_write+0x5c>
	byte2 = SPDR;
    36ba:	8e e4       	ldi	r24, 0x4E	; 78
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	fc 01       	movw	r30, r24
    36c0:	80 81       	ld	r24, Z
    36c2:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
    36c4:	8b e2       	ldi	r24, 0x2B	; 43
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	2b e2       	ldi	r18, 0x2B	; 43
    36ca:	30 e0       	ldi	r19, 0x00	; 0
    36cc:	f9 01       	movw	r30, r18
    36ce:	20 81       	ld	r18, Z
    36d0:	20 62       	ori	r18, 0x20	; 32
    36d2:	fc 01       	movw	r30, r24
    36d4:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
    36d6:	6a 81       	ldd	r22, Y+2	; 0x02
    36d8:	89 81       	ldd	r24, Y+1	; 0x01
    36da:	0e 94 eb 1a 	call	0x35d6	; 0x35d6 <__make_u16t>
    36de:	0f 90       	pop	r0
    36e0:	0f 90       	pop	r0
    36e2:	0f 90       	pop	r0
    36e4:	0f 90       	pop	r0
    36e6:	df 91       	pop	r29
    36e8:	cf 91       	pop	r28
    36ea:	08 95       	ret

000036ec <board_init>:
#include "../helpers.h"

tBoard board;

void board_init (tBoard *board)
{
    36ec:	cf 93       	push	r28
    36ee:	df 93       	push	r29
    36f0:	00 d0       	rcall	.+0      	; 0x36f2 <board_init+0x6>
    36f2:	cd b7       	in	r28, 0x3d	; 61
    36f4:	de b7       	in	r29, 0x3e	; 62
    36f6:	9a 83       	std	Y+2, r25	; 0x02
    36f8:	89 83       	std	Y+1, r24	; 0x01
	board->input1_state = LOW;
    36fa:	89 81       	ldd	r24, Y+1	; 0x01
    36fc:	9a 81       	ldd	r25, Y+2	; 0x02
    36fe:	fc 01       	movw	r30, r24
    3700:	10 82       	st	Z, r1
	board->input2_state = LOW;
    3702:	89 81       	ldd	r24, Y+1	; 0x01
    3704:	9a 81       	ldd	r25, Y+2	; 0x02
    3706:	fc 01       	movw	r30, r24
    3708:	11 82       	std	Z+1, r1	; 0x01
	
	// init the both inputs, in1 = pc6, in2 = pb4
	DDRC  &= ~(1 << PINC6);
    370a:	87 e2       	ldi	r24, 0x27	; 39
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	27 e2       	ldi	r18, 0x27	; 39
    3710:	30 e0       	ldi	r19, 0x00	; 0
    3712:	f9 01       	movw	r30, r18
    3714:	20 81       	ld	r18, Z
    3716:	2f 7b       	andi	r18, 0xBF	; 191
    3718:	fc 01       	movw	r30, r24
    371a:	20 83       	st	Z, r18
	DDRB  &= ~(1 << PINB4);
    371c:	84 e2       	ldi	r24, 0x24	; 36
    371e:	90 e0       	ldi	r25, 0x00	; 0
    3720:	24 e2       	ldi	r18, 0x24	; 36
    3722:	30 e0       	ldi	r19, 0x00	; 0
    3724:	f9 01       	movw	r30, r18
    3726:	20 81       	ld	r18, Z
    3728:	2f 7e       	andi	r18, 0xEF	; 239
    372a:	fc 01       	movw	r30, r24
    372c:	20 83       	st	Z, r18
	
	// activate internal pull-ups, since the inputs are "active low"
	PORTC |= (1 << PINC6);
    372e:	88 e2       	ldi	r24, 0x28	; 40
    3730:	90 e0       	ldi	r25, 0x00	; 0
    3732:	28 e2       	ldi	r18, 0x28	; 40
    3734:	30 e0       	ldi	r19, 0x00	; 0
    3736:	f9 01       	movw	r30, r18
    3738:	20 81       	ld	r18, Z
    373a:	20 64       	ori	r18, 0x40	; 64
    373c:	fc 01       	movw	r30, r24
    373e:	20 83       	st	Z, r18
	PORTB |= (1 << PINB4);
    3740:	85 e2       	ldi	r24, 0x25	; 37
    3742:	90 e0       	ldi	r25, 0x00	; 0
    3744:	25 e2       	ldi	r18, 0x25	; 37
    3746:	30 e0       	ldi	r19, 0x00	; 0
    3748:	f9 01       	movw	r30, r18
    374a:	20 81       	ld	r18, Z
    374c:	20 61       	ori	r18, 0x10	; 16
    374e:	fc 01       	movw	r30, r24
    3750:	20 83       	st	Z, r18
	
	// init LED2 (pb5) and LED2 (pb6)
	// led1 is power
	DDRB |= (1 << PINB5)|(1 << PINB6);
    3752:	84 e2       	ldi	r24, 0x24	; 36
    3754:	90 e0       	ldi	r25, 0x00	; 0
    3756:	24 e2       	ldi	r18, 0x24	; 36
    3758:	30 e0       	ldi	r19, 0x00	; 0
    375a:	f9 01       	movw	r30, r18
    375c:	20 81       	ld	r18, Z
    375e:	20 66       	ori	r18, 0x60	; 96
    3760:	fc 01       	movw	r30, r24
    3762:	20 83       	st	Z, r18
	// switch them on
	PORTB |= (1 << PINB5)|(1 << PINB6);
    3764:	85 e2       	ldi	r24, 0x25	; 37
    3766:	90 e0       	ldi	r25, 0x00	; 0
    3768:	25 e2       	ldi	r18, 0x25	; 37
    376a:	30 e0       	ldi	r19, 0x00	; 0
    376c:	f9 01       	movw	r30, r18
    376e:	20 81       	ld	r18, Z
    3770:	20 66       	ori	r18, 0x60	; 96
    3772:	fc 01       	movw	r30, r24
    3774:	20 83       	st	Z, r18
}
    3776:	00 00       	nop
    3778:	0f 90       	pop	r0
    377a:	0f 90       	pop	r0
    377c:	df 91       	pop	r29
    377e:	cf 91       	pop	r28
    3780:	08 95       	ret

00003782 <board_read_inputs>:

void board_read_inputs (tBoard *board)
{	
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	00 d0       	rcall	.+0      	; 0x3788 <board_read_inputs+0x6>
    3788:	cd b7       	in	r28, 0x3d	; 61
    378a:	de b7       	in	r29, 0x3e	; 62
    378c:	9a 83       	std	Y+2, r25	; 0x02
    378e:	89 83       	std	Y+1, r24	; 0x01
	// bit_is_set from sfr_def.h
	// is pinc6 high?
	
	if (bit_is_set(PINC, PINC6))
    3790:	86 e2       	ldi	r24, 0x26	; 38
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	fc 01       	movw	r30, r24
    3796:	80 81       	ld	r24, Z
    3798:	88 2f       	mov	r24, r24
    379a:	90 e0       	ldi	r25, 0x00	; 0
    379c:	80 74       	andi	r24, 0x40	; 64
    379e:	99 27       	eor	r25, r25
    37a0:	89 2b       	or	r24, r25
    37a2:	31 f0       	breq	.+12     	; 0x37b0 <board_read_inputs+0x2e>
	{
		board->input1_state = HIGH;
    37a4:	89 81       	ldd	r24, Y+1	; 0x01
    37a6:	9a 81       	ldd	r25, Y+2	; 0x02
    37a8:	21 e0       	ldi	r18, 0x01	; 1
    37aa:	fc 01       	movw	r30, r24
    37ac:	20 83       	st	Z, r18
    37ae:	04 c0       	rjmp	.+8      	; 0x37b8 <board_read_inputs+0x36>
	}
	else
	{
		board->input1_state = LOW;
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	9a 81       	ldd	r25, Y+2	; 0x02
    37b4:	fc 01       	movw	r30, r24
    37b6:	10 82       	st	Z, r1
	}
	
	// is pinb4 high?
	if (bit_is_set(PINB,PINB4))
    37b8:	83 e2       	ldi	r24, 0x23	; 35
    37ba:	90 e0       	ldi	r25, 0x00	; 0
    37bc:	fc 01       	movw	r30, r24
    37be:	80 81       	ld	r24, Z
    37c0:	88 2f       	mov	r24, r24
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	80 71       	andi	r24, 0x10	; 16
    37c6:	99 27       	eor	r25, r25
    37c8:	89 2b       	or	r24, r25
    37ca:	31 f0       	breq	.+12     	; 0x37d8 <board_read_inputs+0x56>
	{
		board->input2_state = HIGH;
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
    37ce:	9a 81       	ldd	r25, Y+2	; 0x02
    37d0:	21 e0       	ldi	r18, 0x01	; 1
    37d2:	fc 01       	movw	r30, r24
    37d4:	21 83       	std	Z+1, r18	; 0x01
	}
	else
	{
		board->input2_state = LOW;
	}
}
    37d6:	04 c0       	rjmp	.+8      	; 0x37e0 <board_read_inputs+0x5e>
	{
		board->input2_state = HIGH;
	}
	else
	{
		board->input2_state = LOW;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01
    37da:	9a 81       	ldd	r25, Y+2	; 0x02
    37dc:	fc 01       	movw	r30, r24
    37de:	11 82       	std	Z+1, r1	; 0x01
	}
}
    37e0:	00 00       	nop
    37e2:	0f 90       	pop	r0
    37e4:	0f 90       	pop	r0
    37e6:	df 91       	pop	r29
    37e8:	cf 91       	pop	r28
    37ea:	08 95       	ret

000037ec <isActive>:

// input 1 is "active low", so we check for LOW state of this input!
bool isActive (void)
{
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	cd b7       	in	r28, 0x3d	; 61
    37f2:	de b7       	in	r29, 0x3e	; 62
	return (bool) (bit_is_clear(PINC, PINC6));
    37f4:	86 e2       	ldi	r24, 0x26	; 38
    37f6:	90 e0       	ldi	r25, 0x00	; 0
    37f8:	fc 01       	movw	r30, r24
    37fa:	80 81       	ld	r24, Z
    37fc:	88 2f       	mov	r24, r24
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	80 74       	andi	r24, 0x40	; 64
    3802:	99 27       	eor	r25, r25
    3804:	21 e0       	ldi	r18, 0x01	; 1
    3806:	89 2b       	or	r24, r25
    3808:	09 f0       	breq	.+2      	; 0x380c <isActive+0x20>
    380a:	20 e0       	ldi	r18, 0x00	; 0
    380c:	82 2f       	mov	r24, r18
}
    380e:	df 91       	pop	r29
    3810:	cf 91       	pop	r28
    3812:	08 95       	ret

00003814 <init_1ms_timer>:
volatile uint8_t timer_250ms;
volatile uint16_t timer_500ms;
volatile uint16_t timer_1000ms;

void init_1ms_timer (void)
{
    3814:	cf 93       	push	r28
    3816:	df 93       	push	r29
    3818:	cd b7       	in	r28, 0x3d	; 61
    381a:	de b7       	in	r29, 0x3e	; 62
	// timer between interrupts: 0.001s
	// Frequency: 1000Hz
	// F_CPU: 16MHz
	// Prescaler: 64
	// Compare match register: 64
	ms_counter = 0;
    381c:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ms_counter>
    3820:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <ms_counter+0x1>
    3824:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <ms_counter+0x2>
    3828:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ms_counter+0x3>
	timer_10ms = 0;
    382c:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <timer_10ms>
	timer_20ms = 0;
    3830:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timer_20ms>
	timer_50ms = 0;
    3834:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer_50ms>
	timer_100ms = 0;
    3838:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <timer_100ms>
	timer_250ms = 0;
    383c:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <timer_250ms>
	timer_500ms = 0;
    3840:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <timer_500ms+0x1>
    3844:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <timer_500ms>
	timer_1000ms = 0;
    3848:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer_1000ms+0x1>
    384c:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_1000ms>
	TIMER_TASKS = 0;
    3850:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <TIMER_TASKS>

	OCR0A = 249;
    3854:	87 e4       	ldi	r24, 0x47	; 71
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	29 ef       	ldi	r18, 0xF9	; 249
    385a:	fc 01       	movw	r30, r24
    385c:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);			// output compare A interrupt
    385e:	8e e6       	ldi	r24, 0x6E	; 110
    3860:	90 e0       	ldi	r25, 0x00	; 0
    3862:	2e e6       	ldi	r18, 0x6E	; 110
    3864:	30 e0       	ldi	r19, 0x00	; 0
    3866:	f9 01       	movw	r30, r18
    3868:	20 81       	ld	r18, Z
    386a:	22 60       	ori	r18, 0x02	; 2
    386c:	fc 01       	movw	r30, r24
    386e:	20 83       	st	Z, r18
	// TCCR0A |= (1 << COM0A0);			// clear OC0A on compare match
	TCCR0A |= (1<<WGM01);			// Mode = CTC
    3870:	84 e4       	ldi	r24, 0x44	; 68
    3872:	90 e0       	ldi	r25, 0x00	; 0
    3874:	24 e4       	ldi	r18, 0x44	; 68
    3876:	30 e0       	ldi	r19, 0x00	; 0
    3878:	f9 01       	movw	r30, r18
    387a:	20 81       	ld	r18, Z
    387c:	22 60       	ori	r18, 0x02	; 2
    387e:	fc 01       	movw	r30, r24
    3880:	20 83       	st	Z, r18
	TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
    3882:	85 e4       	ldi	r24, 0x45	; 69
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	25 e4       	ldi	r18, 0x45	; 69
    3888:	30 e0       	ldi	r19, 0x00	; 0
    388a:	f9 01       	movw	r30, r18
    388c:	20 81       	ld	r18, Z
    388e:	23 60       	ori	r18, 0x03	; 3
    3890:	fc 01       	movw	r30, r24
    3892:	20 83       	st	Z, r18
}
    3894:	00 00       	nop
    3896:	df 91       	pop	r29
    3898:	cf 91       	pop	r28
    389a:	08 95       	ret

0000389c <timer_delay_ms>:

void timer_delay_ms (uint16_t millis)
{
    389c:	cf 93       	push	r28
    389e:	df 93       	push	r29
    38a0:	00 d0       	rcall	.+0      	; 0x38a2 <timer_delay_ms+0x6>
    38a2:	cd b7       	in	r28, 0x3d	; 61
    38a4:	de b7       	in	r29, 0x3e	; 62
    38a6:	9a 83       	std	Y+2, r25	; 0x02
    38a8:	89 83       	std	Y+1, r24	; 0x01
	do 
	{
		OCR0A = 249;
    38aa:	87 e4       	ldi	r24, 0x47	; 71
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	29 ef       	ldi	r18, 0xF9	; 249
    38b0:	fc 01       	movw	r30, r24
    38b2:	20 83       	st	Z, r18
		TCCR0A |= (1<<WGM01);				// Mode = CTC
    38b4:	84 e4       	ldi	r24, 0x44	; 68
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	24 e4       	ldi	r18, 0x44	; 68
    38ba:	30 e0       	ldi	r19, 0x00	; 0
    38bc:	f9 01       	movw	r30, r18
    38be:	20 81       	ld	r18, Z
    38c0:	22 60       	ori	r18, 0x02	; 2
    38c2:	fc 01       	movw	r30, r24
    38c4:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
    38c6:	85 e4       	ldi	r24, 0x45	; 69
    38c8:	90 e0       	ldi	r25, 0x00	; 0
    38ca:	25 e4       	ldi	r18, 0x45	; 69
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	f9 01       	movw	r30, r18
    38d0:	20 81       	ld	r18, Z
    38d2:	23 60       	ori	r18, 0x03	; 3
    38d4:	fc 01       	movw	r30, r24
    38d6:	20 83       	st	Z, r18
		while ((TIFR1 & (1 << OCF1A)) == 0);
    38d8:	00 00       	nop
    38da:	86 e3       	ldi	r24, 0x36	; 54
    38dc:	90 e0       	ldi	r25, 0x00	; 0
    38de:	fc 01       	movw	r30, r24
    38e0:	80 81       	ld	r24, Z
    38e2:	88 2f       	mov	r24, r24
    38e4:	90 e0       	ldi	r25, 0x00	; 0
    38e6:	82 70       	andi	r24, 0x02	; 2
    38e8:	99 27       	eor	r25, r25
    38ea:	89 2b       	or	r24, r25
    38ec:	b1 f3       	breq	.-20     	; 0x38da <timer_delay_ms+0x3e>
		TIFR1 |= (1 << OCF1A);
    38ee:	86 e3       	ldi	r24, 0x36	; 54
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	26 e3       	ldi	r18, 0x36	; 54
    38f4:	30 e0       	ldi	r19, 0x00	; 0
    38f6:	f9 01       	movw	r30, r18
    38f8:	20 81       	ld	r18, Z
    38fa:	22 60       	ori	r18, 0x02	; 2
    38fc:	fc 01       	movw	r30, r24
    38fe:	20 83       	st	Z, r18
		millis--;
    3900:	89 81       	ldd	r24, Y+1	; 0x01
    3902:	9a 81       	ldd	r25, Y+2	; 0x02
    3904:	01 97       	sbiw	r24, 0x01	; 1
    3906:	9a 83       	std	Y+2, r25	; 0x02
    3908:	89 83       	std	Y+1, r24	; 0x01
	} while (millis > 0);
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	9a 81       	ldd	r25, Y+2	; 0x02
    390e:	89 2b       	or	r24, r25
    3910:	61 f6       	brne	.-104    	; 0x38aa <timer_delay_ms+0xe>
}
    3912:	00 00       	nop
    3914:	0f 90       	pop	r0
    3916:	0f 90       	pop	r0
    3918:	df 91       	pop	r29
    391a:	cf 91       	pop	r28
    391c:	08 95       	ret

0000391e <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
    391e:	1f 92       	push	r1
    3920:	0f 92       	push	r0
    3922:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    3926:	0f 92       	push	r0
    3928:	11 24       	eor	r1, r1
    392a:	2f 93       	push	r18
    392c:	8f 93       	push	r24
    392e:	9f 93       	push	r25
    3930:	af 93       	push	r26
    3932:	bf 93       	push	r27
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	cd b7       	in	r28, 0x3d	; 61
    393a:	de b7       	in	r29, 0x3e	; 62
	ms_counter++;
    393c:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <ms_counter>
    3940:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <ms_counter+0x1>
    3944:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <ms_counter+0x2>
    3948:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <ms_counter+0x3>
    394c:	01 96       	adiw	r24, 0x01	; 1
    394e:	a1 1d       	adc	r26, r1
    3950:	b1 1d       	adc	r27, r1
    3952:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ms_counter>
    3956:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ms_counter+0x1>
    395a:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <ms_counter+0x2>
    395e:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <ms_counter+0x3>
	timer_10ms++;
    3962:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <timer_10ms>
    3966:	8f 5f       	subi	r24, 0xFF	; 255
    3968:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <timer_10ms>
	timer_20ms++;
    396c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <timer_20ms>
    3970:	8f 5f       	subi	r24, 0xFF	; 255
    3972:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <timer_20ms>
	timer_50ms++;
    3976:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer_50ms>
    397a:	8f 5f       	subi	r24, 0xFF	; 255
    397c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <timer_50ms>
	timer_100ms++;
    3980:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer_100ms>
    3984:	8f 5f       	subi	r24, 0xFF	; 255
    3986:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <timer_100ms>
	timer_250ms++;
    398a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <timer_250ms>
    398e:	8f 5f       	subi	r24, 0xFF	; 255
    3990:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <timer_250ms>
	timer_500ms++;
    3994:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer_500ms>
    3998:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer_500ms+0x1>
    399c:	01 96       	adiw	r24, 0x01	; 1
    399e:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer_500ms+0x1>
    39a2:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer_500ms>
	timer_1000ms++;
    39a6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_1000ms>
    39aa:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_1000ms+0x1>
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer_1000ms+0x1>
    39b4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer_1000ms>
	
	if (timer_10ms == 10)
    39b8:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <timer_10ms>
    39bc:	8a 30       	cpi	r24, 0x0A	; 10
    39be:	39 f4       	brne	.+14     	; 0x39ce <__vector_15+0xb0>
	{
		timer_10ms = 0;
    39c0:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <timer_10ms>
		bit_set(TIMER_TASKS, BIT_TIMER_10ms);
    39c4:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    39c8:	81 60       	ori	r24, 0x01	; 1
    39ca:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
    39ce:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <timer_20ms>
    39d2:	84 31       	cpi	r24, 0x14	; 20
    39d4:	39 f4       	brne	.+14     	; 0x39e4 <__vector_15+0xc6>
	{
		timer_20ms = 0;
    39d6:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timer_20ms>
		bit_set(TIMER_TASKS, BIT_TIMER_20ms);
    39da:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    39de:	82 60       	ori	r24, 0x02	; 2
    39e0:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
    39e4:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer_50ms>
    39e8:	82 33       	cpi	r24, 0x32	; 50
    39ea:	39 f4       	brne	.+14     	; 0x39fa <__vector_15+0xdc>
	{
		timer_50ms = 0;
    39ec:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer_50ms>
		bit_set(TIMER_TASKS, BIT_TIMER_50ms);
    39f0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    39f4:	84 60       	ori	r24, 0x04	; 4
    39f6:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
    39fa:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer_100ms>
    39fe:	84 36       	cpi	r24, 0x64	; 100
    3a00:	39 f4       	brne	.+14     	; 0x3a10 <__vector_15+0xf2>
	{
		timer_100ms = 0;
    3a02:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <timer_100ms>
		bit_set(TIMER_TASKS, BIT_TIMER_100ms);
    3a06:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a0a:	88 60       	ori	r24, 0x08	; 8
    3a0c:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
    3a10:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <timer_250ms>
    3a14:	8a 3f       	cpi	r24, 0xFA	; 250
    3a16:	39 f4       	brne	.+14     	; 0x3a26 <__vector_15+0x108>
	{
		timer_250ms = 0;
    3a18:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <timer_250ms>
		bit_set(TIMER_TASKS, BIT_TIMER_250ms);
    3a1c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a20:	80 61       	ori	r24, 0x10	; 16
    3a22:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
    3a26:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer_500ms>
    3a2a:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer_500ms+0x1>
    3a2e:	84 3f       	cpi	r24, 0xF4	; 244
    3a30:	91 40       	sbci	r25, 0x01	; 1
    3a32:	49 f4       	brne	.+18     	; 0x3a46 <__vector_15+0x128>
	{
		timer_500ms = 0;
    3a34:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <timer_500ms+0x1>
    3a38:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <timer_500ms>
		bit_set(TIMER_TASKS, BIT_TIMER_500ms);
    3a3c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a40:	80 62       	ori	r24, 0x20	; 32
    3a42:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
    3a46:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_1000ms>
    3a4a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_1000ms+0x1>
    3a4e:	88 3e       	cpi	r24, 0xE8	; 232
    3a50:	93 40       	sbci	r25, 0x03	; 3
    3a52:	49 f4       	brne	.+18     	; 0x3a66 <__vector_15+0x148>
	{
		timer_1000ms = 0;
    3a54:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer_1000ms+0x1>
    3a58:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_1000ms>
		bit_set(TIMER_TASKS, BIT_TIMER_1000ms);
    3a5c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a60:	80 64       	ori	r24, 0x40	; 64
    3a62:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
    3a66:	00 00       	nop
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	bf 91       	pop	r27
    3a6e:	af 91       	pop	r26
    3a70:	9f 91       	pop	r25
    3a72:	8f 91       	pop	r24
    3a74:	2f 91       	pop	r18
    3a76:	0f 90       	pop	r0
    3a78:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    3a7c:	0f 90       	pop	r0
    3a7e:	1f 90       	pop	r1
    3a80:	18 95       	reti

00003a82 <__subsf3>:
    3a82:	50 58       	subi	r21, 0x80	; 128

00003a84 <__addsf3>:
    3a84:	bb 27       	eor	r27, r27
    3a86:	aa 27       	eor	r26, r26
    3a88:	0e 94 59 1d 	call	0x3ab2	; 0x3ab2 <__addsf3x>
    3a8c:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__fp_round>
    3a90:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <__fp_pscA>
    3a94:	38 f0       	brcs	.+14     	; 0x3aa4 <__addsf3+0x20>
    3a96:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__fp_pscB>
    3a9a:	20 f0       	brcs	.+8      	; 0x3aa4 <__addsf3+0x20>
    3a9c:	39 f4       	brne	.+14     	; 0x3aac <__addsf3+0x28>
    3a9e:	9f 3f       	cpi	r25, 0xFF	; 255
    3aa0:	19 f4       	brne	.+6      	; 0x3aa8 <__addsf3+0x24>
    3aa2:	26 f4       	brtc	.+8      	; 0x3aac <__addsf3+0x28>
    3aa4:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__fp_nan>
    3aa8:	0e f4       	brtc	.+2      	; 0x3aac <__addsf3+0x28>
    3aaa:	e0 95       	com	r30
    3aac:	e7 fb       	bst	r30, 7
    3aae:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__fp_inf>

00003ab2 <__addsf3x>:
    3ab2:	e9 2f       	mov	r30, r25
    3ab4:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    3ab8:	58 f3       	brcs	.-42     	; 0x3a90 <__addsf3+0xc>
    3aba:	ba 17       	cp	r27, r26
    3abc:	62 07       	cpc	r22, r18
    3abe:	73 07       	cpc	r23, r19
    3ac0:	84 07       	cpc	r24, r20
    3ac2:	95 07       	cpc	r25, r21
    3ac4:	20 f0       	brcs	.+8      	; 0x3ace <__addsf3x+0x1c>
    3ac6:	79 f4       	brne	.+30     	; 0x3ae6 <__addsf3x+0x34>
    3ac8:	a6 f5       	brtc	.+104    	; 0x3b32 <__addsf3x+0x80>
    3aca:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_zero>
    3ace:	0e f4       	brtc	.+2      	; 0x3ad2 <__addsf3x+0x20>
    3ad0:	e0 95       	com	r30
    3ad2:	0b 2e       	mov	r0, r27
    3ad4:	ba 2f       	mov	r27, r26
    3ad6:	a0 2d       	mov	r26, r0
    3ad8:	0b 01       	movw	r0, r22
    3ada:	b9 01       	movw	r22, r18
    3adc:	90 01       	movw	r18, r0
    3ade:	0c 01       	movw	r0, r24
    3ae0:	ca 01       	movw	r24, r20
    3ae2:	a0 01       	movw	r20, r0
    3ae4:	11 24       	eor	r1, r1
    3ae6:	ff 27       	eor	r31, r31
    3ae8:	59 1b       	sub	r21, r25
    3aea:	99 f0       	breq	.+38     	; 0x3b12 <__addsf3x+0x60>
    3aec:	59 3f       	cpi	r21, 0xF9	; 249
    3aee:	50 f4       	brcc	.+20     	; 0x3b04 <__addsf3x+0x52>
    3af0:	50 3e       	cpi	r21, 0xE0	; 224
    3af2:	68 f1       	brcs	.+90     	; 0x3b4e <__addsf3x+0x9c>
    3af4:	1a 16       	cp	r1, r26
    3af6:	f0 40       	sbci	r31, 0x00	; 0
    3af8:	a2 2f       	mov	r26, r18
    3afa:	23 2f       	mov	r18, r19
    3afc:	34 2f       	mov	r19, r20
    3afe:	44 27       	eor	r20, r20
    3b00:	58 5f       	subi	r21, 0xF8	; 248
    3b02:	f3 cf       	rjmp	.-26     	; 0x3aea <__addsf3x+0x38>
    3b04:	46 95       	lsr	r20
    3b06:	37 95       	ror	r19
    3b08:	27 95       	ror	r18
    3b0a:	a7 95       	ror	r26
    3b0c:	f0 40       	sbci	r31, 0x00	; 0
    3b0e:	53 95       	inc	r21
    3b10:	c9 f7       	brne	.-14     	; 0x3b04 <__addsf3x+0x52>
    3b12:	7e f4       	brtc	.+30     	; 0x3b32 <__addsf3x+0x80>
    3b14:	1f 16       	cp	r1, r31
    3b16:	ba 0b       	sbc	r27, r26
    3b18:	62 0b       	sbc	r22, r18
    3b1a:	73 0b       	sbc	r23, r19
    3b1c:	84 0b       	sbc	r24, r20
    3b1e:	ba f0       	brmi	.+46     	; 0x3b4e <__addsf3x+0x9c>
    3b20:	91 50       	subi	r25, 0x01	; 1
    3b22:	a1 f0       	breq	.+40     	; 0x3b4c <__addsf3x+0x9a>
    3b24:	ff 0f       	add	r31, r31
    3b26:	bb 1f       	adc	r27, r27
    3b28:	66 1f       	adc	r22, r22
    3b2a:	77 1f       	adc	r23, r23
    3b2c:	88 1f       	adc	r24, r24
    3b2e:	c2 f7       	brpl	.-16     	; 0x3b20 <__addsf3x+0x6e>
    3b30:	0e c0       	rjmp	.+28     	; 0x3b4e <__addsf3x+0x9c>
    3b32:	ba 0f       	add	r27, r26
    3b34:	62 1f       	adc	r22, r18
    3b36:	73 1f       	adc	r23, r19
    3b38:	84 1f       	adc	r24, r20
    3b3a:	48 f4       	brcc	.+18     	; 0x3b4e <__addsf3x+0x9c>
    3b3c:	87 95       	ror	r24
    3b3e:	77 95       	ror	r23
    3b40:	67 95       	ror	r22
    3b42:	b7 95       	ror	r27
    3b44:	f7 95       	ror	r31
    3b46:	9e 3f       	cpi	r25, 0xFE	; 254
    3b48:	08 f0       	brcs	.+2      	; 0x3b4c <__addsf3x+0x9a>
    3b4a:	b0 cf       	rjmp	.-160    	; 0x3aac <__addsf3+0x28>
    3b4c:	93 95       	inc	r25
    3b4e:	88 0f       	add	r24, r24
    3b50:	08 f0       	brcs	.+2      	; 0x3b54 <__addsf3x+0xa2>
    3b52:	99 27       	eor	r25, r25
    3b54:	ee 0f       	add	r30, r30
    3b56:	97 95       	ror	r25
    3b58:	87 95       	ror	r24
    3b5a:	08 95       	ret

00003b5c <__divsf3>:
    3b5c:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <__divsf3x>
    3b60:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__fp_round>
    3b64:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__fp_pscB>
    3b68:	58 f0       	brcs	.+22     	; 0x3b80 <__divsf3+0x24>
    3b6a:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <__fp_pscA>
    3b6e:	40 f0       	brcs	.+16     	; 0x3b80 <__divsf3+0x24>
    3b70:	29 f4       	brne	.+10     	; 0x3b7c <__divsf3+0x20>
    3b72:	5f 3f       	cpi	r21, 0xFF	; 255
    3b74:	29 f0       	breq	.+10     	; 0x3b80 <__divsf3+0x24>
    3b76:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__fp_inf>
    3b7a:	51 11       	cpse	r21, r1
    3b7c:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    3b80:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__fp_nan>

00003b84 <__divsf3x>:
    3b84:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    3b88:	68 f3       	brcs	.-38     	; 0x3b64 <__divsf3+0x8>

00003b8a <__divsf3_pse>:
    3b8a:	99 23       	and	r25, r25
    3b8c:	b1 f3       	breq	.-20     	; 0x3b7a <__divsf3+0x1e>
    3b8e:	55 23       	and	r21, r21
    3b90:	91 f3       	breq	.-28     	; 0x3b76 <__divsf3+0x1a>
    3b92:	95 1b       	sub	r25, r21
    3b94:	55 0b       	sbc	r21, r21
    3b96:	bb 27       	eor	r27, r27
    3b98:	aa 27       	eor	r26, r26
    3b9a:	62 17       	cp	r22, r18
    3b9c:	73 07       	cpc	r23, r19
    3b9e:	84 07       	cpc	r24, r20
    3ba0:	38 f0       	brcs	.+14     	; 0x3bb0 <__divsf3_pse+0x26>
    3ba2:	9f 5f       	subi	r25, 0xFF	; 255
    3ba4:	5f 4f       	sbci	r21, 0xFF	; 255
    3ba6:	22 0f       	add	r18, r18
    3ba8:	33 1f       	adc	r19, r19
    3baa:	44 1f       	adc	r20, r20
    3bac:	aa 1f       	adc	r26, r26
    3bae:	a9 f3       	breq	.-22     	; 0x3b9a <__divsf3_pse+0x10>
    3bb0:	35 d0       	rcall	.+106    	; 0x3c1c <__divsf3_pse+0x92>
    3bb2:	0e 2e       	mov	r0, r30
    3bb4:	3a f0       	brmi	.+14     	; 0x3bc4 <__divsf3_pse+0x3a>
    3bb6:	e0 e8       	ldi	r30, 0x80	; 128
    3bb8:	32 d0       	rcall	.+100    	; 0x3c1e <__divsf3_pse+0x94>
    3bba:	91 50       	subi	r25, 0x01	; 1
    3bbc:	50 40       	sbci	r21, 0x00	; 0
    3bbe:	e6 95       	lsr	r30
    3bc0:	00 1c       	adc	r0, r0
    3bc2:	ca f7       	brpl	.-14     	; 0x3bb6 <__divsf3_pse+0x2c>
    3bc4:	2b d0       	rcall	.+86     	; 0x3c1c <__divsf3_pse+0x92>
    3bc6:	fe 2f       	mov	r31, r30
    3bc8:	29 d0       	rcall	.+82     	; 0x3c1c <__divsf3_pse+0x92>
    3bca:	66 0f       	add	r22, r22
    3bcc:	77 1f       	adc	r23, r23
    3bce:	88 1f       	adc	r24, r24
    3bd0:	bb 1f       	adc	r27, r27
    3bd2:	26 17       	cp	r18, r22
    3bd4:	37 07       	cpc	r19, r23
    3bd6:	48 07       	cpc	r20, r24
    3bd8:	ab 07       	cpc	r26, r27
    3bda:	b0 e8       	ldi	r27, 0x80	; 128
    3bdc:	09 f0       	breq	.+2      	; 0x3be0 <__divsf3_pse+0x56>
    3bde:	bb 0b       	sbc	r27, r27
    3be0:	80 2d       	mov	r24, r0
    3be2:	bf 01       	movw	r22, r30
    3be4:	ff 27       	eor	r31, r31
    3be6:	93 58       	subi	r25, 0x83	; 131
    3be8:	5f 4f       	sbci	r21, 0xFF	; 255
    3bea:	3a f0       	brmi	.+14     	; 0x3bfa <__divsf3_pse+0x70>
    3bec:	9e 3f       	cpi	r25, 0xFE	; 254
    3bee:	51 05       	cpc	r21, r1
    3bf0:	78 f0       	brcs	.+30     	; 0x3c10 <__divsf3_pse+0x86>
    3bf2:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__fp_inf>
    3bf6:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    3bfa:	5f 3f       	cpi	r21, 0xFF	; 255
    3bfc:	e4 f3       	brlt	.-8      	; 0x3bf6 <__divsf3_pse+0x6c>
    3bfe:	98 3e       	cpi	r25, 0xE8	; 232
    3c00:	d4 f3       	brlt	.-12     	; 0x3bf6 <__divsf3_pse+0x6c>
    3c02:	86 95       	lsr	r24
    3c04:	77 95       	ror	r23
    3c06:	67 95       	ror	r22
    3c08:	b7 95       	ror	r27
    3c0a:	f7 95       	ror	r31
    3c0c:	9f 5f       	subi	r25, 0xFF	; 255
    3c0e:	c9 f7       	brne	.-14     	; 0x3c02 <__divsf3_pse+0x78>
    3c10:	88 0f       	add	r24, r24
    3c12:	91 1d       	adc	r25, r1
    3c14:	96 95       	lsr	r25
    3c16:	87 95       	ror	r24
    3c18:	97 f9       	bld	r25, 7
    3c1a:	08 95       	ret
    3c1c:	e1 e0       	ldi	r30, 0x01	; 1
    3c1e:	66 0f       	add	r22, r22
    3c20:	77 1f       	adc	r23, r23
    3c22:	88 1f       	adc	r24, r24
    3c24:	bb 1f       	adc	r27, r27
    3c26:	62 17       	cp	r22, r18
    3c28:	73 07       	cpc	r23, r19
    3c2a:	84 07       	cpc	r24, r20
    3c2c:	ba 07       	cpc	r27, r26
    3c2e:	20 f0       	brcs	.+8      	; 0x3c38 <__divsf3_pse+0xae>
    3c30:	62 1b       	sub	r22, r18
    3c32:	73 0b       	sbc	r23, r19
    3c34:	84 0b       	sbc	r24, r20
    3c36:	ba 0b       	sbc	r27, r26
    3c38:	ee 1f       	adc	r30, r30
    3c3a:	88 f7       	brcc	.-30     	; 0x3c1e <__divsf3_pse+0x94>
    3c3c:	e0 95       	com	r30
    3c3e:	08 95       	ret

00003c40 <__fixsfsi>:
    3c40:	0e 94 27 1e 	call	0x3c4e	; 0x3c4e <__fixunssfsi>
    3c44:	68 94       	set
    3c46:	b1 11       	cpse	r27, r1
    3c48:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    3c4c:	08 95       	ret

00003c4e <__fixunssfsi>:
    3c4e:	0e 94 c3 1e 	call	0x3d86	; 0x3d86 <__fp_splitA>
    3c52:	88 f0       	brcs	.+34     	; 0x3c76 <__fixunssfsi+0x28>
    3c54:	9f 57       	subi	r25, 0x7F	; 127
    3c56:	98 f0       	brcs	.+38     	; 0x3c7e <__fixunssfsi+0x30>
    3c58:	b9 2f       	mov	r27, r25
    3c5a:	99 27       	eor	r25, r25
    3c5c:	b7 51       	subi	r27, 0x17	; 23
    3c5e:	b0 f0       	brcs	.+44     	; 0x3c8c <__fixunssfsi+0x3e>
    3c60:	e1 f0       	breq	.+56     	; 0x3c9a <__fixunssfsi+0x4c>
    3c62:	66 0f       	add	r22, r22
    3c64:	77 1f       	adc	r23, r23
    3c66:	88 1f       	adc	r24, r24
    3c68:	99 1f       	adc	r25, r25
    3c6a:	1a f0       	brmi	.+6      	; 0x3c72 <__fixunssfsi+0x24>
    3c6c:	ba 95       	dec	r27
    3c6e:	c9 f7       	brne	.-14     	; 0x3c62 <__fixunssfsi+0x14>
    3c70:	14 c0       	rjmp	.+40     	; 0x3c9a <__fixunssfsi+0x4c>
    3c72:	b1 30       	cpi	r27, 0x01	; 1
    3c74:	91 f0       	breq	.+36     	; 0x3c9a <__fixunssfsi+0x4c>
    3c76:	0e 94 dd 1e 	call	0x3dba	; 0x3dba <__fp_zero>
    3c7a:	b1 e0       	ldi	r27, 0x01	; 1
    3c7c:	08 95       	ret
    3c7e:	0c 94 dd 1e 	jmp	0x3dba	; 0x3dba <__fp_zero>
    3c82:	67 2f       	mov	r22, r23
    3c84:	78 2f       	mov	r23, r24
    3c86:	88 27       	eor	r24, r24
    3c88:	b8 5f       	subi	r27, 0xF8	; 248
    3c8a:	39 f0       	breq	.+14     	; 0x3c9a <__fixunssfsi+0x4c>
    3c8c:	b9 3f       	cpi	r27, 0xF9	; 249
    3c8e:	cc f3       	brlt	.-14     	; 0x3c82 <__fixunssfsi+0x34>
    3c90:	86 95       	lsr	r24
    3c92:	77 95       	ror	r23
    3c94:	67 95       	ror	r22
    3c96:	b3 95       	inc	r27
    3c98:	d9 f7       	brne	.-10     	; 0x3c90 <__fixunssfsi+0x42>
    3c9a:	3e f4       	brtc	.+14     	; 0x3caa <__fixunssfsi+0x5c>
    3c9c:	90 95       	com	r25
    3c9e:	80 95       	com	r24
    3ca0:	70 95       	com	r23
    3ca2:	61 95       	neg	r22
    3ca4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca8:	9f 4f       	sbci	r25, 0xFF	; 255
    3caa:	08 95       	ret

00003cac <__floatunsisf>:
    3cac:	e8 94       	clt
    3cae:	09 c0       	rjmp	.+18     	; 0x3cc2 <__floatsisf+0x12>

00003cb0 <__floatsisf>:
    3cb0:	97 fb       	bst	r25, 7
    3cb2:	3e f4       	brtc	.+14     	; 0x3cc2 <__floatsisf+0x12>
    3cb4:	90 95       	com	r25
    3cb6:	80 95       	com	r24
    3cb8:	70 95       	com	r23
    3cba:	61 95       	neg	r22
    3cbc:	7f 4f       	sbci	r23, 0xFF	; 255
    3cbe:	8f 4f       	sbci	r24, 0xFF	; 255
    3cc0:	9f 4f       	sbci	r25, 0xFF	; 255
    3cc2:	99 23       	and	r25, r25
    3cc4:	a9 f0       	breq	.+42     	; 0x3cf0 <__floatsisf+0x40>
    3cc6:	f9 2f       	mov	r31, r25
    3cc8:	96 e9       	ldi	r25, 0x96	; 150
    3cca:	bb 27       	eor	r27, r27
    3ccc:	93 95       	inc	r25
    3cce:	f6 95       	lsr	r31
    3cd0:	87 95       	ror	r24
    3cd2:	77 95       	ror	r23
    3cd4:	67 95       	ror	r22
    3cd6:	b7 95       	ror	r27
    3cd8:	f1 11       	cpse	r31, r1
    3cda:	f8 cf       	rjmp	.-16     	; 0x3ccc <__floatsisf+0x1c>
    3cdc:	fa f4       	brpl	.+62     	; 0x3d1c <__floatsisf+0x6c>
    3cde:	bb 0f       	add	r27, r27
    3ce0:	11 f4       	brne	.+4      	; 0x3ce6 <__floatsisf+0x36>
    3ce2:	60 ff       	sbrs	r22, 0
    3ce4:	1b c0       	rjmp	.+54     	; 0x3d1c <__floatsisf+0x6c>
    3ce6:	6f 5f       	subi	r22, 0xFF	; 255
    3ce8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cea:	8f 4f       	sbci	r24, 0xFF	; 255
    3cec:	9f 4f       	sbci	r25, 0xFF	; 255
    3cee:	16 c0       	rjmp	.+44     	; 0x3d1c <__floatsisf+0x6c>
    3cf0:	88 23       	and	r24, r24
    3cf2:	11 f0       	breq	.+4      	; 0x3cf8 <__floatsisf+0x48>
    3cf4:	96 e9       	ldi	r25, 0x96	; 150
    3cf6:	11 c0       	rjmp	.+34     	; 0x3d1a <__floatsisf+0x6a>
    3cf8:	77 23       	and	r23, r23
    3cfa:	21 f0       	breq	.+8      	; 0x3d04 <__floatsisf+0x54>
    3cfc:	9e e8       	ldi	r25, 0x8E	; 142
    3cfe:	87 2f       	mov	r24, r23
    3d00:	76 2f       	mov	r23, r22
    3d02:	05 c0       	rjmp	.+10     	; 0x3d0e <__floatsisf+0x5e>
    3d04:	66 23       	and	r22, r22
    3d06:	71 f0       	breq	.+28     	; 0x3d24 <__floatsisf+0x74>
    3d08:	96 e8       	ldi	r25, 0x86	; 134
    3d0a:	86 2f       	mov	r24, r22
    3d0c:	70 e0       	ldi	r23, 0x00	; 0
    3d0e:	60 e0       	ldi	r22, 0x00	; 0
    3d10:	2a f0       	brmi	.+10     	; 0x3d1c <__floatsisf+0x6c>
    3d12:	9a 95       	dec	r25
    3d14:	66 0f       	add	r22, r22
    3d16:	77 1f       	adc	r23, r23
    3d18:	88 1f       	adc	r24, r24
    3d1a:	da f7       	brpl	.-10     	; 0x3d12 <__floatsisf+0x62>
    3d1c:	88 0f       	add	r24, r24
    3d1e:	96 95       	lsr	r25
    3d20:	87 95       	ror	r24
    3d22:	97 f9       	bld	r25, 7
    3d24:	08 95       	ret

00003d26 <__fp_inf>:
    3d26:	97 f9       	bld	r25, 7
    3d28:	9f 67       	ori	r25, 0x7F	; 127
    3d2a:	80 e8       	ldi	r24, 0x80	; 128
    3d2c:	70 e0       	ldi	r23, 0x00	; 0
    3d2e:	60 e0       	ldi	r22, 0x00	; 0
    3d30:	08 95       	ret

00003d32 <__fp_nan>:
    3d32:	9f ef       	ldi	r25, 0xFF	; 255
    3d34:	80 ec       	ldi	r24, 0xC0	; 192
    3d36:	08 95       	ret

00003d38 <__fp_pscA>:
    3d38:	00 24       	eor	r0, r0
    3d3a:	0a 94       	dec	r0
    3d3c:	16 16       	cp	r1, r22
    3d3e:	17 06       	cpc	r1, r23
    3d40:	18 06       	cpc	r1, r24
    3d42:	09 06       	cpc	r0, r25
    3d44:	08 95       	ret

00003d46 <__fp_pscB>:
    3d46:	00 24       	eor	r0, r0
    3d48:	0a 94       	dec	r0
    3d4a:	12 16       	cp	r1, r18
    3d4c:	13 06       	cpc	r1, r19
    3d4e:	14 06       	cpc	r1, r20
    3d50:	05 06       	cpc	r0, r21
    3d52:	08 95       	ret

00003d54 <__fp_round>:
    3d54:	09 2e       	mov	r0, r25
    3d56:	03 94       	inc	r0
    3d58:	00 0c       	add	r0, r0
    3d5a:	11 f4       	brne	.+4      	; 0x3d60 <__fp_round+0xc>
    3d5c:	88 23       	and	r24, r24
    3d5e:	52 f0       	brmi	.+20     	; 0x3d74 <__fp_round+0x20>
    3d60:	bb 0f       	add	r27, r27
    3d62:	40 f4       	brcc	.+16     	; 0x3d74 <__fp_round+0x20>
    3d64:	bf 2b       	or	r27, r31
    3d66:	11 f4       	brne	.+4      	; 0x3d6c <__fp_round+0x18>
    3d68:	60 ff       	sbrs	r22, 0
    3d6a:	04 c0       	rjmp	.+8      	; 0x3d74 <__fp_round+0x20>
    3d6c:	6f 5f       	subi	r22, 0xFF	; 255
    3d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d70:	8f 4f       	sbci	r24, 0xFF	; 255
    3d72:	9f 4f       	sbci	r25, 0xFF	; 255
    3d74:	08 95       	ret

00003d76 <__fp_split3>:
    3d76:	57 fd       	sbrc	r21, 7
    3d78:	90 58       	subi	r25, 0x80	; 128
    3d7a:	44 0f       	add	r20, r20
    3d7c:	55 1f       	adc	r21, r21
    3d7e:	59 f0       	breq	.+22     	; 0x3d96 <__fp_splitA+0x10>
    3d80:	5f 3f       	cpi	r21, 0xFF	; 255
    3d82:	71 f0       	breq	.+28     	; 0x3da0 <__fp_splitA+0x1a>
    3d84:	47 95       	ror	r20

00003d86 <__fp_splitA>:
    3d86:	88 0f       	add	r24, r24
    3d88:	97 fb       	bst	r25, 7
    3d8a:	99 1f       	adc	r25, r25
    3d8c:	61 f0       	breq	.+24     	; 0x3da6 <__fp_splitA+0x20>
    3d8e:	9f 3f       	cpi	r25, 0xFF	; 255
    3d90:	79 f0       	breq	.+30     	; 0x3db0 <__fp_splitA+0x2a>
    3d92:	87 95       	ror	r24
    3d94:	08 95       	ret
    3d96:	12 16       	cp	r1, r18
    3d98:	13 06       	cpc	r1, r19
    3d9a:	14 06       	cpc	r1, r20
    3d9c:	55 1f       	adc	r21, r21
    3d9e:	f2 cf       	rjmp	.-28     	; 0x3d84 <__fp_split3+0xe>
    3da0:	46 95       	lsr	r20
    3da2:	f1 df       	rcall	.-30     	; 0x3d86 <__fp_splitA>
    3da4:	08 c0       	rjmp	.+16     	; 0x3db6 <__fp_splitA+0x30>
    3da6:	16 16       	cp	r1, r22
    3da8:	17 06       	cpc	r1, r23
    3daa:	18 06       	cpc	r1, r24
    3dac:	99 1f       	adc	r25, r25
    3dae:	f1 cf       	rjmp	.-30     	; 0x3d92 <__fp_splitA+0xc>
    3db0:	86 95       	lsr	r24
    3db2:	71 05       	cpc	r23, r1
    3db4:	61 05       	cpc	r22, r1
    3db6:	08 94       	sec
    3db8:	08 95       	ret

00003dba <__fp_zero>:
    3dba:	e8 94       	clt

00003dbc <__fp_szero>:
    3dbc:	bb 27       	eor	r27, r27
    3dbe:	66 27       	eor	r22, r22
    3dc0:	77 27       	eor	r23, r23
    3dc2:	cb 01       	movw	r24, r22
    3dc4:	97 f9       	bld	r25, 7
    3dc6:	08 95       	ret

00003dc8 <__mulsf3>:
    3dc8:	0e 94 f7 1e 	call	0x3dee	; 0x3dee <__mulsf3x>
    3dcc:	0c 94 aa 1e 	jmp	0x3d54	; 0x3d54 <__fp_round>
    3dd0:	0e 94 9c 1e 	call	0x3d38	; 0x3d38 <__fp_pscA>
    3dd4:	38 f0       	brcs	.+14     	; 0x3de4 <__mulsf3+0x1c>
    3dd6:	0e 94 a3 1e 	call	0x3d46	; 0x3d46 <__fp_pscB>
    3dda:	20 f0       	brcs	.+8      	; 0x3de4 <__mulsf3+0x1c>
    3ddc:	95 23       	and	r25, r21
    3dde:	11 f0       	breq	.+4      	; 0x3de4 <__mulsf3+0x1c>
    3de0:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__fp_inf>
    3de4:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__fp_nan>
    3de8:	11 24       	eor	r1, r1
    3dea:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>

00003dee <__mulsf3x>:
    3dee:	0e 94 bb 1e 	call	0x3d76	; 0x3d76 <__fp_split3>
    3df2:	70 f3       	brcs	.-36     	; 0x3dd0 <__mulsf3+0x8>

00003df4 <__mulsf3_pse>:
    3df4:	95 9f       	mul	r25, r21
    3df6:	c1 f3       	breq	.-16     	; 0x3de8 <__mulsf3+0x20>
    3df8:	95 0f       	add	r25, r21
    3dfa:	50 e0       	ldi	r21, 0x00	; 0
    3dfc:	55 1f       	adc	r21, r21
    3dfe:	62 9f       	mul	r22, r18
    3e00:	f0 01       	movw	r30, r0
    3e02:	72 9f       	mul	r23, r18
    3e04:	bb 27       	eor	r27, r27
    3e06:	f0 0d       	add	r31, r0
    3e08:	b1 1d       	adc	r27, r1
    3e0a:	63 9f       	mul	r22, r19
    3e0c:	aa 27       	eor	r26, r26
    3e0e:	f0 0d       	add	r31, r0
    3e10:	b1 1d       	adc	r27, r1
    3e12:	aa 1f       	adc	r26, r26
    3e14:	64 9f       	mul	r22, r20
    3e16:	66 27       	eor	r22, r22
    3e18:	b0 0d       	add	r27, r0
    3e1a:	a1 1d       	adc	r26, r1
    3e1c:	66 1f       	adc	r22, r22
    3e1e:	82 9f       	mul	r24, r18
    3e20:	22 27       	eor	r18, r18
    3e22:	b0 0d       	add	r27, r0
    3e24:	a1 1d       	adc	r26, r1
    3e26:	62 1f       	adc	r22, r18
    3e28:	73 9f       	mul	r23, r19
    3e2a:	b0 0d       	add	r27, r0
    3e2c:	a1 1d       	adc	r26, r1
    3e2e:	62 1f       	adc	r22, r18
    3e30:	83 9f       	mul	r24, r19
    3e32:	a0 0d       	add	r26, r0
    3e34:	61 1d       	adc	r22, r1
    3e36:	22 1f       	adc	r18, r18
    3e38:	74 9f       	mul	r23, r20
    3e3a:	33 27       	eor	r19, r19
    3e3c:	a0 0d       	add	r26, r0
    3e3e:	61 1d       	adc	r22, r1
    3e40:	23 1f       	adc	r18, r19
    3e42:	84 9f       	mul	r24, r20
    3e44:	60 0d       	add	r22, r0
    3e46:	21 1d       	adc	r18, r1
    3e48:	82 2f       	mov	r24, r18
    3e4a:	76 2f       	mov	r23, r22
    3e4c:	6a 2f       	mov	r22, r26
    3e4e:	11 24       	eor	r1, r1
    3e50:	9f 57       	subi	r25, 0x7F	; 127
    3e52:	50 40       	sbci	r21, 0x00	; 0
    3e54:	9a f0       	brmi	.+38     	; 0x3e7c <__mulsf3_pse+0x88>
    3e56:	f1 f0       	breq	.+60     	; 0x3e94 <__mulsf3_pse+0xa0>
    3e58:	88 23       	and	r24, r24
    3e5a:	4a f0       	brmi	.+18     	; 0x3e6e <__mulsf3_pse+0x7a>
    3e5c:	ee 0f       	add	r30, r30
    3e5e:	ff 1f       	adc	r31, r31
    3e60:	bb 1f       	adc	r27, r27
    3e62:	66 1f       	adc	r22, r22
    3e64:	77 1f       	adc	r23, r23
    3e66:	88 1f       	adc	r24, r24
    3e68:	91 50       	subi	r25, 0x01	; 1
    3e6a:	50 40       	sbci	r21, 0x00	; 0
    3e6c:	a9 f7       	brne	.-22     	; 0x3e58 <__mulsf3_pse+0x64>
    3e6e:	9e 3f       	cpi	r25, 0xFE	; 254
    3e70:	51 05       	cpc	r21, r1
    3e72:	80 f0       	brcs	.+32     	; 0x3e94 <__mulsf3_pse+0xa0>
    3e74:	0c 94 93 1e 	jmp	0x3d26	; 0x3d26 <__fp_inf>
    3e78:	0c 94 de 1e 	jmp	0x3dbc	; 0x3dbc <__fp_szero>
    3e7c:	5f 3f       	cpi	r21, 0xFF	; 255
    3e7e:	e4 f3       	brlt	.-8      	; 0x3e78 <__mulsf3_pse+0x84>
    3e80:	98 3e       	cpi	r25, 0xE8	; 232
    3e82:	d4 f3       	brlt	.-12     	; 0x3e78 <__mulsf3_pse+0x84>
    3e84:	86 95       	lsr	r24
    3e86:	77 95       	ror	r23
    3e88:	67 95       	ror	r22
    3e8a:	b7 95       	ror	r27
    3e8c:	f7 95       	ror	r31
    3e8e:	e7 95       	ror	r30
    3e90:	9f 5f       	subi	r25, 0xFF	; 255
    3e92:	c1 f7       	brne	.-16     	; 0x3e84 <__mulsf3_pse+0x90>
    3e94:	fe 2b       	or	r31, r30
    3e96:	88 0f       	add	r24, r24
    3e98:	91 1d       	adc	r25, r1
    3e9a:	96 95       	lsr	r25
    3e9c:	87 95       	ror	r24
    3e9e:	97 f9       	bld	r25, 7
    3ea0:	08 95       	ret

00003ea2 <__mulsi3>:
    3ea2:	db 01       	movw	r26, r22
    3ea4:	8f 93       	push	r24
    3ea6:	9f 93       	push	r25
    3ea8:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__muluhisi3>
    3eac:	bf 91       	pop	r27
    3eae:	af 91       	pop	r26
    3eb0:	a2 9f       	mul	r26, r18
    3eb2:	80 0d       	add	r24, r0
    3eb4:	91 1d       	adc	r25, r1
    3eb6:	a3 9f       	mul	r26, r19
    3eb8:	90 0d       	add	r25, r0
    3eba:	b2 9f       	mul	r27, r18
    3ebc:	90 0d       	add	r25, r0
    3ebe:	11 24       	eor	r1, r1
    3ec0:	08 95       	ret

00003ec2 <__udivmodsi4>:
    3ec2:	a1 e2       	ldi	r26, 0x21	; 33
    3ec4:	1a 2e       	mov	r1, r26
    3ec6:	aa 1b       	sub	r26, r26
    3ec8:	bb 1b       	sub	r27, r27
    3eca:	fd 01       	movw	r30, r26
    3ecc:	0d c0       	rjmp	.+26     	; 0x3ee8 <__udivmodsi4_ep>

00003ece <__udivmodsi4_loop>:
    3ece:	aa 1f       	adc	r26, r26
    3ed0:	bb 1f       	adc	r27, r27
    3ed2:	ee 1f       	adc	r30, r30
    3ed4:	ff 1f       	adc	r31, r31
    3ed6:	a2 17       	cp	r26, r18
    3ed8:	b3 07       	cpc	r27, r19
    3eda:	e4 07       	cpc	r30, r20
    3edc:	f5 07       	cpc	r31, r21
    3ede:	20 f0       	brcs	.+8      	; 0x3ee8 <__udivmodsi4_ep>
    3ee0:	a2 1b       	sub	r26, r18
    3ee2:	b3 0b       	sbc	r27, r19
    3ee4:	e4 0b       	sbc	r30, r20
    3ee6:	f5 0b       	sbc	r31, r21

00003ee8 <__udivmodsi4_ep>:
    3ee8:	66 1f       	adc	r22, r22
    3eea:	77 1f       	adc	r23, r23
    3eec:	88 1f       	adc	r24, r24
    3eee:	99 1f       	adc	r25, r25
    3ef0:	1a 94       	dec	r1
    3ef2:	69 f7       	brne	.-38     	; 0x3ece <__udivmodsi4_loop>
    3ef4:	60 95       	com	r22
    3ef6:	70 95       	com	r23
    3ef8:	80 95       	com	r24
    3efa:	90 95       	com	r25
    3efc:	9b 01       	movw	r18, r22
    3efe:	ac 01       	movw	r20, r24
    3f00:	bd 01       	movw	r22, r26
    3f02:	cf 01       	movw	r24, r30
    3f04:	08 95       	ret

00003f06 <__tablejump2__>:
    3f06:	ee 0f       	add	r30, r30
    3f08:	ff 1f       	adc	r31, r31
    3f0a:	05 90       	lpm	r0, Z+
    3f0c:	f4 91       	lpm	r31, Z
    3f0e:	e0 2d       	mov	r30, r0
    3f10:	09 94       	ijmp

00003f12 <__umulhisi3>:
    3f12:	a2 9f       	mul	r26, r18
    3f14:	b0 01       	movw	r22, r0
    3f16:	b3 9f       	mul	r27, r19
    3f18:	c0 01       	movw	r24, r0
    3f1a:	a3 9f       	mul	r26, r19
    3f1c:	70 0d       	add	r23, r0
    3f1e:	81 1d       	adc	r24, r1
    3f20:	11 24       	eor	r1, r1
    3f22:	91 1d       	adc	r25, r1
    3f24:	b2 9f       	mul	r27, r18
    3f26:	70 0d       	add	r23, r0
    3f28:	81 1d       	adc	r24, r1
    3f2a:	11 24       	eor	r1, r1
    3f2c:	91 1d       	adc	r25, r1
    3f2e:	08 95       	ret

00003f30 <__muluhisi3>:
    3f30:	0e 94 89 1f 	call	0x3f12	; 0x3f12 <__umulhisi3>
    3f34:	a5 9f       	mul	r26, r21
    3f36:	90 0d       	add	r25, r0
    3f38:	b4 9f       	mul	r27, r20
    3f3a:	90 0d       	add	r25, r0
    3f3c:	a4 9f       	mul	r26, r20
    3f3e:	80 0d       	add	r24, r0
    3f40:	91 1d       	adc	r25, r1
    3f42:	11 24       	eor	r1, r1
    3f44:	08 95       	ret

00003f46 <_exit>:
    3f46:	f8 94       	cli

00003f48 <__stop_program>:
    3f48:	ff cf       	rjmp	.-2      	; 0x3f48 <__stop_program>
