
BL49.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b0  00800100  00003ffa  0000408e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003ffa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  008001b0  008001b0  0000413e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000413e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004170  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000308  00000000  00000000  000041b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cee  00000000  00000000  000044b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000153a  00000000  00000000  000071a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00002332  00000000  00000000  000086e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000009a4  00000000  00000000  0000aa14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001157  00000000  00000000  0000b3b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000136e  00000000  00000000  0000c50f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000258  00000000  00000000  0000d87d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 49 00 	jmp	0x92	; 0x92 <__ctors_end>
       4:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       8:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
       c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      10:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      14:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      18:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      1c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      20:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      24:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      28:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      2c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      30:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      34:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      38:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      3c:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__vector_15>
      40:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      44:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      48:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      4c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      50:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      54:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      58:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      5c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      60:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      64:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      68:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      6c:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      70:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      74:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      78:	0c 94 66 00 	jmp	0xcc	; 0xcc <__bad_interrupt>
      7c:	f5 02       	muls	r31, r21
      7e:	eb 03       	fmulsu	r22, r19
      80:	d5 04       	cpc	r13, r5
      82:	a3 05       	cpc	r26, r3
      84:	26 06       	cpc	r2, r22
      86:	b6 06       	cpc	r11, r22
      88:	50 07       	cpc	r21, r16
      8a:	76 08       	sbc	r7, r6
      8c:	a9 09       	sbc	r26, r9
      8e:	e6 0a       	sbc	r14, r22
      90:	9c 0b       	sbc	r25, r28

00000092 <__ctors_end>:
      92:	11 24       	eor	r1, r1
      94:	1f be       	out	0x3f, r1	; 63
      96:	cf ef       	ldi	r28, 0xFF	; 255
      98:	d8 e0       	ldi	r29, 0x08	; 8
      9a:	de bf       	out	0x3e, r29	; 62
      9c:	cd bf       	out	0x3d, r28	; 61

0000009e <__do_copy_data>:
      9e:	11 e0       	ldi	r17, 0x01	; 1
      a0:	a0 e0       	ldi	r26, 0x00	; 0
      a2:	b1 e0       	ldi	r27, 0x01	; 1
      a4:	ea ef       	ldi	r30, 0xFA	; 250
      a6:	ff e3       	ldi	r31, 0x3F	; 63
      a8:	02 c0       	rjmp	.+4      	; 0xae <__do_copy_data+0x10>
      aa:	05 90       	lpm	r0, Z+
      ac:	0d 92       	st	X+, r0
      ae:	a0 3b       	cpi	r26, 0xB0	; 176
      b0:	b1 07       	cpc	r27, r17
      b2:	d9 f7       	brne	.-10     	; 0xaa <__do_copy_data+0xc>

000000b4 <__do_clear_bss>:
      b4:	21 e0       	ldi	r18, 0x01	; 1
      b6:	a0 eb       	ldi	r26, 0xB0	; 176
      b8:	b1 e0       	ldi	r27, 0x01	; 1
      ba:	01 c0       	rjmp	.+2      	; 0xbe <.do_clear_bss_start>

000000bc <.do_clear_bss_loop>:
      bc:	1d 92       	st	X+, r1

000000be <.do_clear_bss_start>:
      be:	a7 3f       	cpi	r26, 0xF7	; 247
      c0:	b2 07       	cpc	r27, r18
      c2:	e1 f7       	brne	.-8      	; 0xbc <.do_clear_bss_loop>
      c4:	0e 94 6d 12 	call	0x24da	; 0x24da <main>
      c8:	0c 94 fb 1f 	jmp	0x3ff6	; 0x3ff6 <_exit>

000000cc <__bad_interrupt>:
      cc:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000d0 <update_reference>:
	v_reference = adc_readAvg (3, 3);
	
	v_reference_offset = 251 - (int16_t) v_reference;
	
	return v_reference;
}
      d0:	cf 93       	push	r28
      d2:	df 93       	push	r29
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	63 e0       	ldi	r22, 0x03	; 3
      da:	83 e0       	ldi	r24, 0x03	; 3
      dc:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
      e0:	9c 01       	movw	r18, r24
      e2:	8b ef       	ldi	r24, 0xFB	; 251
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	82 1b       	sub	r24, r18
      e8:	93 0b       	sbc	r25, r19
      ea:	90 93 b1 01 	sts	0x01B1, r25	; 0x8001b1 <__data_end+0x1>
      ee:	80 93 b0 01 	sts	0x01B0, r24	; 0x8001b0 <__data_end>
      f2:	00 00       	nop
      f4:	df 91       	pop	r29
      f6:	cf 91       	pop	r28
      f8:	08 95       	ret

000000fa <adc_init>:
      fa:	cf 93       	push	r28
      fc:	df 93       	push	r29
      fe:	cd b7       	in	r28, 0x3d	; 61
     100:	de b7       	in	r29, 0x3e	; 62
     102:	8b e7       	ldi	r24, 0x7B	; 123
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	2b e7       	ldi	r18, 0x7B	; 123
     108:	30 e0       	ldi	r19, 0x00	; 0
     10a:	f9 01       	movw	r30, r18
     10c:	20 81       	ld	r18, Z
     10e:	20 62       	ori	r18, 0x20	; 32
     110:	fc 01       	movw	r30, r24
     112:	20 83       	st	Z, r18
     114:	8c e7       	ldi	r24, 0x7C	; 124
     116:	90 e0       	ldi	r25, 0x00	; 0
     118:	20 e4       	ldi	r18, 0x40	; 64
     11a:	fc 01       	movw	r30, r24
     11c:	20 83       	st	Z, r18
     11e:	8a e7       	ldi	r24, 0x7A	; 122
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	2a e7       	ldi	r18, 0x7A	; 122
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	f9 01       	movw	r30, r18
     128:	20 81       	ld	r18, Z
     12a:	23 68       	ori	r18, 0x83	; 131
     12c:	fc 01       	movw	r30, r24
     12e:	20 83       	st	Z, r18
     130:	8a e7       	ldi	r24, 0x7A	; 122
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2a e7       	ldi	r18, 0x7A	; 122
     136:	30 e0       	ldi	r19, 0x00	; 0
     138:	f9 01       	movw	r30, r18
     13a:	20 81       	ld	r18, Z
     13c:	20 64       	ori	r18, 0x40	; 64
     13e:	fc 01       	movw	r30, r24
     140:	20 83       	st	Z, r18
     142:	00 00       	nop
     144:	8a e7       	ldi	r24, 0x7A	; 122
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	fc 01       	movw	r30, r24
     14a:	80 81       	ld	r24, Z
     14c:	88 2f       	mov	r24, r24
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	80 74       	andi	r24, 0x40	; 64
     152:	99 27       	eor	r25, r25
     154:	89 2b       	or	r24, r25
     156:	b1 f7       	brne	.-20     	; 0x144 <adc_init+0x4a>
     158:	88 e7       	ldi	r24, 0x78	; 120
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	fc 01       	movw	r30, r24
     15e:	80 81       	ld	r24, Z
     160:	91 81       	ldd	r25, Z+1	; 0x01
     162:	00 00       	nop
     164:	df 91       	pop	r29
     166:	cf 91       	pop	r28
     168:	08 95       	ret

0000016a <adc_read>:
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
     16e:	1f 92       	push	r1
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	8c e7       	ldi	r24, 0x7C	; 124
     178:	90 e0       	ldi	r25, 0x00	; 0
     17a:	2c e7       	ldi	r18, 0x7C	; 124
     17c:	30 e0       	ldi	r19, 0x00	; 0
     17e:	f9 01       	movw	r30, r18
     180:	20 81       	ld	r18, Z
     182:	32 2f       	mov	r19, r18
     184:	30 7f       	andi	r19, 0xF0	; 240
     186:	29 81       	ldd	r18, Y+1	; 0x01
     188:	2f 70       	andi	r18, 0x0F	; 15
     18a:	23 2b       	or	r18, r19
     18c:	fc 01       	movw	r30, r24
     18e:	20 83       	st	Z, r18
     190:	8a e7       	ldi	r24, 0x7A	; 122
     192:	90 e0       	ldi	r25, 0x00	; 0
     194:	2a e7       	ldi	r18, 0x7A	; 122
     196:	30 e0       	ldi	r19, 0x00	; 0
     198:	f9 01       	movw	r30, r18
     19a:	20 81       	ld	r18, Z
     19c:	20 64       	ori	r18, 0x40	; 64
     19e:	fc 01       	movw	r30, r24
     1a0:	20 83       	st	Z, r18
     1a2:	00 00       	nop
     1a4:	8a e7       	ldi	r24, 0x7A	; 122
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	fc 01       	movw	r30, r24
     1aa:	80 81       	ld	r24, Z
     1ac:	88 2f       	mov	r24, r24
     1ae:	90 e0       	ldi	r25, 0x00	; 0
     1b0:	80 74       	andi	r24, 0x40	; 64
     1b2:	99 27       	eor	r25, r25
     1b4:	89 2b       	or	r24, r25
     1b6:	b1 f7       	brne	.-20     	; 0x1a4 <adc_read+0x3a>
     1b8:	88 e7       	ldi	r24, 0x78	; 120
     1ba:	90 e0       	ldi	r25, 0x00	; 0
     1bc:	fc 01       	movw	r30, r24
     1be:	80 81       	ld	r24, Z
     1c0:	91 81       	ldd	r25, Z+1	; 0x01
     1c2:	0f 90       	pop	r0
     1c4:	df 91       	pop	r29
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <adc_readAvg>:
     1ca:	cf 93       	push	r28
     1cc:	df 93       	push	r29
     1ce:	cd b7       	in	r28, 0x3d	; 61
     1d0:	de b7       	in	r29, 0x3e	; 62
     1d2:	27 97       	sbiw	r28, 0x07	; 7
     1d4:	0f b6       	in	r0, 0x3f	; 63
     1d6:	f8 94       	cli
     1d8:	de bf       	out	0x3e, r29	; 62
     1da:	0f be       	out	0x3f, r0	; 63
     1dc:	cd bf       	out	0x3d, r28	; 61
     1de:	8e 83       	std	Y+6, r24	; 0x06
     1e0:	6f 83       	std	Y+7, r22	; 0x07
     1e2:	19 82       	std	Y+1, r1	; 0x01
     1e4:	1a 82       	std	Y+2, r1	; 0x02
     1e6:	1b 82       	std	Y+3, r1	; 0x03
     1e8:	1c 82       	std	Y+4, r1	; 0x04
     1ea:	1d 82       	std	Y+5, r1	; 0x05
     1ec:	15 c0       	rjmp	.+42     	; 0x218 <adc_readAvg+0x4e>
     1ee:	8e 81       	ldd	r24, Y+6	; 0x06
     1f0:	0e 94 b5 00 	call	0x16a	; 0x16a <adc_read>
     1f4:	cc 01       	movw	r24, r24
     1f6:	a0 e0       	ldi	r26, 0x00	; 0
     1f8:	b0 e0       	ldi	r27, 0x00	; 0
     1fa:	29 81       	ldd	r18, Y+1	; 0x01
     1fc:	3a 81       	ldd	r19, Y+2	; 0x02
     1fe:	4b 81       	ldd	r20, Y+3	; 0x03
     200:	5c 81       	ldd	r21, Y+4	; 0x04
     202:	82 0f       	add	r24, r18
     204:	93 1f       	adc	r25, r19
     206:	a4 1f       	adc	r26, r20
     208:	b5 1f       	adc	r27, r21
     20a:	89 83       	std	Y+1, r24	; 0x01
     20c:	9a 83       	std	Y+2, r25	; 0x02
     20e:	ab 83       	std	Y+3, r26	; 0x03
     210:	bc 83       	std	Y+4, r27	; 0x04
     212:	8d 81       	ldd	r24, Y+5	; 0x05
     214:	8f 5f       	subi	r24, 0xFF	; 255
     216:	8d 83       	std	Y+5, r24	; 0x05
     218:	9d 81       	ldd	r25, Y+5	; 0x05
     21a:	8f 81       	ldd	r24, Y+7	; 0x07
     21c:	98 17       	cp	r25, r24
     21e:	38 f3       	brcs	.-50     	; 0x1ee <adc_readAvg+0x24>
     220:	8f 81       	ldd	r24, Y+7	; 0x07
     222:	28 2f       	mov	r18, r24
     224:	30 e0       	ldi	r19, 0x00	; 0
     226:	40 e0       	ldi	r20, 0x00	; 0
     228:	50 e0       	ldi	r21, 0x00	; 0
     22a:	89 81       	ldd	r24, Y+1	; 0x01
     22c:	9a 81       	ldd	r25, Y+2	; 0x02
     22e:	ab 81       	ldd	r26, Y+3	; 0x03
     230:	bc 81       	ldd	r27, Y+4	; 0x04
     232:	bc 01       	movw	r22, r24
     234:	cd 01       	movw	r24, r26
     236:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodsi4>
     23a:	da 01       	movw	r26, r20
     23c:	c9 01       	movw	r24, r18
     23e:	27 96       	adiw	r28, 0x07	; 7
     240:	0f b6       	in	r0, 0x3f	; 63
     242:	f8 94       	cli
     244:	de bf       	out	0x3e, r29	; 62
     246:	0f be       	out	0x3f, r0	; 63
     248:	cd bf       	out	0x3d, r28	; 61
     24a:	df 91       	pop	r29
     24c:	cf 91       	pop	r28
     24e:	08 95       	ret

00000250 <adc_read_UA>:
     250:	cf 93       	push	r28
     252:	df 93       	push	r29
     254:	cd b7       	in	r28, 0x3d	; 61
     256:	de b7       	in	r29, 0x3e	; 62
     258:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
     25c:	65 e0       	ldi	r22, 0x05	; 5
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     264:	9c 01       	movw	r18, r24
     266:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     26a:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     26e:	82 0f       	add	r24, r18
     270:	93 1f       	adc	r25, r19
     272:	df 91       	pop	r29
     274:	cf 91       	pop	r28
     276:	08 95       	ret

00000278 <adc_read_UR>:
     278:	cf 93       	push	r28
     27a:	df 93       	push	r29
     27c:	00 d0       	rcall	.+0      	; 0x27e <adc_read_UR+0x6>
     27e:	00 d0       	rcall	.+0      	; 0x280 <adc_read_UR+0x8>
     280:	cd b7       	in	r28, 0x3d	; 61
     282:	de b7       	in	r29, 0x3e	; 62
     284:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
     288:	65 e0       	ldi	r22, 0x05	; 5
     28a:	89 e0       	ldi	r24, 0x09	; 9
     28c:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     290:	9a 83       	std	Y+2, r25	; 0x02
     292:	89 83       	std	Y+1, r24	; 0x01
     294:	89 81       	ldd	r24, Y+1	; 0x01
     296:	9a 81       	ldd	r25, Y+2	; 0x02
     298:	9c 83       	std	Y+4, r25	; 0x04
     29a:	8b 83       	std	Y+3, r24	; 0x03
     29c:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     2a0:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     2a4:	2b 81       	ldd	r18, Y+3	; 0x03
     2a6:	3c 81       	ldd	r19, Y+4	; 0x04
     2a8:	82 0f       	add	r24, r18
     2aa:	93 1f       	adc	r25, r19
     2ac:	9c 83       	std	Y+4, r25	; 0x04
     2ae:	8b 83       	std	Y+3, r24	; 0x03
     2b0:	8b 81       	ldd	r24, Y+3	; 0x03
     2b2:	9c 81       	ldd	r25, Y+4	; 0x04
     2b4:	0f 90       	pop	r0
     2b6:	0f 90       	pop	r0
     2b8:	0f 90       	pop	r0
     2ba:	0f 90       	pop	r0
     2bc:	df 91       	pop	r29
     2be:	cf 91       	pop	r28
     2c0:	08 95       	ret

000002c2 <adc_read_battery>:



uint16_t adc_read_battery (void)
{
     2c2:	cf 93       	push	r28
     2c4:	df 93       	push	r29
     2c6:	cd b7       	in	r28, 0x3d	; 61
     2c8:	de b7       	in	r29, 0x3e	; 62
	update_reference();
     2ca:	0e 94 68 00 	call	0xd0	; 0xd0 <update_reference>
	return (uint16_t)((int16_t)adc_readAvg (5, 5) + v_reference_offset);
     2ce:	65 e0       	ldi	r22, 0x05	; 5
     2d0:	85 e0       	ldi	r24, 0x05	; 5
     2d2:	0e 94 e5 00 	call	0x1ca	; 0x1ca <adc_readAvg>
     2d6:	9c 01       	movw	r18, r24
     2d8:	80 91 b0 01 	lds	r24, 0x01B0	; 0x8001b0 <__data_end>
     2dc:	90 91 b1 01 	lds	r25, 0x01B1	; 0x8001b1 <__data_end+0x1>
     2e0:	82 0f       	add	r24, r18
     2e2:	93 1f       	adc	r25, r19
     2e4:	df 91       	pop	r29
     2e6:	cf 91       	pop	r28
     2e8:	08 95       	ret

000002ea <can_clear_all_mob>:
            }
        } // while (evaluate ...
    } // while (bt_not_found ...

    return (bt_performed);
}
     2ea:	cf 93       	push	r28
     2ec:	df 93       	push	r29
     2ee:	00 d0       	rcall	.+0      	; 0x2f0 <can_clear_all_mob+0x6>
     2f0:	1f 92       	push	r1
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	19 82       	std	Y+1, r1	; 0x01
     2f8:	1d c0       	rjmp	.+58     	; 0x334 <can_clear_all_mob+0x4a>
     2fa:	8d ee       	ldi	r24, 0xED	; 237
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	29 81       	ldd	r18, Y+1	; 0x01
     300:	22 95       	swap	r18
     302:	20 7f       	andi	r18, 0xF0	; 240
     304:	fc 01       	movw	r30, r24
     306:	20 83       	st	Z, r18
     308:	8e ee       	ldi	r24, 0xEE	; 238
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	9b 83       	std	Y+3, r25	; 0x03
     30e:	8a 83       	std	Y+2, r24	; 0x02
     310:	09 c0       	rjmp	.+18     	; 0x324 <can_clear_all_mob+0x3a>
     312:	8a 81       	ldd	r24, Y+2	; 0x02
     314:	9b 81       	ldd	r25, Y+3	; 0x03
     316:	fc 01       	movw	r30, r24
     318:	10 82       	st	Z, r1
     31a:	8a 81       	ldd	r24, Y+2	; 0x02
     31c:	9b 81       	ldd	r25, Y+3	; 0x03
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	9b 83       	std	Y+3, r25	; 0x03
     322:	8a 83       	std	Y+2, r24	; 0x02
     324:	8a 81       	ldd	r24, Y+2	; 0x02
     326:	9b 81       	ldd	r25, Y+3	; 0x03
     328:	88 3f       	cpi	r24, 0xF8	; 248
     32a:	91 05       	cpc	r25, r1
     32c:	90 f3       	brcs	.-28     	; 0x312 <can_clear_all_mob+0x28>
     32e:	89 81       	ldd	r24, Y+1	; 0x01
     330:	8f 5f       	subi	r24, 0xFF	; 255
     332:	89 83       	std	Y+1, r24	; 0x01
     334:	89 81       	ldd	r24, Y+1	; 0x01
     336:	86 30       	cpi	r24, 0x06	; 6
     338:	00 f3       	brcs	.-64     	; 0x2fa <can_clear_all_mob+0x10>
     33a:	00 00       	nop
     33c:	0f 90       	pop	r0
     33e:	0f 90       	pop	r0
     340:	0f 90       	pop	r0
     342:	df 91       	pop	r29
     344:	cf 91       	pop	r28
     346:	08 95       	ret

00000348 <can_get_mob_free>:
     348:	cf 93       	push	r28
     34a:	df 93       	push	r29
     34c:	00 d0       	rcall	.+0      	; 0x34e <can_get_mob_free+0x6>
     34e:	cd b7       	in	r28, 0x3d	; 61
     350:	de b7       	in	r29, 0x3e	; 62
     352:	8d ee       	ldi	r24, 0xED	; 237
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	fc 01       	movw	r30, r24
     358:	80 81       	ld	r24, Z
     35a:	8a 83       	std	Y+2, r24	; 0x02
     35c:	19 82       	std	Y+1, r1	; 0x01
     35e:	1b c0       	rjmp	.+54     	; 0x396 <can_get_mob_free+0x4e>
     360:	8d ee       	ldi	r24, 0xED	; 237
     362:	90 e0       	ldi	r25, 0x00	; 0
     364:	29 81       	ldd	r18, Y+1	; 0x01
     366:	22 95       	swap	r18
     368:	20 7f       	andi	r18, 0xF0	; 240
     36a:	fc 01       	movw	r30, r24
     36c:	20 83       	st	Z, r18
     36e:	8f ee       	ldi	r24, 0xEF	; 239
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	fc 01       	movw	r30, r24
     374:	80 81       	ld	r24, Z
     376:	88 2f       	mov	r24, r24
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	80 7c       	andi	r24, 0xC0	; 192
     37c:	99 27       	eor	r25, r25
     37e:	89 2b       	or	r24, r25
     380:	39 f4       	brne	.+14     	; 0x390 <can_get_mob_free+0x48>
     382:	8d ee       	ldi	r24, 0xED	; 237
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	2a 81       	ldd	r18, Y+2	; 0x02
     388:	fc 01       	movw	r30, r24
     38a:	20 83       	st	Z, r18
     38c:	89 81       	ldd	r24, Y+1	; 0x01
     38e:	0c c0       	rjmp	.+24     	; 0x3a8 <can_get_mob_free+0x60>
     390:	89 81       	ldd	r24, Y+1	; 0x01
     392:	8f 5f       	subi	r24, 0xFF	; 255
     394:	89 83       	std	Y+1, r24	; 0x01
     396:	89 81       	ldd	r24, Y+1	; 0x01
     398:	86 30       	cpi	r24, 0x06	; 6
     39a:	10 f3       	brcs	.-60     	; 0x360 <can_get_mob_free+0x18>
     39c:	8d ee       	ldi	r24, 0xED	; 237
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	2a 81       	ldd	r18, Y+2	; 0x02
     3a2:	fc 01       	movw	r30, r24
     3a4:	20 83       	st	Z, r18
     3a6:	8f ef       	ldi	r24, 0xFF	; 255
     3a8:	0f 90       	pop	r0
     3aa:	0f 90       	pop	r0
     3ac:	df 91       	pop	r29
     3ae:	cf 91       	pop	r28
     3b0:	08 95       	ret

000003b2 <can_get_mob_status>:
     3b2:	cf 93       	push	r28
     3b4:	df 93       	push	r29
     3b6:	00 d0       	rcall	.+0      	; 0x3b8 <can_get_mob_status+0x6>
     3b8:	cd b7       	in	r28, 0x3d	; 61
     3ba:	de b7       	in	r29, 0x3e	; 62
     3bc:	8f ee       	ldi	r24, 0xEF	; 239
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	fc 01       	movw	r30, r24
     3c2:	80 81       	ld	r24, Z
     3c4:	88 2f       	mov	r24, r24
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	80 7c       	andi	r24, 0xC0	; 192
     3ca:	99 27       	eor	r25, r25
     3cc:	89 2b       	or	r24, r25
     3ce:	11 f4       	brne	.+4      	; 0x3d4 <can_get_mob_status+0x22>
     3d0:	8f ef       	ldi	r24, 0xFF	; 255
     3d2:	1c c0       	rjmp	.+56     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3d4:	8e ee       	ldi	r24, 0xEE	; 238
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	fc 01       	movw	r30, r24
     3da:	80 81       	ld	r24, Z
     3dc:	89 83       	std	Y+1, r24	; 0x01
     3de:	89 81       	ldd	r24, Y+1	; 0x01
     3e0:	80 7e       	andi	r24, 0xE0	; 224
     3e2:	8a 83       	std	Y+2, r24	; 0x02
     3e4:	8a 81       	ldd	r24, Y+2	; 0x02
     3e6:	80 32       	cpi	r24, 0x20	; 32
     3e8:	31 f0       	breq	.+12     	; 0x3f6 <can_get_mob_status+0x44>
     3ea:	8a 81       	ldd	r24, Y+2	; 0x02
     3ec:	80 34       	cpi	r24, 0x40	; 64
     3ee:	19 f0       	breq	.+6      	; 0x3f6 <can_get_mob_status+0x44>
     3f0:	8a 81       	ldd	r24, Y+2	; 0x02
     3f2:	80 3a       	cpi	r24, 0xA0	; 160
     3f4:	11 f4       	brne	.+4      	; 0x3fa <can_get_mob_status+0x48>
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	09 c0       	rjmp	.+18     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     3fa:	89 81       	ldd	r24, Y+1	; 0x01
     3fc:	8f 71       	andi	r24, 0x1F	; 31
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	8a 81       	ldd	r24, Y+2	; 0x02
     402:	88 23       	and	r24, r24
     404:	11 f0       	breq	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
     406:	8a 81       	ldd	r24, Y+2	; 0x02
     408:	01 c0       	rjmp	.+2      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	0f 90       	pop	r0
     40e:	0f 90       	pop	r0
     410:	df 91       	pop	r29
     412:	cf 91       	pop	r28
     414:	08 95       	ret

00000416 <can_get_data>:
     416:	cf 93       	push	r28
     418:	df 93       	push	r29
     41a:	00 d0       	rcall	.+0      	; 0x41c <can_get_data+0x6>
     41c:	1f 92       	push	r1
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	9b 83       	std	Y+3, r25	; 0x03
     424:	8a 83       	std	Y+2, r24	; 0x02
     426:	19 82       	std	Y+1, r1	; 0x01
     428:	10 c0       	rjmp	.+32     	; 0x44a <can_get_data+0x34>
     42a:	89 81       	ldd	r24, Y+1	; 0x01
     42c:	88 2f       	mov	r24, r24
     42e:	90 e0       	ldi	r25, 0x00	; 0
     430:	2a 81       	ldd	r18, Y+2	; 0x02
     432:	3b 81       	ldd	r19, Y+3	; 0x03
     434:	82 0f       	add	r24, r18
     436:	93 1f       	adc	r25, r19
     438:	2a ef       	ldi	r18, 0xFA	; 250
     43a:	30 e0       	ldi	r19, 0x00	; 0
     43c:	f9 01       	movw	r30, r18
     43e:	20 81       	ld	r18, Z
     440:	fc 01       	movw	r30, r24
     442:	20 83       	st	Z, r18
     444:	89 81       	ldd	r24, Y+1	; 0x01
     446:	8f 5f       	subi	r24, 0xFF	; 255
     448:	89 83       	std	Y+1, r24	; 0x01
     44a:	89 81       	ldd	r24, Y+1	; 0x01
     44c:	28 2f       	mov	r18, r24
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	8f ee       	ldi	r24, 0xEF	; 239
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	fc 01       	movw	r30, r24
     456:	80 81       	ld	r24, Z
     458:	88 2f       	mov	r24, r24
     45a:	90 e0       	ldi	r25, 0x00	; 0
     45c:	8f 70       	andi	r24, 0x0F	; 15
     45e:	99 27       	eor	r25, r25
     460:	28 17       	cp	r18, r24
     462:	39 07       	cpc	r19, r25
     464:	14 f3       	brlt	.-60     	; 0x42a <can_get_data+0x14>
     466:	00 00       	nop
     468:	0f 90       	pop	r0
     46a:	0f 90       	pop	r0
     46c:	0f 90       	pop	r0
     46e:	df 91       	pop	r29
     470:	cf 91       	pop	r28
     472:	08 95       	ret

00000474 <can_fixed_baudrate>:
//!
//! @return Baudrate Status
//!         fixed = 1: baudrate performed
//------------------------------------------------------------------------------
uint8_t can_fixed_baudrate(uint8_t mode)
{
     474:	cf 93       	push	r28
     476:	df 93       	push	r29
     478:	1f 92       	push	r1
     47a:	cd b7       	in	r28, 0x3d	; 61
     47c:	de b7       	in	r29, 0x3e	; 62
     47e:	89 83       	std	Y+1, r24	; 0x01
    Can_reset();
     480:	88 ed       	ldi	r24, 0xD8	; 216
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	21 e0       	ldi	r18, 0x01	; 1
     486:	fc 01       	movw	r30, r24
     488:	20 83       	st	Z, r18
    Can_conf_bt();
     48a:	82 ee       	ldi	r24, 0xE2	; 226
     48c:	90 e0       	ldi	r25, 0x00	; 0
     48e:	26 e0       	ldi	r18, 0x06	; 6
     490:	fc 01       	movw	r30, r24
     492:	20 83       	st	Z, r18
     494:	83 ee       	ldi	r24, 0xE3	; 227
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	24 e0       	ldi	r18, 0x04	; 4
     49a:	fc 01       	movw	r30, r24
     49c:	20 83       	st	Z, r18
     49e:	84 ee       	ldi	r24, 0xE4	; 228
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	23 e1       	ldi	r18, 0x13	; 19
     4a4:	fc 01       	movw	r30, r24
     4a6:	20 83       	st	Z, r18
    return 1;
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	0f 90       	pop	r0
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <can_init>:
//!         ==0: research of bit timing configuration failed
//!         ==1: baudrate performed 
//!
//------------------------------------------------------------------------------
uint8_t can_init(uint8_t mode)
{
     4b2:	cf 93       	push	r28
     4b4:	df 93       	push	r29
     4b6:	1f 92       	push	r1
     4b8:	cd b7       	in	r28, 0x3d	; 61
     4ba:	de b7       	in	r29, 0x3e	; 62
     4bc:	89 83       	std	Y+1, r24	; 0x01
    if ((Can_bit_timing(mode))==0) return (0);  // c.f. macro in "can_drv.h"
     4be:	89 81       	ldd	r24, Y+1	; 0x01
     4c0:	0e 94 3a 02 	call	0x474	; 0x474 <can_fixed_baudrate>
     4c4:	88 23       	and	r24, r24
     4c6:	11 f4       	brne	.+4      	; 0x4cc <can_init+0x1a>
     4c8:	80 e0       	ldi	r24, 0x00	; 0
     4ca:	0c c0       	rjmp	.+24     	; 0x4e4 <can_init+0x32>
    can_clear_all_mob();                        // c.f. function in "can_drv.c"
     4cc:	0e 94 75 01 	call	0x2ea	; 0x2ea <can_clear_all_mob>
    Can_enable();                               // c.f. macro in "can_drv.h" 
     4d0:	88 ed       	ldi	r24, 0xD8	; 216
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	28 ed       	ldi	r18, 0xD8	; 216
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	22 60       	ori	r18, 0x02	; 2
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
    return (1);
     4e2:	81 e0       	ldi	r24, 0x01	; 1
}
     4e4:	0f 90       	pop	r0
     4e6:	df 91       	pop	r29
     4e8:	cf 91       	pop	r28
     4ea:	08 95       	ret

000004ec <can_cmd>:
//! @return CAN_CMD_ACCEPTED - command is accepted
//!         CAN_CMD_REFUSED  - command is refused
//!
//------------------------------------------------------------------------------
uint8_t can_cmd(st_cmd_t* cmd)
{
     4ec:	cf 93       	push	r28
     4ee:	df 93       	push	r29
     4f0:	cd b7       	in	r28, 0x3d	; 61
     4f2:	de b7       	in	r29, 0x3e	; 62
     4f4:	2a 97       	sbiw	r28, 0x0a	; 10
     4f6:	0f b6       	in	r0, 0x3f	; 63
     4f8:	f8 94       	cli
     4fa:	de bf       	out	0x3e, r29	; 62
     4fc:	0f be       	out	0x3f, r0	; 63
     4fe:	cd bf       	out	0x3d, r28	; 61
     500:	9a 87       	std	Y+10, r25	; 0x0a
     502:	89 87       	std	Y+9, r24	; 0x09
  uint8_t mob_handle, cpt;
  uint32_t u32_temp;
  
  if (cmd->cmd == CMD_ABORT)
     504:	89 85       	ldd	r24, Y+9	; 0x09
     506:	9a 85       	ldd	r25, Y+10	; 0x0a
     508:	fc 01       	movw	r30, r24
     50a:	81 81       	ldd	r24, Z+1	; 0x01
     50c:	8c 30       	cpi	r24, 0x0C	; 12
     50e:	39 f5       	brne	.+78     	; 0x55e <can_cmd+0x72>
  {
    if (cmd->status == MOB_PENDING)
     510:	89 85       	ldd	r24, Y+9	; 0x09
     512:	9a 85       	ldd	r25, Y+10	; 0x0a
     514:	fc 01       	movw	r30, r24
     516:	81 85       	ldd	r24, Z+9	; 0x09
     518:	80 36       	cpi	r24, 0x60	; 96
     51a:	d9 f4       	brne	.+54     	; 0x552 <can_cmd+0x66>
    {
      // Rx or Tx not yet performed
      Can_set_mob(cmd->handle);
     51c:	8d ee       	ldi	r24, 0xED	; 237
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	29 85       	ldd	r18, Y+9	; 0x09
     522:	3a 85       	ldd	r19, Y+10	; 0x0a
     524:	f9 01       	movw	r30, r18
     526:	20 81       	ld	r18, Z
     528:	22 95       	swap	r18
     52a:	20 7f       	andi	r18, 0xF0	; 240
     52c:	fc 01       	movw	r30, r24
     52e:	20 83       	st	Z, r18
      Can_mob_abort();
     530:	8f ee       	ldi	r24, 0xEF	; 239
     532:	90 e0       	ldi	r25, 0x00	; 0
     534:	2f ee       	ldi	r18, 0xEF	; 239
     536:	30 e0       	ldi	r19, 0x00	; 0
     538:	f9 01       	movw	r30, r18
     53a:	20 81       	ld	r18, Z
     53c:	2f 73       	andi	r18, 0x3F	; 63
     53e:	fc 01       	movw	r30, r24
     540:	20 83       	st	Z, r18
      Can_clear_status_mob();       // To be sure !
     542:	8e ee       	ldi	r24, 0xEE	; 238
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	fc 01       	movw	r30, r24
     548:	10 82       	st	Z, r1
      cmd->handle = 0;
     54a:	89 85       	ldd	r24, Y+9	; 0x09
     54c:	9a 85       	ldd	r25, Y+10	; 0x0a
     54e:	fc 01       	movw	r30, r24
     550:	10 82       	st	Z, r1
    }
    cmd->status = STATUS_CLEARED; 
     552:	89 85       	ldd	r24, Y+9	; 0x09
     554:	9a 85       	ldd	r25, Y+10	; 0x0a
     556:	fc 01       	movw	r30, r24
     558:	11 86       	std	Z+9, r1	; 0x09
     55a:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__stack+0x1105>
  }
  else
  {
    mob_handle = can_get_mob_free();
     55e:	0e 94 a4 01 	call	0x348	; 0x348 <can_get_mob_free>
     562:	8c 83       	std	Y+4, r24	; 0x04
    if (mob_handle!= NO_MOB)
     564:	8c 81       	ldd	r24, Y+4	; 0x04
     566:	8f 3f       	cpi	r24, 0xFF	; 255
     568:	11 f4       	brne	.+4      	; 0x56e <can_cmd+0x82>
     56a:	0c 94 fb 0c 	jmp	0x19f6	; 0x19f6 <__stack+0x10f7>
    {
      cmd->status = MOB_PENDING; 
     56e:	89 85       	ldd	r24, Y+9	; 0x09
     570:	9a 85       	ldd	r25, Y+10	; 0x0a
     572:	20 e6       	ldi	r18, 0x60	; 96
     574:	fc 01       	movw	r30, r24
     576:	21 87       	std	Z+9, r18	; 0x09
      cmd->handle = mob_handle;
     578:	89 85       	ldd	r24, Y+9	; 0x09
     57a:	9a 85       	ldd	r25, Y+10	; 0x0a
     57c:	2c 81       	ldd	r18, Y+4	; 0x04
     57e:	fc 01       	movw	r30, r24
     580:	20 83       	st	Z, r18
      Can_set_mob(mob_handle);
     582:	8d ee       	ldi	r24, 0xED	; 237
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	2c 81       	ldd	r18, Y+4	; 0x04
     588:	22 95       	swap	r18
     58a:	20 7f       	andi	r18, 0xF0	; 240
     58c:	fc 01       	movw	r30, r24
     58e:	20 83       	st	Z, r18
      Can_clear_mob();
     590:	8e ee       	ldi	r24, 0xEE	; 238
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	9b 83       	std	Y+3, r25	; 0x03
     596:	8a 83       	std	Y+2, r24	; 0x02
     598:	09 c0       	rjmp	.+18     	; 0x5ac <can_cmd+0xc0>
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	9b 81       	ldd	r25, Y+3	; 0x03
     59e:	fc 01       	movw	r30, r24
     5a0:	10 82       	st	Z, r1
     5a2:	8a 81       	ldd	r24, Y+2	; 0x02
     5a4:	9b 81       	ldd	r25, Y+3	; 0x03
     5a6:	01 96       	adiw	r24, 0x01	; 1
     5a8:	9b 83       	std	Y+3, r25	; 0x03
     5aa:	8a 83       	std	Y+2, r24	; 0x02
     5ac:	8a 81       	ldd	r24, Y+2	; 0x02
     5ae:	9b 81       	ldd	r25, Y+3	; 0x03
     5b0:	88 3f       	cpi	r24, 0xF8	; 248
     5b2:	91 05       	cpc	r25, r1
     5b4:	90 f3       	brcs	.-28     	; 0x59a <can_cmd+0xae>
          
      switch (cmd->cmd)
     5b6:	89 85       	ldd	r24, Y+9	; 0x09
     5b8:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ba:	fc 01       	movw	r30, r24
     5bc:	81 81       	ldd	r24, Z+1	; 0x01
     5be:	88 2f       	mov	r24, r24
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	09 2e       	mov	r0, r25
     5c4:	00 0c       	add	r0, r0
     5c6:	aa 0b       	sbc	r26, r26
     5c8:	bb 0b       	sbc	r27, r27
     5ca:	41 e0       	ldi	r20, 0x01	; 1
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	2a e0       	ldi	r18, 0x0A	; 10
     5d0:	30 e0       	ldi	r19, 0x00	; 0
     5d2:	84 1b       	sub	r24, r20
     5d4:	95 0b       	sbc	r25, r21
     5d6:	28 17       	cp	r18, r24
     5d8:	39 07       	cpc	r19, r25
     5da:	10 f4       	brcc	.+4      	; 0x5e0 <can_cmd+0xf4>
     5dc:	0c 94 f5 0c 	jmp	0x19ea	; 0x19ea <__stack+0x10eb>
     5e0:	82 5c       	subi	r24, 0xC2	; 194
     5e2:	9f 4f       	sbci	r25, 0xFF	; 255
     5e4:	fc 01       	movw	r30, r24
     5e6:	0c 94 db 1f 	jmp	0x3fb6	; 0x3fb6 <__tablejump2__>
      {
        //------------      
        case CMD_TX:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     5ea:	89 85       	ldd	r24, Y+9	; 0x09
     5ec:	9a 85       	ldd	r25, Y+10	; 0x0a
     5ee:	fc 01       	movw	r30, r24
     5f0:	83 85       	ldd	r24, Z+11	; 0x0b
     5f2:	88 23       	and	r24, r24
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <can_cmd+0x10c>
     5f6:	69 c0       	rjmp	.+210    	; 0x6ca <can_cmd+0x1de>
     5f8:	83 ef       	ldi	r24, 0xF3	; 243
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	29 85       	ldd	r18, Y+9	; 0x09
     5fe:	3a 85       	ldd	r19, Y+10	; 0x0a
     600:	2e 5f       	subi	r18, 0xFE	; 254
     602:	3f 4f       	sbci	r19, 0xFF	; 255
     604:	2d 5f       	subi	r18, 0xFD	; 253
     606:	3f 4f       	sbci	r19, 0xFF	; 255
     608:	f9 01       	movw	r30, r18
     60a:	20 81       	ld	r18, Z
     60c:	42 2f       	mov	r20, r18
     60e:	44 0f       	add	r20, r20
     610:	44 0f       	add	r20, r20
     612:	44 0f       	add	r20, r20
     614:	29 85       	ldd	r18, Y+9	; 0x09
     616:	3a 85       	ldd	r19, Y+10	; 0x0a
     618:	2e 5f       	subi	r18, 0xFE	; 254
     61a:	3f 4f       	sbci	r19, 0xFF	; 255
     61c:	2e 5f       	subi	r18, 0xFE	; 254
     61e:	3f 4f       	sbci	r19, 0xFF	; 255
     620:	f9 01       	movw	r30, r18
     622:	20 81       	ld	r18, Z
     624:	22 95       	swap	r18
     626:	26 95       	lsr	r18
     628:	27 70       	andi	r18, 0x07	; 7
     62a:	24 0f       	add	r18, r20
     62c:	fc 01       	movw	r30, r24
     62e:	20 83       	st	Z, r18
     630:	82 ef       	ldi	r24, 0xF2	; 242
     632:	90 e0       	ldi	r25, 0x00	; 0
     634:	29 85       	ldd	r18, Y+9	; 0x09
     636:	3a 85       	ldd	r19, Y+10	; 0x0a
     638:	2e 5f       	subi	r18, 0xFE	; 254
     63a:	3f 4f       	sbci	r19, 0xFF	; 255
     63c:	2e 5f       	subi	r18, 0xFE	; 254
     63e:	3f 4f       	sbci	r19, 0xFF	; 255
     640:	f9 01       	movw	r30, r18
     642:	20 81       	ld	r18, Z
     644:	42 2f       	mov	r20, r18
     646:	44 0f       	add	r20, r20
     648:	44 0f       	add	r20, r20
     64a:	44 0f       	add	r20, r20
     64c:	29 85       	ldd	r18, Y+9	; 0x09
     64e:	3a 85       	ldd	r19, Y+10	; 0x0a
     650:	2e 5f       	subi	r18, 0xFE	; 254
     652:	3f 4f       	sbci	r19, 0xFF	; 255
     654:	2f 5f       	subi	r18, 0xFF	; 255
     656:	3f 4f       	sbci	r19, 0xFF	; 255
     658:	f9 01       	movw	r30, r18
     65a:	20 81       	ld	r18, Z
     65c:	22 95       	swap	r18
     65e:	26 95       	lsr	r18
     660:	27 70       	andi	r18, 0x07	; 7
     662:	24 0f       	add	r18, r20
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
     668:	81 ef       	ldi	r24, 0xF1	; 241
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	29 85       	ldd	r18, Y+9	; 0x09
     66e:	3a 85       	ldd	r19, Y+10	; 0x0a
     670:	2e 5f       	subi	r18, 0xFE	; 254
     672:	3f 4f       	sbci	r19, 0xFF	; 255
     674:	2f 5f       	subi	r18, 0xFF	; 255
     676:	3f 4f       	sbci	r19, 0xFF	; 255
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	42 2f       	mov	r20, r18
     67e:	44 0f       	add	r20, r20
     680:	44 0f       	add	r20, r20
     682:	44 0f       	add	r20, r20
     684:	29 85       	ldd	r18, Y+9	; 0x09
     686:	3a 85       	ldd	r19, Y+10	; 0x0a
     688:	2e 5f       	subi	r18, 0xFE	; 254
     68a:	3f 4f       	sbci	r19, 0xFF	; 255
     68c:	f9 01       	movw	r30, r18
     68e:	20 81       	ld	r18, Z
     690:	22 95       	swap	r18
     692:	26 95       	lsr	r18
     694:	27 70       	andi	r18, 0x07	; 7
     696:	24 0f       	add	r18, r20
     698:	fc 01       	movw	r30, r24
     69a:	20 83       	st	Z, r18
     69c:	80 ef       	ldi	r24, 0xF0	; 240
     69e:	90 e0       	ldi	r25, 0x00	; 0
     6a0:	29 85       	ldd	r18, Y+9	; 0x09
     6a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     6a4:	2e 5f       	subi	r18, 0xFE	; 254
     6a6:	3f 4f       	sbci	r19, 0xFF	; 255
     6a8:	f9 01       	movw	r30, r18
     6aa:	20 81       	ld	r18, Z
     6ac:	22 0f       	add	r18, r18
     6ae:	22 0f       	add	r18, r18
     6b0:	22 0f       	add	r18, r18
     6b2:	fc 01       	movw	r30, r24
     6b4:	20 83       	st	Z, r18
     6b6:	8f ee       	ldi	r24, 0xEF	; 239
     6b8:	90 e0       	ldi	r25, 0x00	; 0
     6ba:	2f ee       	ldi	r18, 0xEF	; 239
     6bc:	30 e0       	ldi	r19, 0x00	; 0
     6be:	f9 01       	movw	r30, r18
     6c0:	20 81       	ld	r18, Z
     6c2:	20 61       	ori	r18, 0x10	; 16
     6c4:	fc 01       	movw	r30, r24
     6c6:	20 83       	st	Z, r18
     6c8:	30 c0       	rjmp	.+96     	; 0x72a <can_cmd+0x23e>
          else              { Can_set_std_id(cmd->id.std);}
     6ca:	83 ef       	ldi	r24, 0xF3	; 243
     6cc:	90 e0       	ldi	r25, 0x00	; 0
     6ce:	29 85       	ldd	r18, Y+9	; 0x09
     6d0:	3a 85       	ldd	r19, Y+10	; 0x0a
     6d2:	2e 5f       	subi	r18, 0xFE	; 254
     6d4:	3f 4f       	sbci	r19, 0xFF	; 255
     6d6:	2f 5f       	subi	r18, 0xFF	; 255
     6d8:	3f 4f       	sbci	r19, 0xFF	; 255
     6da:	f9 01       	movw	r30, r18
     6dc:	20 81       	ld	r18, Z
     6de:	42 2f       	mov	r20, r18
     6e0:	42 95       	swap	r20
     6e2:	44 0f       	add	r20, r20
     6e4:	40 7e       	andi	r20, 0xE0	; 224
     6e6:	29 85       	ldd	r18, Y+9	; 0x09
     6e8:	3a 85       	ldd	r19, Y+10	; 0x0a
     6ea:	2e 5f       	subi	r18, 0xFE	; 254
     6ec:	3f 4f       	sbci	r19, 0xFF	; 255
     6ee:	f9 01       	movw	r30, r18
     6f0:	20 81       	ld	r18, Z
     6f2:	26 95       	lsr	r18
     6f4:	26 95       	lsr	r18
     6f6:	26 95       	lsr	r18
     6f8:	24 0f       	add	r18, r20
     6fa:	fc 01       	movw	r30, r24
     6fc:	20 83       	st	Z, r18
     6fe:	82 ef       	ldi	r24, 0xF2	; 242
     700:	90 e0       	ldi	r25, 0x00	; 0
     702:	29 85       	ldd	r18, Y+9	; 0x09
     704:	3a 85       	ldd	r19, Y+10	; 0x0a
     706:	2e 5f       	subi	r18, 0xFE	; 254
     708:	3f 4f       	sbci	r19, 0xFF	; 255
     70a:	f9 01       	movw	r30, r18
     70c:	20 81       	ld	r18, Z
     70e:	22 95       	swap	r18
     710:	22 0f       	add	r18, r18
     712:	20 7e       	andi	r18, 0xE0	; 224
     714:	fc 01       	movw	r30, r24
     716:	20 83       	st	Z, r18
     718:	8f ee       	ldi	r24, 0xEF	; 239
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	2f ee       	ldi	r18, 0xEF	; 239
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	f9 01       	movw	r30, r18
     722:	20 81       	ld	r18, Z
     724:	2f 7e       	andi	r18, 0xEF	; 239
     726:	fc 01       	movw	r30, r24
     728:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     72a:	19 82       	std	Y+1, r1	; 0x01
     72c:	13 c0       	rjmp	.+38     	; 0x754 <can_cmd+0x268>
     72e:	8a ef       	ldi	r24, 0xFA	; 250
     730:	90 e0       	ldi	r25, 0x00	; 0
     732:	29 85       	ldd	r18, Y+9	; 0x09
     734:	3a 85       	ldd	r19, Y+10	; 0x0a
     736:	f9 01       	movw	r30, r18
     738:	47 81       	ldd	r20, Z+7	; 0x07
     73a:	50 85       	ldd	r21, Z+8	; 0x08
     73c:	29 81       	ldd	r18, Y+1	; 0x01
     73e:	22 2f       	mov	r18, r18
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	24 0f       	add	r18, r20
     744:	35 1f       	adc	r19, r21
     746:	f9 01       	movw	r30, r18
     748:	20 81       	ld	r18, Z
     74a:	fc 01       	movw	r30, r24
     74c:	20 83       	st	Z, r18
     74e:	89 81       	ldd	r24, Y+1	; 0x01
     750:	8f 5f       	subi	r24, 0xFF	; 255
     752:	89 83       	std	Y+1, r24	; 0x01
     754:	89 85       	ldd	r24, Y+9	; 0x09
     756:	9a 85       	ldd	r25, Y+10	; 0x0a
     758:	fc 01       	movw	r30, r24
     75a:	96 81       	ldd	r25, Z+6	; 0x06
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	89 17       	cp	r24, r25
     760:	30 f3       	brcs	.-52     	; 0x72e <can_cmd+0x242>
          if (cmd->ctrl.rtr) Can_set_rtr(); 
     762:	89 85       	ldd	r24, Y+9	; 0x09
     764:	9a 85       	ldd	r25, Y+10	; 0x0a
     766:	fc 01       	movw	r30, r24
     768:	82 85       	ldd	r24, Z+10	; 0x0a
     76a:	88 23       	and	r24, r24
     76c:	51 f0       	breq	.+20     	; 0x782 <can_cmd+0x296>
     76e:	80 ef       	ldi	r24, 0xF0	; 240
     770:	90 e0       	ldi	r25, 0x00	; 0
     772:	20 ef       	ldi	r18, 0xF0	; 240
     774:	30 e0       	ldi	r19, 0x00	; 0
     776:	f9 01       	movw	r30, r18
     778:	20 81       	ld	r18, Z
     77a:	24 60       	ori	r18, 0x04	; 4
     77c:	fc 01       	movw	r30, r24
     77e:	20 83       	st	Z, r18
     780:	09 c0       	rjmp	.+18     	; 0x794 <can_cmd+0x2a8>
            else Can_clear_rtr();    
     782:	80 ef       	ldi	r24, 0xF0	; 240
     784:	90 e0       	ldi	r25, 0x00	; 0
     786:	20 ef       	ldi	r18, 0xF0	; 240
     788:	30 e0       	ldi	r19, 0x00	; 0
     78a:	f9 01       	movw	r30, r18
     78c:	20 81       	ld	r18, Z
     78e:	2b 7f       	andi	r18, 0xFB	; 251
     790:	fc 01       	movw	r30, r24
     792:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     794:	8f ee       	ldi	r24, 0xEF	; 239
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	2f ee       	ldi	r18, 0xEF	; 239
     79a:	30 e0       	ldi	r19, 0x00	; 0
     79c:	f9 01       	movw	r30, r18
     79e:	40 81       	ld	r20, Z
     7a0:	29 85       	ldd	r18, Y+9	; 0x09
     7a2:	3a 85       	ldd	r19, Y+10	; 0x0a
     7a4:	f9 01       	movw	r30, r18
     7a6:	26 81       	ldd	r18, Z+6	; 0x06
     7a8:	24 2b       	or	r18, r20
     7aa:	fc 01       	movw	r30, r24
     7ac:	20 83       	st	Z, r18
          Can_config_tx();
     7ae:	8f ee       	ldi	r24, 0xEF	; 239
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	2f ee       	ldi	r18, 0xEF	; 239
     7b4:	30 e0       	ldi	r19, 0x00	; 0
     7b6:	f9 01       	movw	r30, r18
     7b8:	20 81       	ld	r18, Z
     7ba:	2f 73       	andi	r18, 0x3F	; 63
     7bc:	fc 01       	movw	r30, r24
     7be:	20 83       	st	Z, r18
     7c0:	8f ee       	ldi	r24, 0xEF	; 239
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	2f ee       	ldi	r18, 0xEF	; 239
     7c6:	30 e0       	ldi	r19, 0x00	; 0
     7c8:	f9 01       	movw	r30, r18
     7ca:	20 81       	ld	r18, Z
     7cc:	20 64       	ori	r18, 0x40	; 64
     7ce:	fc 01       	movw	r30, r24
     7d0:	20 83       	st	Z, r18
          break;
     7d2:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_TX_DATA:    
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     7d6:	89 85       	ldd	r24, Y+9	; 0x09
     7d8:	9a 85       	ldd	r25, Y+10	; 0x0a
     7da:	fc 01       	movw	r30, r24
     7dc:	83 85       	ldd	r24, Z+11	; 0x0b
     7de:	88 23       	and	r24, r24
     7e0:	09 f4       	brne	.+2      	; 0x7e4 <can_cmd+0x2f8>
     7e2:	69 c0       	rjmp	.+210    	; 0x8b6 <__DATA_REGION_LENGTH__+0xb6>
     7e4:	83 ef       	ldi	r24, 0xF3	; 243
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	29 85       	ldd	r18, Y+9	; 0x09
     7ea:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ec:	2e 5f       	subi	r18, 0xFE	; 254
     7ee:	3f 4f       	sbci	r19, 0xFF	; 255
     7f0:	2d 5f       	subi	r18, 0xFD	; 253
     7f2:	3f 4f       	sbci	r19, 0xFF	; 255
     7f4:	f9 01       	movw	r30, r18
     7f6:	20 81       	ld	r18, Z
     7f8:	42 2f       	mov	r20, r18
     7fa:	44 0f       	add	r20, r20
     7fc:	44 0f       	add	r20, r20
     7fe:	44 0f       	add	r20, r20
     800:	29 85       	ldd	r18, Y+9	; 0x09
     802:	3a 85       	ldd	r19, Y+10	; 0x0a
     804:	2e 5f       	subi	r18, 0xFE	; 254
     806:	3f 4f       	sbci	r19, 0xFF	; 255
     808:	2e 5f       	subi	r18, 0xFE	; 254
     80a:	3f 4f       	sbci	r19, 0xFF	; 255
     80c:	f9 01       	movw	r30, r18
     80e:	20 81       	ld	r18, Z
     810:	22 95       	swap	r18
     812:	26 95       	lsr	r18
     814:	27 70       	andi	r18, 0x07	; 7
     816:	24 0f       	add	r18, r20
     818:	fc 01       	movw	r30, r24
     81a:	20 83       	st	Z, r18
     81c:	82 ef       	ldi	r24, 0xF2	; 242
     81e:	90 e0       	ldi	r25, 0x00	; 0
     820:	29 85       	ldd	r18, Y+9	; 0x09
     822:	3a 85       	ldd	r19, Y+10	; 0x0a
     824:	2e 5f       	subi	r18, 0xFE	; 254
     826:	3f 4f       	sbci	r19, 0xFF	; 255
     828:	2e 5f       	subi	r18, 0xFE	; 254
     82a:	3f 4f       	sbci	r19, 0xFF	; 255
     82c:	f9 01       	movw	r30, r18
     82e:	20 81       	ld	r18, Z
     830:	42 2f       	mov	r20, r18
     832:	44 0f       	add	r20, r20
     834:	44 0f       	add	r20, r20
     836:	44 0f       	add	r20, r20
     838:	29 85       	ldd	r18, Y+9	; 0x09
     83a:	3a 85       	ldd	r19, Y+10	; 0x0a
     83c:	2e 5f       	subi	r18, 0xFE	; 254
     83e:	3f 4f       	sbci	r19, 0xFF	; 255
     840:	2f 5f       	subi	r18, 0xFF	; 255
     842:	3f 4f       	sbci	r19, 0xFF	; 255
     844:	f9 01       	movw	r30, r18
     846:	20 81       	ld	r18, Z
     848:	22 95       	swap	r18
     84a:	26 95       	lsr	r18
     84c:	27 70       	andi	r18, 0x07	; 7
     84e:	24 0f       	add	r18, r20
     850:	fc 01       	movw	r30, r24
     852:	20 83       	st	Z, r18
     854:	81 ef       	ldi	r24, 0xF1	; 241
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	29 85       	ldd	r18, Y+9	; 0x09
     85a:	3a 85       	ldd	r19, Y+10	; 0x0a
     85c:	2e 5f       	subi	r18, 0xFE	; 254
     85e:	3f 4f       	sbci	r19, 0xFF	; 255
     860:	2f 5f       	subi	r18, 0xFF	; 255
     862:	3f 4f       	sbci	r19, 0xFF	; 255
     864:	f9 01       	movw	r30, r18
     866:	20 81       	ld	r18, Z
     868:	42 2f       	mov	r20, r18
     86a:	44 0f       	add	r20, r20
     86c:	44 0f       	add	r20, r20
     86e:	44 0f       	add	r20, r20
     870:	29 85       	ldd	r18, Y+9	; 0x09
     872:	3a 85       	ldd	r19, Y+10	; 0x0a
     874:	2e 5f       	subi	r18, 0xFE	; 254
     876:	3f 4f       	sbci	r19, 0xFF	; 255
     878:	f9 01       	movw	r30, r18
     87a:	20 81       	ld	r18, Z
     87c:	22 95       	swap	r18
     87e:	26 95       	lsr	r18
     880:	27 70       	andi	r18, 0x07	; 7
     882:	24 0f       	add	r18, r20
     884:	fc 01       	movw	r30, r24
     886:	20 83       	st	Z, r18
     888:	80 ef       	ldi	r24, 0xF0	; 240
     88a:	90 e0       	ldi	r25, 0x00	; 0
     88c:	29 85       	ldd	r18, Y+9	; 0x09
     88e:	3a 85       	ldd	r19, Y+10	; 0x0a
     890:	2e 5f       	subi	r18, 0xFE	; 254
     892:	3f 4f       	sbci	r19, 0xFF	; 255
     894:	f9 01       	movw	r30, r18
     896:	20 81       	ld	r18, Z
     898:	22 0f       	add	r18, r18
     89a:	22 0f       	add	r18, r18
     89c:	22 0f       	add	r18, r18
     89e:	fc 01       	movw	r30, r24
     8a0:	20 83       	st	Z, r18
     8a2:	8f ee       	ldi	r24, 0xEF	; 239
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	2f ee       	ldi	r18, 0xEF	; 239
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	f9 01       	movw	r30, r18
     8ac:	20 81       	ld	r18, Z
     8ae:	20 61       	ori	r18, 0x10	; 16
     8b0:	fc 01       	movw	r30, r24
     8b2:	20 83       	st	Z, r18
     8b4:	30 c0       	rjmp	.+96     	; 0x916 <__stack+0x17>
          else              { Can_set_std_id(cmd->id.std);}
     8b6:	83 ef       	ldi	r24, 0xF3	; 243
     8b8:	90 e0       	ldi	r25, 0x00	; 0
     8ba:	29 85       	ldd	r18, Y+9	; 0x09
     8bc:	3a 85       	ldd	r19, Y+10	; 0x0a
     8be:	2e 5f       	subi	r18, 0xFE	; 254
     8c0:	3f 4f       	sbci	r19, 0xFF	; 255
     8c2:	2f 5f       	subi	r18, 0xFF	; 255
     8c4:	3f 4f       	sbci	r19, 0xFF	; 255
     8c6:	f9 01       	movw	r30, r18
     8c8:	20 81       	ld	r18, Z
     8ca:	42 2f       	mov	r20, r18
     8cc:	42 95       	swap	r20
     8ce:	44 0f       	add	r20, r20
     8d0:	40 7e       	andi	r20, 0xE0	; 224
     8d2:	29 85       	ldd	r18, Y+9	; 0x09
     8d4:	3a 85       	ldd	r19, Y+10	; 0x0a
     8d6:	2e 5f       	subi	r18, 0xFE	; 254
     8d8:	3f 4f       	sbci	r19, 0xFF	; 255
     8da:	f9 01       	movw	r30, r18
     8dc:	20 81       	ld	r18, Z
     8de:	26 95       	lsr	r18
     8e0:	26 95       	lsr	r18
     8e2:	26 95       	lsr	r18
     8e4:	24 0f       	add	r18, r20
     8e6:	fc 01       	movw	r30, r24
     8e8:	20 83       	st	Z, r18
     8ea:	82 ef       	ldi	r24, 0xF2	; 242
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	29 85       	ldd	r18, Y+9	; 0x09
     8f0:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f2:	2e 5f       	subi	r18, 0xFE	; 254
     8f4:	3f 4f       	sbci	r19, 0xFF	; 255
     8f6:	f9 01       	movw	r30, r18
     8f8:	20 81       	ld	r18, Z
     8fa:	22 95       	swap	r18
     8fc:	22 0f       	add	r18, r18
     8fe:	20 7e       	andi	r18, 0xE0	; 224
     900:	fc 01       	movw	r30, r24
     902:	20 83       	st	Z, r18
     904:	8f ee       	ldi	r24, 0xEF	; 239
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	2f ee       	ldi	r18, 0xEF	; 239
     90a:	30 e0       	ldi	r19, 0x00	; 0
     90c:	f9 01       	movw	r30, r18
     90e:	20 81       	ld	r18, Z
     910:	2f 7e       	andi	r18, 0xEF	; 239
     912:	fc 01       	movw	r30, r24
     914:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
     916:	19 82       	std	Y+1, r1	; 0x01
     918:	13 c0       	rjmp	.+38     	; 0x940 <__stack+0x41>
     91a:	8a ef       	ldi	r24, 0xFA	; 250
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	29 85       	ldd	r18, Y+9	; 0x09
     920:	3a 85       	ldd	r19, Y+10	; 0x0a
     922:	f9 01       	movw	r30, r18
     924:	47 81       	ldd	r20, Z+7	; 0x07
     926:	50 85       	ldd	r21, Z+8	; 0x08
     928:	29 81       	ldd	r18, Y+1	; 0x01
     92a:	22 2f       	mov	r18, r18
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	24 0f       	add	r18, r20
     930:	35 1f       	adc	r19, r21
     932:	f9 01       	movw	r30, r18
     934:	20 81       	ld	r18, Z
     936:	fc 01       	movw	r30, r24
     938:	20 83       	st	Z, r18
     93a:	89 81       	ldd	r24, Y+1	; 0x01
     93c:	8f 5f       	subi	r24, 0xFF	; 255
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	89 85       	ldd	r24, Y+9	; 0x09
     942:	9a 85       	ldd	r25, Y+10	; 0x0a
     944:	fc 01       	movw	r30, r24
     946:	96 81       	ldd	r25, Z+6	; 0x06
     948:	89 81       	ldd	r24, Y+1	; 0x01
     94a:	89 17       	cp	r24, r25
     94c:	30 f3       	brcs	.-52     	; 0x91a <__stack+0x1b>
          cmd->ctrl.rtr=0; Can_clear_rtr();
     94e:	89 85       	ldd	r24, Y+9	; 0x09
     950:	9a 85       	ldd	r25, Y+10	; 0x0a
     952:	fc 01       	movw	r30, r24
     954:	12 86       	std	Z+10, r1	; 0x0a
     956:	80 ef       	ldi	r24, 0xF0	; 240
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	20 ef       	ldi	r18, 0xF0	; 240
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	f9 01       	movw	r30, r18
     960:	20 81       	ld	r18, Z
     962:	2b 7f       	andi	r18, 0xFB	; 251
     964:	fc 01       	movw	r30, r24
     966:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     968:	8f ee       	ldi	r24, 0xEF	; 239
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	2f ee       	ldi	r18, 0xEF	; 239
     96e:	30 e0       	ldi	r19, 0x00	; 0
     970:	f9 01       	movw	r30, r18
     972:	40 81       	ld	r20, Z
     974:	29 85       	ldd	r18, Y+9	; 0x09
     976:	3a 85       	ldd	r19, Y+10	; 0x0a
     978:	f9 01       	movw	r30, r18
     97a:	26 81       	ldd	r18, Z+6	; 0x06
     97c:	24 2b       	or	r18, r20
     97e:	fc 01       	movw	r30, r24
     980:	20 83       	st	Z, r18
          Can_config_tx();
     982:	8f ee       	ldi	r24, 0xEF	; 239
     984:	90 e0       	ldi	r25, 0x00	; 0
     986:	2f ee       	ldi	r18, 0xEF	; 239
     988:	30 e0       	ldi	r19, 0x00	; 0
     98a:	f9 01       	movw	r30, r18
     98c:	20 81       	ld	r18, Z
     98e:	2f 73       	andi	r18, 0x3F	; 63
     990:	fc 01       	movw	r30, r24
     992:	20 83       	st	Z, r18
     994:	8f ee       	ldi	r24, 0xEF	; 239
     996:	90 e0       	ldi	r25, 0x00	; 0
     998:	2f ee       	ldi	r18, 0xEF	; 239
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	f9 01       	movw	r30, r18
     99e:	20 81       	ld	r18, Z
     9a0:	20 64       	ori	r18, 0x40	; 64
     9a2:	fc 01       	movw	r30, r24
     9a4:	20 83       	st	Z, r18
          break;
     9a6:	0c 94 02 0d 	jmp	0x1a04	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_TX_REMOTE:       
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     9aa:	89 85       	ldd	r24, Y+9	; 0x09
     9ac:	9a 85       	ldd	r25, Y+10	; 0x0a
     9ae:	fc 01       	movw	r30, r24
     9b0:	83 85       	ldd	r24, Z+11	; 0x0b
     9b2:	88 23       	and	r24, r24
     9b4:	09 f4       	brne	.+2      	; 0x9b8 <__stack+0xb9>
     9b6:	69 c0       	rjmp	.+210    	; 0xa8a <__stack+0x18b>
     9b8:	83 ef       	ldi	r24, 0xF3	; 243
     9ba:	90 e0       	ldi	r25, 0x00	; 0
     9bc:	29 85       	ldd	r18, Y+9	; 0x09
     9be:	3a 85       	ldd	r19, Y+10	; 0x0a
     9c0:	2e 5f       	subi	r18, 0xFE	; 254
     9c2:	3f 4f       	sbci	r19, 0xFF	; 255
     9c4:	2d 5f       	subi	r18, 0xFD	; 253
     9c6:	3f 4f       	sbci	r19, 0xFF	; 255
     9c8:	f9 01       	movw	r30, r18
     9ca:	20 81       	ld	r18, Z
     9cc:	42 2f       	mov	r20, r18
     9ce:	44 0f       	add	r20, r20
     9d0:	44 0f       	add	r20, r20
     9d2:	44 0f       	add	r20, r20
     9d4:	29 85       	ldd	r18, Y+9	; 0x09
     9d6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9d8:	2e 5f       	subi	r18, 0xFE	; 254
     9da:	3f 4f       	sbci	r19, 0xFF	; 255
     9dc:	2e 5f       	subi	r18, 0xFE	; 254
     9de:	3f 4f       	sbci	r19, 0xFF	; 255
     9e0:	f9 01       	movw	r30, r18
     9e2:	20 81       	ld	r18, Z
     9e4:	22 95       	swap	r18
     9e6:	26 95       	lsr	r18
     9e8:	27 70       	andi	r18, 0x07	; 7
     9ea:	24 0f       	add	r18, r20
     9ec:	fc 01       	movw	r30, r24
     9ee:	20 83       	st	Z, r18
     9f0:	82 ef       	ldi	r24, 0xF2	; 242
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	29 85       	ldd	r18, Y+9	; 0x09
     9f6:	3a 85       	ldd	r19, Y+10	; 0x0a
     9f8:	2e 5f       	subi	r18, 0xFE	; 254
     9fa:	3f 4f       	sbci	r19, 0xFF	; 255
     9fc:	2e 5f       	subi	r18, 0xFE	; 254
     9fe:	3f 4f       	sbci	r19, 0xFF	; 255
     a00:	f9 01       	movw	r30, r18
     a02:	20 81       	ld	r18, Z
     a04:	42 2f       	mov	r20, r18
     a06:	44 0f       	add	r20, r20
     a08:	44 0f       	add	r20, r20
     a0a:	44 0f       	add	r20, r20
     a0c:	29 85       	ldd	r18, Y+9	; 0x09
     a0e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a10:	2e 5f       	subi	r18, 0xFE	; 254
     a12:	3f 4f       	sbci	r19, 0xFF	; 255
     a14:	2f 5f       	subi	r18, 0xFF	; 255
     a16:	3f 4f       	sbci	r19, 0xFF	; 255
     a18:	f9 01       	movw	r30, r18
     a1a:	20 81       	ld	r18, Z
     a1c:	22 95       	swap	r18
     a1e:	26 95       	lsr	r18
     a20:	27 70       	andi	r18, 0x07	; 7
     a22:	24 0f       	add	r18, r20
     a24:	fc 01       	movw	r30, r24
     a26:	20 83       	st	Z, r18
     a28:	81 ef       	ldi	r24, 0xF1	; 241
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	29 85       	ldd	r18, Y+9	; 0x09
     a2e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a30:	2e 5f       	subi	r18, 0xFE	; 254
     a32:	3f 4f       	sbci	r19, 0xFF	; 255
     a34:	2f 5f       	subi	r18, 0xFF	; 255
     a36:	3f 4f       	sbci	r19, 0xFF	; 255
     a38:	f9 01       	movw	r30, r18
     a3a:	20 81       	ld	r18, Z
     a3c:	42 2f       	mov	r20, r18
     a3e:	44 0f       	add	r20, r20
     a40:	44 0f       	add	r20, r20
     a42:	44 0f       	add	r20, r20
     a44:	29 85       	ldd	r18, Y+9	; 0x09
     a46:	3a 85       	ldd	r19, Y+10	; 0x0a
     a48:	2e 5f       	subi	r18, 0xFE	; 254
     a4a:	3f 4f       	sbci	r19, 0xFF	; 255
     a4c:	f9 01       	movw	r30, r18
     a4e:	20 81       	ld	r18, Z
     a50:	22 95       	swap	r18
     a52:	26 95       	lsr	r18
     a54:	27 70       	andi	r18, 0x07	; 7
     a56:	24 0f       	add	r18, r20
     a58:	fc 01       	movw	r30, r24
     a5a:	20 83       	st	Z, r18
     a5c:	80 ef       	ldi	r24, 0xF0	; 240
     a5e:	90 e0       	ldi	r25, 0x00	; 0
     a60:	29 85       	ldd	r18, Y+9	; 0x09
     a62:	3a 85       	ldd	r19, Y+10	; 0x0a
     a64:	2e 5f       	subi	r18, 0xFE	; 254
     a66:	3f 4f       	sbci	r19, 0xFF	; 255
     a68:	f9 01       	movw	r30, r18
     a6a:	20 81       	ld	r18, Z
     a6c:	22 0f       	add	r18, r18
     a6e:	22 0f       	add	r18, r18
     a70:	22 0f       	add	r18, r18
     a72:	fc 01       	movw	r30, r24
     a74:	20 83       	st	Z, r18
     a76:	8f ee       	ldi	r24, 0xEF	; 239
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	2f ee       	ldi	r18, 0xEF	; 239
     a7c:	30 e0       	ldi	r19, 0x00	; 0
     a7e:	f9 01       	movw	r30, r18
     a80:	20 81       	ld	r18, Z
     a82:	20 61       	ori	r18, 0x10	; 16
     a84:	fc 01       	movw	r30, r24
     a86:	20 83       	st	Z, r18
     a88:	30 c0       	rjmp	.+96     	; 0xaea <__stack+0x1eb>
          else              { Can_set_std_id(cmd->id.std);}
     a8a:	83 ef       	ldi	r24, 0xF3	; 243
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	29 85       	ldd	r18, Y+9	; 0x09
     a90:	3a 85       	ldd	r19, Y+10	; 0x0a
     a92:	2e 5f       	subi	r18, 0xFE	; 254
     a94:	3f 4f       	sbci	r19, 0xFF	; 255
     a96:	2f 5f       	subi	r18, 0xFF	; 255
     a98:	3f 4f       	sbci	r19, 0xFF	; 255
     a9a:	f9 01       	movw	r30, r18
     a9c:	20 81       	ld	r18, Z
     a9e:	42 2f       	mov	r20, r18
     aa0:	42 95       	swap	r20
     aa2:	44 0f       	add	r20, r20
     aa4:	40 7e       	andi	r20, 0xE0	; 224
     aa6:	29 85       	ldd	r18, Y+9	; 0x09
     aa8:	3a 85       	ldd	r19, Y+10	; 0x0a
     aaa:	2e 5f       	subi	r18, 0xFE	; 254
     aac:	3f 4f       	sbci	r19, 0xFF	; 255
     aae:	f9 01       	movw	r30, r18
     ab0:	20 81       	ld	r18, Z
     ab2:	26 95       	lsr	r18
     ab4:	26 95       	lsr	r18
     ab6:	26 95       	lsr	r18
     ab8:	24 0f       	add	r18, r20
     aba:	fc 01       	movw	r30, r24
     abc:	20 83       	st	Z, r18
     abe:	82 ef       	ldi	r24, 0xF2	; 242
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	29 85       	ldd	r18, Y+9	; 0x09
     ac4:	3a 85       	ldd	r19, Y+10	; 0x0a
     ac6:	2e 5f       	subi	r18, 0xFE	; 254
     ac8:	3f 4f       	sbci	r19, 0xFF	; 255
     aca:	f9 01       	movw	r30, r18
     acc:	20 81       	ld	r18, Z
     ace:	22 95       	swap	r18
     ad0:	22 0f       	add	r18, r18
     ad2:	20 7e       	andi	r18, 0xE0	; 224
     ad4:	fc 01       	movw	r30, r24
     ad6:	20 83       	st	Z, r18
     ad8:	8f ee       	ldi	r24, 0xEF	; 239
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	2f ee       	ldi	r18, 0xEF	; 239
     ade:	30 e0       	ldi	r19, 0x00	; 0
     ae0:	f9 01       	movw	r30, r18
     ae2:	20 81       	ld	r18, Z
     ae4:	2f 7e       	andi	r18, 0xEF	; 239
     ae6:	fc 01       	movw	r30, r24
     ae8:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtr();
     aea:	89 85       	ldd	r24, Y+9	; 0x09
     aec:	9a 85       	ldd	r25, Y+10	; 0x0a
     aee:	21 e0       	ldi	r18, 0x01	; 1
     af0:	fc 01       	movw	r30, r24
     af2:	22 87       	std	Z+10, r18	; 0x0a
     af4:	80 ef       	ldi	r24, 0xF0	; 240
     af6:	90 e0       	ldi	r25, 0x00	; 0
     af8:	20 ef       	ldi	r18, 0xF0	; 240
     afa:	30 e0       	ldi	r19, 0x00	; 0
     afc:	f9 01       	movw	r30, r18
     afe:	20 81       	ld	r18, Z
     b00:	24 60       	ori	r18, 0x04	; 4
     b02:	fc 01       	movw	r30, r24
     b04:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     b06:	8f ee       	ldi	r24, 0xEF	; 239
     b08:	90 e0       	ldi	r25, 0x00	; 0
     b0a:	2f ee       	ldi	r18, 0xEF	; 239
     b0c:	30 e0       	ldi	r19, 0x00	; 0
     b0e:	f9 01       	movw	r30, r18
     b10:	40 81       	ld	r20, Z
     b12:	29 85       	ldd	r18, Y+9	; 0x09
     b14:	3a 85       	ldd	r19, Y+10	; 0x0a
     b16:	f9 01       	movw	r30, r18
     b18:	26 81       	ldd	r18, Z+6	; 0x06
     b1a:	24 2b       	or	r18, r20
     b1c:	fc 01       	movw	r30, r24
     b1e:	20 83       	st	Z, r18
          Can_config_tx();
     b20:	8f ee       	ldi	r24, 0xEF	; 239
     b22:	90 e0       	ldi	r25, 0x00	; 0
     b24:	2f ee       	ldi	r18, 0xEF	; 239
     b26:	30 e0       	ldi	r19, 0x00	; 0
     b28:	f9 01       	movw	r30, r18
     b2a:	20 81       	ld	r18, Z
     b2c:	2f 73       	andi	r18, 0x3F	; 63
     b2e:	fc 01       	movw	r30, r24
     b30:	20 83       	st	Z, r18
     b32:	8f ee       	ldi	r24, 0xEF	; 239
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	2f ee       	ldi	r18, 0xEF	; 239
     b38:	30 e0       	ldi	r19, 0x00	; 0
     b3a:	f9 01       	movw	r30, r18
     b3c:	20 81       	ld	r18, Z
     b3e:	20 64       	ori	r18, 0x40	; 64
     b40:	fc 01       	movw	r30, r24
     b42:	20 83       	st	Z, r18
          break;
     b44:	5f c7       	rjmp	.+3774   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     b46:	1d 82       	std	Y+5, r1	; 0x05
     b48:	1e 82       	std	Y+6, r1	; 0x06
     b4a:	1f 82       	std	Y+7, r1	; 0x07
     b4c:	18 86       	std	Y+8, r1	; 0x08
     b4e:	27 ef       	ldi	r18, 0xF7	; 247
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	ce 01       	movw	r24, r28
     b54:	05 96       	adiw	r24, 0x05	; 5
     b56:	03 96       	adiw	r24, 0x03	; 3
     b58:	fc 01       	movw	r30, r24
     b5a:	80 81       	ld	r24, Z
     b5c:	48 2f       	mov	r20, r24
     b5e:	44 0f       	add	r20, r20
     b60:	44 0f       	add	r20, r20
     b62:	44 0f       	add	r20, r20
     b64:	ce 01       	movw	r24, r28
     b66:	05 96       	adiw	r24, 0x05	; 5
     b68:	02 96       	adiw	r24, 0x02	; 2
     b6a:	fc 01       	movw	r30, r24
     b6c:	80 81       	ld	r24, Z
     b6e:	82 95       	swap	r24
     b70:	86 95       	lsr	r24
     b72:	87 70       	andi	r24, 0x07	; 7
     b74:	84 0f       	add	r24, r20
     b76:	f9 01       	movw	r30, r18
     b78:	80 83       	st	Z, r24
     b7a:	26 ef       	ldi	r18, 0xF6	; 246
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	ce 01       	movw	r24, r28
     b80:	05 96       	adiw	r24, 0x05	; 5
     b82:	02 96       	adiw	r24, 0x02	; 2
     b84:	fc 01       	movw	r30, r24
     b86:	80 81       	ld	r24, Z
     b88:	48 2f       	mov	r20, r24
     b8a:	44 0f       	add	r20, r20
     b8c:	44 0f       	add	r20, r20
     b8e:	44 0f       	add	r20, r20
     b90:	ce 01       	movw	r24, r28
     b92:	05 96       	adiw	r24, 0x05	; 5
     b94:	01 96       	adiw	r24, 0x01	; 1
     b96:	fc 01       	movw	r30, r24
     b98:	80 81       	ld	r24, Z
     b9a:	82 95       	swap	r24
     b9c:	86 95       	lsr	r24
     b9e:	87 70       	andi	r24, 0x07	; 7
     ba0:	84 0f       	add	r24, r20
     ba2:	f9 01       	movw	r30, r18
     ba4:	80 83       	st	Z, r24
     ba6:	25 ef       	ldi	r18, 0xF5	; 245
     ba8:	30 e0       	ldi	r19, 0x00	; 0
     baa:	ce 01       	movw	r24, r28
     bac:	05 96       	adiw	r24, 0x05	; 5
     bae:	01 96       	adiw	r24, 0x01	; 1
     bb0:	fc 01       	movw	r30, r24
     bb2:	80 81       	ld	r24, Z
     bb4:	48 2f       	mov	r20, r24
     bb6:	44 0f       	add	r20, r20
     bb8:	44 0f       	add	r20, r20
     bba:	44 0f       	add	r20, r20
     bbc:	ce 01       	movw	r24, r28
     bbe:	05 96       	adiw	r24, 0x05	; 5
     bc0:	fc 01       	movw	r30, r24
     bc2:	80 81       	ld	r24, Z
     bc4:	82 95       	swap	r24
     bc6:	86 95       	lsr	r24
     bc8:	87 70       	andi	r24, 0x07	; 7
     bca:	84 0f       	add	r24, r20
     bcc:	f9 01       	movw	r30, r18
     bce:	80 83       	st	Z, r24
     bd0:	84 ef       	ldi	r24, 0xF4	; 244
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	9e 01       	movw	r18, r28
     bd6:	2b 5f       	subi	r18, 0xFB	; 251
     bd8:	3f 4f       	sbci	r19, 0xFF	; 255
     bda:	f9 01       	movw	r30, r18
     bdc:	20 81       	ld	r18, Z
     bde:	22 0f       	add	r18, r18
     be0:	22 0f       	add	r18, r18
     be2:	22 0f       	add	r18, r18
     be4:	fc 01       	movw	r30, r24
     be6:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     be8:	8f ee       	ldi	r24, 0xEF	; 239
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	2f ee       	ldi	r18, 0xEF	; 239
     bee:	30 e0       	ldi	r19, 0x00	; 0
     bf0:	f9 01       	movw	r30, r18
     bf2:	40 81       	ld	r20, Z
     bf4:	29 85       	ldd	r18, Y+9	; 0x09
     bf6:	3a 85       	ldd	r19, Y+10	; 0x0a
     bf8:	f9 01       	movw	r30, r18
     bfa:	26 81       	ldd	r18, Z+6	; 0x06
     bfc:	24 2b       	or	r18, r20
     bfe:	fc 01       	movw	r30, r24
     c00:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
     c02:	84 ef       	ldi	r24, 0xF4	; 244
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	24 ef       	ldi	r18, 0xF4	; 244
     c08:	30 e0       	ldi	r19, 0x00	; 0
     c0a:	f9 01       	movw	r30, r18
     c0c:	20 81       	ld	r18, Z
     c0e:	2b 7f       	andi	r18, 0xFB	; 251
     c10:	fc 01       	movw	r30, r24
     c12:	20 83       	st	Z, r18
          Can_clear_idemsk();
     c14:	84 ef       	ldi	r24, 0xF4	; 244
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	24 ef       	ldi	r18, 0xF4	; 244
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	f9 01       	movw	r30, r18
     c1e:	20 81       	ld	r18, Z
     c20:	2e 7f       	andi	r18, 0xFE	; 254
     c22:	fc 01       	movw	r30, r24
     c24:	20 83       	st	Z, r18
          Can_config_rx();       
     c26:	8f ee       	ldi	r24, 0xEF	; 239
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	2f ee       	ldi	r18, 0xEF	; 239
     c2c:	30 e0       	ldi	r19, 0x00	; 0
     c2e:	f9 01       	movw	r30, r18
     c30:	20 81       	ld	r18, Z
     c32:	2f 73       	andi	r18, 0x3F	; 63
     c34:	fc 01       	movw	r30, r24
     c36:	20 83       	st	Z, r18
     c38:	8f ee       	ldi	r24, 0xEF	; 239
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	2f ee       	ldi	r18, 0xEF	; 239
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	f9 01       	movw	r30, r18
     c42:	20 81       	ld	r18, Z
     c44:	20 68       	ori	r18, 0x80	; 128
     c46:	fc 01       	movw	r30, r24
     c48:	20 83       	st	Z, r18
          break;
     c4a:	dc c6       	rjmp	.+3512   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX_DATA:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     c4c:	1d 82       	std	Y+5, r1	; 0x05
     c4e:	1e 82       	std	Y+6, r1	; 0x06
     c50:	1f 82       	std	Y+7, r1	; 0x07
     c52:	18 86       	std	Y+8, r1	; 0x08
     c54:	27 ef       	ldi	r18, 0xF7	; 247
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	ce 01       	movw	r24, r28
     c5a:	05 96       	adiw	r24, 0x05	; 5
     c5c:	03 96       	adiw	r24, 0x03	; 3
     c5e:	fc 01       	movw	r30, r24
     c60:	80 81       	ld	r24, Z
     c62:	48 2f       	mov	r20, r24
     c64:	44 0f       	add	r20, r20
     c66:	44 0f       	add	r20, r20
     c68:	44 0f       	add	r20, r20
     c6a:	ce 01       	movw	r24, r28
     c6c:	05 96       	adiw	r24, 0x05	; 5
     c6e:	02 96       	adiw	r24, 0x02	; 2
     c70:	fc 01       	movw	r30, r24
     c72:	80 81       	ld	r24, Z
     c74:	82 95       	swap	r24
     c76:	86 95       	lsr	r24
     c78:	87 70       	andi	r24, 0x07	; 7
     c7a:	84 0f       	add	r24, r20
     c7c:	f9 01       	movw	r30, r18
     c7e:	80 83       	st	Z, r24
     c80:	26 ef       	ldi	r18, 0xF6	; 246
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	ce 01       	movw	r24, r28
     c86:	05 96       	adiw	r24, 0x05	; 5
     c88:	02 96       	adiw	r24, 0x02	; 2
     c8a:	fc 01       	movw	r30, r24
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	44 0f       	add	r20, r20
     c92:	44 0f       	add	r20, r20
     c94:	44 0f       	add	r20, r20
     c96:	ce 01       	movw	r24, r28
     c98:	05 96       	adiw	r24, 0x05	; 5
     c9a:	01 96       	adiw	r24, 0x01	; 1
     c9c:	fc 01       	movw	r30, r24
     c9e:	80 81       	ld	r24, Z
     ca0:	82 95       	swap	r24
     ca2:	86 95       	lsr	r24
     ca4:	87 70       	andi	r24, 0x07	; 7
     ca6:	84 0f       	add	r24, r20
     ca8:	f9 01       	movw	r30, r18
     caa:	80 83       	st	Z, r24
     cac:	25 ef       	ldi	r18, 0xF5	; 245
     cae:	30 e0       	ldi	r19, 0x00	; 0
     cb0:	ce 01       	movw	r24, r28
     cb2:	05 96       	adiw	r24, 0x05	; 5
     cb4:	01 96       	adiw	r24, 0x01	; 1
     cb6:	fc 01       	movw	r30, r24
     cb8:	80 81       	ld	r24, Z
     cba:	48 2f       	mov	r20, r24
     cbc:	44 0f       	add	r20, r20
     cbe:	44 0f       	add	r20, r20
     cc0:	44 0f       	add	r20, r20
     cc2:	ce 01       	movw	r24, r28
     cc4:	05 96       	adiw	r24, 0x05	; 5
     cc6:	fc 01       	movw	r30, r24
     cc8:	80 81       	ld	r24, Z
     cca:	82 95       	swap	r24
     ccc:	86 95       	lsr	r24
     cce:	87 70       	andi	r24, 0x07	; 7
     cd0:	84 0f       	add	r24, r20
     cd2:	f9 01       	movw	r30, r18
     cd4:	80 83       	st	Z, r24
     cd6:	84 ef       	ldi	r24, 0xF4	; 244
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	9e 01       	movw	r18, r28
     cdc:	2b 5f       	subi	r18, 0xFB	; 251
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	f9 01       	movw	r30, r18
     ce2:	20 81       	ld	r18, Z
     ce4:	22 0f       	add	r18, r18
     ce6:	22 0f       	add	r18, r18
     ce8:	22 0f       	add	r18, r18
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     cee:	8f ee       	ldi	r24, 0xEF	; 239
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	2f ee       	ldi	r18, 0xEF	; 239
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	f9 01       	movw	r30, r18
     cf8:	40 81       	ld	r20, Z
     cfa:	29 85       	ldd	r18, Y+9	; 0x09
     cfc:	3a 85       	ldd	r19, Y+10	; 0x0a
     cfe:	f9 01       	movw	r30, r18
     d00:	26 81       	ldd	r18, Z+6	; 0x06
     d02:	24 2b       	or	r18, r20
     d04:	fc 01       	movw	r30, r24
     d06:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
     d08:	89 85       	ldd	r24, Y+9	; 0x09
     d0a:	9a 85       	ldd	r25, Y+10	; 0x0a
     d0c:	fc 01       	movw	r30, r24
     d0e:	12 86       	std	Z+10, r1	; 0x0a
     d10:	84 ef       	ldi	r24, 0xF4	; 244
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	24 ef       	ldi	r18, 0xF4	; 244
     d16:	30 e0       	ldi	r19, 0x00	; 0
     d18:	f9 01       	movw	r30, r18
     d1a:	20 81       	ld	r18, Z
     d1c:	24 60       	ori	r18, 0x04	; 4
     d1e:	fc 01       	movw	r30, r24
     d20:	20 83       	st	Z, r18
     d22:	80 ef       	ldi	r24, 0xF0	; 240
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	20 ef       	ldi	r18, 0xF0	; 240
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	f9 01       	movw	r30, r18
     d2c:	20 81       	ld	r18, Z
     d2e:	2b 7f       	andi	r18, 0xFB	; 251
     d30:	fc 01       	movw	r30, r24
     d32:	20 83       	st	Z, r18
          Can_clear_idemsk();
     d34:	84 ef       	ldi	r24, 0xF4	; 244
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	24 ef       	ldi	r18, 0xF4	; 244
     d3a:	30 e0       	ldi	r19, 0x00	; 0
     d3c:	f9 01       	movw	r30, r18
     d3e:	20 81       	ld	r18, Z
     d40:	2e 7f       	andi	r18, 0xFE	; 254
     d42:	fc 01       	movw	r30, r24
     d44:	20 83       	st	Z, r18
          Can_config_rx();       
     d46:	8f ee       	ldi	r24, 0xEF	; 239
     d48:	90 e0       	ldi	r25, 0x00	; 0
     d4a:	2f ee       	ldi	r18, 0xEF	; 239
     d4c:	30 e0       	ldi	r19, 0x00	; 0
     d4e:	f9 01       	movw	r30, r18
     d50:	20 81       	ld	r18, Z
     d52:	2f 73       	andi	r18, 0x3F	; 63
     d54:	fc 01       	movw	r30, r24
     d56:	20 83       	st	Z, r18
     d58:	8f ee       	ldi	r24, 0xEF	; 239
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	2f ee       	ldi	r18, 0xEF	; 239
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	f9 01       	movw	r30, r18
     d62:	20 81       	ld	r18, Z
     d64:	20 68       	ori	r18, 0x80	; 128
     d66:	fc 01       	movw	r30, r24
     d68:	20 83       	st	Z, r18
          break;
     d6a:	4c c6       	rjmp	.+3224   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX_REMOTE:
          u32_temp=0; Can_set_ext_msk(u32_temp);
     d6c:	1d 82       	std	Y+5, r1	; 0x05
     d6e:	1e 82       	std	Y+6, r1	; 0x06
     d70:	1f 82       	std	Y+7, r1	; 0x07
     d72:	18 86       	std	Y+8, r1	; 0x08
     d74:	27 ef       	ldi	r18, 0xF7	; 247
     d76:	30 e0       	ldi	r19, 0x00	; 0
     d78:	ce 01       	movw	r24, r28
     d7a:	05 96       	adiw	r24, 0x05	; 5
     d7c:	03 96       	adiw	r24, 0x03	; 3
     d7e:	fc 01       	movw	r30, r24
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	44 0f       	add	r20, r20
     d86:	44 0f       	add	r20, r20
     d88:	44 0f       	add	r20, r20
     d8a:	ce 01       	movw	r24, r28
     d8c:	05 96       	adiw	r24, 0x05	; 5
     d8e:	02 96       	adiw	r24, 0x02	; 2
     d90:	fc 01       	movw	r30, r24
     d92:	80 81       	ld	r24, Z
     d94:	82 95       	swap	r24
     d96:	86 95       	lsr	r24
     d98:	87 70       	andi	r24, 0x07	; 7
     d9a:	84 0f       	add	r24, r20
     d9c:	f9 01       	movw	r30, r18
     d9e:	80 83       	st	Z, r24
     da0:	26 ef       	ldi	r18, 0xF6	; 246
     da2:	30 e0       	ldi	r19, 0x00	; 0
     da4:	ce 01       	movw	r24, r28
     da6:	05 96       	adiw	r24, 0x05	; 5
     da8:	02 96       	adiw	r24, 0x02	; 2
     daa:	fc 01       	movw	r30, r24
     dac:	80 81       	ld	r24, Z
     dae:	48 2f       	mov	r20, r24
     db0:	44 0f       	add	r20, r20
     db2:	44 0f       	add	r20, r20
     db4:	44 0f       	add	r20, r20
     db6:	ce 01       	movw	r24, r28
     db8:	05 96       	adiw	r24, 0x05	; 5
     dba:	01 96       	adiw	r24, 0x01	; 1
     dbc:	fc 01       	movw	r30, r24
     dbe:	80 81       	ld	r24, Z
     dc0:	82 95       	swap	r24
     dc2:	86 95       	lsr	r24
     dc4:	87 70       	andi	r24, 0x07	; 7
     dc6:	84 0f       	add	r24, r20
     dc8:	f9 01       	movw	r30, r18
     dca:	80 83       	st	Z, r24
     dcc:	25 ef       	ldi	r18, 0xF5	; 245
     dce:	30 e0       	ldi	r19, 0x00	; 0
     dd0:	ce 01       	movw	r24, r28
     dd2:	05 96       	adiw	r24, 0x05	; 5
     dd4:	01 96       	adiw	r24, 0x01	; 1
     dd6:	fc 01       	movw	r30, r24
     dd8:	80 81       	ld	r24, Z
     dda:	48 2f       	mov	r20, r24
     ddc:	44 0f       	add	r20, r20
     dde:	44 0f       	add	r20, r20
     de0:	44 0f       	add	r20, r20
     de2:	ce 01       	movw	r24, r28
     de4:	05 96       	adiw	r24, 0x05	; 5
     de6:	fc 01       	movw	r30, r24
     de8:	80 81       	ld	r24, Z
     dea:	82 95       	swap	r24
     dec:	86 95       	lsr	r24
     dee:	87 70       	andi	r24, 0x07	; 7
     df0:	84 0f       	add	r24, r20
     df2:	f9 01       	movw	r30, r18
     df4:	80 83       	st	Z, r24
     df6:	84 ef       	ldi	r24, 0xF4	; 244
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	9e 01       	movw	r18, r28
     dfc:	2b 5f       	subi	r18, 0xFB	; 251
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	f9 01       	movw	r30, r18
     e02:	20 81       	ld	r18, Z
     e04:	22 0f       	add	r18, r18
     e06:	22 0f       	add	r18, r18
     e08:	22 0f       	add	r18, r18
     e0a:	fc 01       	movw	r30, r24
     e0c:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
     e0e:	8f ee       	ldi	r24, 0xEF	; 239
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	2f ee       	ldi	r18, 0xEF	; 239
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	f9 01       	movw	r30, r18
     e18:	40 81       	ld	r20, Z
     e1a:	29 85       	ldd	r18, Y+9	; 0x09
     e1c:	3a 85       	ldd	r19, Y+10	; 0x0a
     e1e:	f9 01       	movw	r30, r18
     e20:	26 81       	ldd	r18, Z+6	; 0x06
     e22:	24 2b       	or	r18, r20
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
     e28:	89 85       	ldd	r24, Y+9	; 0x09
     e2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     e2c:	21 e0       	ldi	r18, 0x01	; 1
     e2e:	fc 01       	movw	r30, r24
     e30:	22 87       	std	Z+10, r18	; 0x0a
     e32:	84 ef       	ldi	r24, 0xF4	; 244
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	24 ef       	ldi	r18, 0xF4	; 244
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	f9 01       	movw	r30, r18
     e3c:	20 81       	ld	r18, Z
     e3e:	24 60       	ori	r18, 0x04	; 4
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
     e44:	80 ef       	ldi	r24, 0xF0	; 240
     e46:	90 e0       	ldi	r25, 0x00	; 0
     e48:	20 ef       	ldi	r18, 0xF0	; 240
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	f9 01       	movw	r30, r18
     e4e:	20 81       	ld	r18, Z
     e50:	24 60       	ori	r18, 0x04	; 4
     e52:	fc 01       	movw	r30, r24
     e54:	20 83       	st	Z, r18
          Can_clear_rplv();
     e56:	8f ee       	ldi	r24, 0xEF	; 239
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	2f ee       	ldi	r18, 0xEF	; 239
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	f9 01       	movw	r30, r18
     e60:	20 81       	ld	r18, Z
     e62:	2f 7d       	andi	r18, 0xDF	; 223
     e64:	fc 01       	movw	r30, r24
     e66:	20 83       	st	Z, r18
          Can_clear_idemsk();
     e68:	84 ef       	ldi	r24, 0xF4	; 244
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	24 ef       	ldi	r18, 0xF4	; 244
     e6e:	30 e0       	ldi	r19, 0x00	; 0
     e70:	f9 01       	movw	r30, r18
     e72:	20 81       	ld	r18, Z
     e74:	2e 7f       	andi	r18, 0xFE	; 254
     e76:	fc 01       	movw	r30, r24
     e78:	20 83       	st	Z, r18
          Can_config_rx();       
     e7a:	8f ee       	ldi	r24, 0xEF	; 239
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	2f ee       	ldi	r18, 0xEF	; 239
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	f9 01       	movw	r30, r18
     e84:	20 81       	ld	r18, Z
     e86:	2f 73       	andi	r18, 0x3F	; 63
     e88:	fc 01       	movw	r30, r24
     e8a:	20 83       	st	Z, r18
     e8c:	8f ee       	ldi	r24, 0xEF	; 239
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	2f ee       	ldi	r18, 0xEF	; 239
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	f9 01       	movw	r30, r18
     e96:	20 81       	ld	r18, Z
     e98:	20 68       	ori	r18, 0x80	; 128
     e9a:	fc 01       	movw	r30, r24
     e9c:	20 83       	st	Z, r18
          break;
     e9e:	b2 c5       	rjmp	.+2916   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
     ea0:	89 85       	ldd	r24, Y+9	; 0x09
     ea2:	9a 85       	ldd	r25, Y+10	; 0x0a
     ea4:	fc 01       	movw	r30, r24
     ea6:	83 85       	ldd	r24, Z+11	; 0x0b
     ea8:	88 23       	and	r24, r24
     eaa:	09 f4       	brne	.+2      	; 0xeae <__stack+0x5af>
     eac:	69 c0       	rjmp	.+210    	; 0xf80 <__stack+0x681>
     eae:	83 ef       	ldi	r24, 0xF3	; 243
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	29 85       	ldd	r18, Y+9	; 0x09
     eb4:	3a 85       	ldd	r19, Y+10	; 0x0a
     eb6:	2e 5f       	subi	r18, 0xFE	; 254
     eb8:	3f 4f       	sbci	r19, 0xFF	; 255
     eba:	2d 5f       	subi	r18, 0xFD	; 253
     ebc:	3f 4f       	sbci	r19, 0xFF	; 255
     ebe:	f9 01       	movw	r30, r18
     ec0:	20 81       	ld	r18, Z
     ec2:	42 2f       	mov	r20, r18
     ec4:	44 0f       	add	r20, r20
     ec6:	44 0f       	add	r20, r20
     ec8:	44 0f       	add	r20, r20
     eca:	29 85       	ldd	r18, Y+9	; 0x09
     ecc:	3a 85       	ldd	r19, Y+10	; 0x0a
     ece:	2e 5f       	subi	r18, 0xFE	; 254
     ed0:	3f 4f       	sbci	r19, 0xFF	; 255
     ed2:	2e 5f       	subi	r18, 0xFE	; 254
     ed4:	3f 4f       	sbci	r19, 0xFF	; 255
     ed6:	f9 01       	movw	r30, r18
     ed8:	20 81       	ld	r18, Z
     eda:	22 95       	swap	r18
     edc:	26 95       	lsr	r18
     ede:	27 70       	andi	r18, 0x07	; 7
     ee0:	24 0f       	add	r18, r20
     ee2:	fc 01       	movw	r30, r24
     ee4:	20 83       	st	Z, r18
     ee6:	82 ef       	ldi	r24, 0xF2	; 242
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	29 85       	ldd	r18, Y+9	; 0x09
     eec:	3a 85       	ldd	r19, Y+10	; 0x0a
     eee:	2e 5f       	subi	r18, 0xFE	; 254
     ef0:	3f 4f       	sbci	r19, 0xFF	; 255
     ef2:	2e 5f       	subi	r18, 0xFE	; 254
     ef4:	3f 4f       	sbci	r19, 0xFF	; 255
     ef6:	f9 01       	movw	r30, r18
     ef8:	20 81       	ld	r18, Z
     efa:	42 2f       	mov	r20, r18
     efc:	44 0f       	add	r20, r20
     efe:	44 0f       	add	r20, r20
     f00:	44 0f       	add	r20, r20
     f02:	29 85       	ldd	r18, Y+9	; 0x09
     f04:	3a 85       	ldd	r19, Y+10	; 0x0a
     f06:	2e 5f       	subi	r18, 0xFE	; 254
     f08:	3f 4f       	sbci	r19, 0xFF	; 255
     f0a:	2f 5f       	subi	r18, 0xFF	; 255
     f0c:	3f 4f       	sbci	r19, 0xFF	; 255
     f0e:	f9 01       	movw	r30, r18
     f10:	20 81       	ld	r18, Z
     f12:	22 95       	swap	r18
     f14:	26 95       	lsr	r18
     f16:	27 70       	andi	r18, 0x07	; 7
     f18:	24 0f       	add	r18, r20
     f1a:	fc 01       	movw	r30, r24
     f1c:	20 83       	st	Z, r18
     f1e:	81 ef       	ldi	r24, 0xF1	; 241
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	29 85       	ldd	r18, Y+9	; 0x09
     f24:	3a 85       	ldd	r19, Y+10	; 0x0a
     f26:	2e 5f       	subi	r18, 0xFE	; 254
     f28:	3f 4f       	sbci	r19, 0xFF	; 255
     f2a:	2f 5f       	subi	r18, 0xFF	; 255
     f2c:	3f 4f       	sbci	r19, 0xFF	; 255
     f2e:	f9 01       	movw	r30, r18
     f30:	20 81       	ld	r18, Z
     f32:	42 2f       	mov	r20, r18
     f34:	44 0f       	add	r20, r20
     f36:	44 0f       	add	r20, r20
     f38:	44 0f       	add	r20, r20
     f3a:	29 85       	ldd	r18, Y+9	; 0x09
     f3c:	3a 85       	ldd	r19, Y+10	; 0x0a
     f3e:	2e 5f       	subi	r18, 0xFE	; 254
     f40:	3f 4f       	sbci	r19, 0xFF	; 255
     f42:	f9 01       	movw	r30, r18
     f44:	20 81       	ld	r18, Z
     f46:	22 95       	swap	r18
     f48:	26 95       	lsr	r18
     f4a:	27 70       	andi	r18, 0x07	; 7
     f4c:	24 0f       	add	r18, r20
     f4e:	fc 01       	movw	r30, r24
     f50:	20 83       	st	Z, r18
     f52:	80 ef       	ldi	r24, 0xF0	; 240
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	29 85       	ldd	r18, Y+9	; 0x09
     f58:	3a 85       	ldd	r19, Y+10	; 0x0a
     f5a:	2e 5f       	subi	r18, 0xFE	; 254
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	f9 01       	movw	r30, r18
     f60:	20 81       	ld	r18, Z
     f62:	22 0f       	add	r18, r18
     f64:	22 0f       	add	r18, r18
     f66:	22 0f       	add	r18, r18
     f68:	fc 01       	movw	r30, r24
     f6a:	20 83       	st	Z, r18
     f6c:	8f ee       	ldi	r24, 0xEF	; 239
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	2f ee       	ldi	r18, 0xEF	; 239
     f72:	30 e0       	ldi	r19, 0x00	; 0
     f74:	f9 01       	movw	r30, r18
     f76:	20 81       	ld	r18, Z
     f78:	20 61       	ori	r18, 0x10	; 16
     f7a:	fc 01       	movw	r30, r24
     f7c:	20 83       	st	Z, r18
     f7e:	30 c0       	rjmp	.+96     	; 0xfe0 <__stack+0x6e1>
          else              { Can_set_std_id(cmd->id.std);}
     f80:	83 ef       	ldi	r24, 0xF3	; 243
     f82:	90 e0       	ldi	r25, 0x00	; 0
     f84:	29 85       	ldd	r18, Y+9	; 0x09
     f86:	3a 85       	ldd	r19, Y+10	; 0x0a
     f88:	2e 5f       	subi	r18, 0xFE	; 254
     f8a:	3f 4f       	sbci	r19, 0xFF	; 255
     f8c:	2f 5f       	subi	r18, 0xFF	; 255
     f8e:	3f 4f       	sbci	r19, 0xFF	; 255
     f90:	f9 01       	movw	r30, r18
     f92:	20 81       	ld	r18, Z
     f94:	42 2f       	mov	r20, r18
     f96:	42 95       	swap	r20
     f98:	44 0f       	add	r20, r20
     f9a:	40 7e       	andi	r20, 0xE0	; 224
     f9c:	29 85       	ldd	r18, Y+9	; 0x09
     f9e:	3a 85       	ldd	r19, Y+10	; 0x0a
     fa0:	2e 5f       	subi	r18, 0xFE	; 254
     fa2:	3f 4f       	sbci	r19, 0xFF	; 255
     fa4:	f9 01       	movw	r30, r18
     fa6:	20 81       	ld	r18, Z
     fa8:	26 95       	lsr	r18
     faa:	26 95       	lsr	r18
     fac:	26 95       	lsr	r18
     fae:	24 0f       	add	r18, r20
     fb0:	fc 01       	movw	r30, r24
     fb2:	20 83       	st	Z, r18
     fb4:	82 ef       	ldi	r24, 0xF2	; 242
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	29 85       	ldd	r18, Y+9	; 0x09
     fba:	3a 85       	ldd	r19, Y+10	; 0x0a
     fbc:	2e 5f       	subi	r18, 0xFE	; 254
     fbe:	3f 4f       	sbci	r19, 0xFF	; 255
     fc0:	f9 01       	movw	r30, r18
     fc2:	20 81       	ld	r18, Z
     fc4:	22 95       	swap	r18
     fc6:	22 0f       	add	r18, r18
     fc8:	20 7e       	andi	r18, 0xE0	; 224
     fca:	fc 01       	movw	r30, r24
     fcc:	20 83       	st	Z, r18
     fce:	8f ee       	ldi	r24, 0xEF	; 239
     fd0:	90 e0       	ldi	r25, 0x00	; 0
     fd2:	2f ee       	ldi	r18, 0xEF	; 239
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	f9 01       	movw	r30, r18
     fd8:	20 81       	ld	r18, Z
     fda:	2f 7e       	andi	r18, 0xEF	; 239
     fdc:	fc 01       	movw	r30, r24
     fde:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
     fe0:	8f ef       	ldi	r24, 0xFF	; 255
     fe2:	9f ef       	ldi	r25, 0xFF	; 255
     fe4:	dc 01       	movw	r26, r24
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	9e 83       	std	Y+6, r25	; 0x06
     fea:	af 83       	std	Y+7, r26	; 0x07
     fec:	b8 87       	std	Y+8, r27	; 0x08
     fee:	27 ef       	ldi	r18, 0xF7	; 247
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	ce 01       	movw	r24, r28
     ff4:	05 96       	adiw	r24, 0x05	; 5
     ff6:	03 96       	adiw	r24, 0x03	; 3
     ff8:	fc 01       	movw	r30, r24
     ffa:	80 81       	ld	r24, Z
     ffc:	48 2f       	mov	r20, r24
     ffe:	44 0f       	add	r20, r20
    1000:	44 0f       	add	r20, r20
    1002:	44 0f       	add	r20, r20
    1004:	ce 01       	movw	r24, r28
    1006:	05 96       	adiw	r24, 0x05	; 5
    1008:	02 96       	adiw	r24, 0x02	; 2
    100a:	fc 01       	movw	r30, r24
    100c:	80 81       	ld	r24, Z
    100e:	82 95       	swap	r24
    1010:	86 95       	lsr	r24
    1012:	87 70       	andi	r24, 0x07	; 7
    1014:	84 0f       	add	r24, r20
    1016:	f9 01       	movw	r30, r18
    1018:	80 83       	st	Z, r24
    101a:	26 ef       	ldi	r18, 0xF6	; 246
    101c:	30 e0       	ldi	r19, 0x00	; 0
    101e:	ce 01       	movw	r24, r28
    1020:	05 96       	adiw	r24, 0x05	; 5
    1022:	02 96       	adiw	r24, 0x02	; 2
    1024:	fc 01       	movw	r30, r24
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	44 0f       	add	r20, r20
    102c:	44 0f       	add	r20, r20
    102e:	44 0f       	add	r20, r20
    1030:	ce 01       	movw	r24, r28
    1032:	05 96       	adiw	r24, 0x05	; 5
    1034:	01 96       	adiw	r24, 0x01	; 1
    1036:	fc 01       	movw	r30, r24
    1038:	80 81       	ld	r24, Z
    103a:	82 95       	swap	r24
    103c:	86 95       	lsr	r24
    103e:	87 70       	andi	r24, 0x07	; 7
    1040:	84 0f       	add	r24, r20
    1042:	f9 01       	movw	r30, r18
    1044:	80 83       	st	Z, r24
    1046:	25 ef       	ldi	r18, 0xF5	; 245
    1048:	30 e0       	ldi	r19, 0x00	; 0
    104a:	ce 01       	movw	r24, r28
    104c:	05 96       	adiw	r24, 0x05	; 5
    104e:	01 96       	adiw	r24, 0x01	; 1
    1050:	fc 01       	movw	r30, r24
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	44 0f       	add	r20, r20
    1058:	44 0f       	add	r20, r20
    105a:	44 0f       	add	r20, r20
    105c:	ce 01       	movw	r24, r28
    105e:	05 96       	adiw	r24, 0x05	; 5
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	82 95       	swap	r24
    1066:	86 95       	lsr	r24
    1068:	87 70       	andi	r24, 0x07	; 7
    106a:	84 0f       	add	r24, r20
    106c:	f9 01       	movw	r30, r18
    106e:	80 83       	st	Z, r24
    1070:	84 ef       	ldi	r24, 0xF4	; 244
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	9e 01       	movw	r18, r28
    1076:	2b 5f       	subi	r18, 0xFB	; 251
    1078:	3f 4f       	sbci	r19, 0xFF	; 255
    107a:	f9 01       	movw	r30, r18
    107c:	20 81       	ld	r18, Z
    107e:	22 0f       	add	r18, r18
    1080:	22 0f       	add	r18, r18
    1082:	22 0f       	add	r18, r18
    1084:	fc 01       	movw	r30, r24
    1086:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1088:	8f ee       	ldi	r24, 0xEF	; 239
    108a:	90 e0       	ldi	r25, 0x00	; 0
    108c:	2f ee       	ldi	r18, 0xEF	; 239
    108e:	30 e0       	ldi	r19, 0x00	; 0
    1090:	f9 01       	movw	r30, r18
    1092:	40 81       	ld	r20, Z
    1094:	29 85       	ldd	r18, Y+9	; 0x09
    1096:	3a 85       	ldd	r19, Y+10	; 0x0a
    1098:	f9 01       	movw	r30, r18
    109a:	26 81       	ldd	r18, Z+6	; 0x06
    109c:	24 2b       	or	r18, r20
    109e:	fc 01       	movw	r30, r24
    10a0:	20 83       	st	Z, r18
          Can_clear_rtrmsk();
    10a2:	84 ef       	ldi	r24, 0xF4	; 244
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	24 ef       	ldi	r18, 0xF4	; 244
    10a8:	30 e0       	ldi	r19, 0x00	; 0
    10aa:	f9 01       	movw	r30, r18
    10ac:	20 81       	ld	r18, Z
    10ae:	2b 7f       	andi	r18, 0xFB	; 251
    10b0:	fc 01       	movw	r30, r24
    10b2:	20 83       	st	Z, r18
          Can_set_idemsk();
    10b4:	84 ef       	ldi	r24, 0xF4	; 244
    10b6:	90 e0       	ldi	r25, 0x00	; 0
    10b8:	24 ef       	ldi	r18, 0xF4	; 244
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	f9 01       	movw	r30, r18
    10be:	20 81       	ld	r18, Z
    10c0:	21 60       	ori	r18, 0x01	; 1
    10c2:	fc 01       	movw	r30, r24
    10c4:	20 83       	st	Z, r18
          Can_config_rx();       
    10c6:	8f ee       	ldi	r24, 0xEF	; 239
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	2f ee       	ldi	r18, 0xEF	; 239
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	2f 73       	andi	r18, 0x3F	; 63
    10d4:	fc 01       	movw	r30, r24
    10d6:	20 83       	st	Z, r18
    10d8:	8f ee       	ldi	r24, 0xEF	; 239
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	2f ee       	ldi	r18, 0xEF	; 239
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	f9 01       	movw	r30, r18
    10e2:	20 81       	ld	r18, Z
    10e4:	20 68       	ori	r18, 0x80	; 128
    10e6:	fc 01       	movw	r30, r24
    10e8:	20 83       	st	Z, r18
          break;
    10ea:	8c c4       	rjmp	.+2328   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX_DATA_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    10ec:	89 85       	ldd	r24, Y+9	; 0x09
    10ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f0:	fc 01       	movw	r30, r24
    10f2:	83 85       	ldd	r24, Z+11	; 0x0b
    10f4:	88 23       	and	r24, r24
    10f6:	09 f4       	brne	.+2      	; 0x10fa <__stack+0x7fb>
    10f8:	69 c0       	rjmp	.+210    	; 0x11cc <__stack+0x8cd>
    10fa:	83 ef       	ldi	r24, 0xF3	; 243
    10fc:	90 e0       	ldi	r25, 0x00	; 0
    10fe:	29 85       	ldd	r18, Y+9	; 0x09
    1100:	3a 85       	ldd	r19, Y+10	; 0x0a
    1102:	2e 5f       	subi	r18, 0xFE	; 254
    1104:	3f 4f       	sbci	r19, 0xFF	; 255
    1106:	2d 5f       	subi	r18, 0xFD	; 253
    1108:	3f 4f       	sbci	r19, 0xFF	; 255
    110a:	f9 01       	movw	r30, r18
    110c:	20 81       	ld	r18, Z
    110e:	42 2f       	mov	r20, r18
    1110:	44 0f       	add	r20, r20
    1112:	44 0f       	add	r20, r20
    1114:	44 0f       	add	r20, r20
    1116:	29 85       	ldd	r18, Y+9	; 0x09
    1118:	3a 85       	ldd	r19, Y+10	; 0x0a
    111a:	2e 5f       	subi	r18, 0xFE	; 254
    111c:	3f 4f       	sbci	r19, 0xFF	; 255
    111e:	2e 5f       	subi	r18, 0xFE	; 254
    1120:	3f 4f       	sbci	r19, 0xFF	; 255
    1122:	f9 01       	movw	r30, r18
    1124:	20 81       	ld	r18, Z
    1126:	22 95       	swap	r18
    1128:	26 95       	lsr	r18
    112a:	27 70       	andi	r18, 0x07	; 7
    112c:	24 0f       	add	r18, r20
    112e:	fc 01       	movw	r30, r24
    1130:	20 83       	st	Z, r18
    1132:	82 ef       	ldi	r24, 0xF2	; 242
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	29 85       	ldd	r18, Y+9	; 0x09
    1138:	3a 85       	ldd	r19, Y+10	; 0x0a
    113a:	2e 5f       	subi	r18, 0xFE	; 254
    113c:	3f 4f       	sbci	r19, 0xFF	; 255
    113e:	2e 5f       	subi	r18, 0xFE	; 254
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	f9 01       	movw	r30, r18
    1144:	20 81       	ld	r18, Z
    1146:	42 2f       	mov	r20, r18
    1148:	44 0f       	add	r20, r20
    114a:	44 0f       	add	r20, r20
    114c:	44 0f       	add	r20, r20
    114e:	29 85       	ldd	r18, Y+9	; 0x09
    1150:	3a 85       	ldd	r19, Y+10	; 0x0a
    1152:	2e 5f       	subi	r18, 0xFE	; 254
    1154:	3f 4f       	sbci	r19, 0xFF	; 255
    1156:	2f 5f       	subi	r18, 0xFF	; 255
    1158:	3f 4f       	sbci	r19, 0xFF	; 255
    115a:	f9 01       	movw	r30, r18
    115c:	20 81       	ld	r18, Z
    115e:	22 95       	swap	r18
    1160:	26 95       	lsr	r18
    1162:	27 70       	andi	r18, 0x07	; 7
    1164:	24 0f       	add	r18, r20
    1166:	fc 01       	movw	r30, r24
    1168:	20 83       	st	Z, r18
    116a:	81 ef       	ldi	r24, 0xF1	; 241
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	29 85       	ldd	r18, Y+9	; 0x09
    1170:	3a 85       	ldd	r19, Y+10	; 0x0a
    1172:	2e 5f       	subi	r18, 0xFE	; 254
    1174:	3f 4f       	sbci	r19, 0xFF	; 255
    1176:	2f 5f       	subi	r18, 0xFF	; 255
    1178:	3f 4f       	sbci	r19, 0xFF	; 255
    117a:	f9 01       	movw	r30, r18
    117c:	20 81       	ld	r18, Z
    117e:	42 2f       	mov	r20, r18
    1180:	44 0f       	add	r20, r20
    1182:	44 0f       	add	r20, r20
    1184:	44 0f       	add	r20, r20
    1186:	29 85       	ldd	r18, Y+9	; 0x09
    1188:	3a 85       	ldd	r19, Y+10	; 0x0a
    118a:	2e 5f       	subi	r18, 0xFE	; 254
    118c:	3f 4f       	sbci	r19, 0xFF	; 255
    118e:	f9 01       	movw	r30, r18
    1190:	20 81       	ld	r18, Z
    1192:	22 95       	swap	r18
    1194:	26 95       	lsr	r18
    1196:	27 70       	andi	r18, 0x07	; 7
    1198:	24 0f       	add	r18, r20
    119a:	fc 01       	movw	r30, r24
    119c:	20 83       	st	Z, r18
    119e:	80 ef       	ldi	r24, 0xF0	; 240
    11a0:	90 e0       	ldi	r25, 0x00	; 0
    11a2:	29 85       	ldd	r18, Y+9	; 0x09
    11a4:	3a 85       	ldd	r19, Y+10	; 0x0a
    11a6:	2e 5f       	subi	r18, 0xFE	; 254
    11a8:	3f 4f       	sbci	r19, 0xFF	; 255
    11aa:	f9 01       	movw	r30, r18
    11ac:	20 81       	ld	r18, Z
    11ae:	22 0f       	add	r18, r18
    11b0:	22 0f       	add	r18, r18
    11b2:	22 0f       	add	r18, r18
    11b4:	fc 01       	movw	r30, r24
    11b6:	20 83       	st	Z, r18
    11b8:	8f ee       	ldi	r24, 0xEF	; 239
    11ba:	90 e0       	ldi	r25, 0x00	; 0
    11bc:	2f ee       	ldi	r18, 0xEF	; 239
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	f9 01       	movw	r30, r18
    11c2:	20 81       	ld	r18, Z
    11c4:	20 61       	ori	r18, 0x10	; 16
    11c6:	fc 01       	movw	r30, r24
    11c8:	20 83       	st	Z, r18
    11ca:	30 c0       	rjmp	.+96     	; 0x122c <__stack+0x92d>
          else              { Can_set_std_id(cmd->id.std);}
    11cc:	83 ef       	ldi	r24, 0xF3	; 243
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	29 85       	ldd	r18, Y+9	; 0x09
    11d2:	3a 85       	ldd	r19, Y+10	; 0x0a
    11d4:	2e 5f       	subi	r18, 0xFE	; 254
    11d6:	3f 4f       	sbci	r19, 0xFF	; 255
    11d8:	2f 5f       	subi	r18, 0xFF	; 255
    11da:	3f 4f       	sbci	r19, 0xFF	; 255
    11dc:	f9 01       	movw	r30, r18
    11de:	20 81       	ld	r18, Z
    11e0:	42 2f       	mov	r20, r18
    11e2:	42 95       	swap	r20
    11e4:	44 0f       	add	r20, r20
    11e6:	40 7e       	andi	r20, 0xE0	; 224
    11e8:	29 85       	ldd	r18, Y+9	; 0x09
    11ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    11ec:	2e 5f       	subi	r18, 0xFE	; 254
    11ee:	3f 4f       	sbci	r19, 0xFF	; 255
    11f0:	f9 01       	movw	r30, r18
    11f2:	20 81       	ld	r18, Z
    11f4:	26 95       	lsr	r18
    11f6:	26 95       	lsr	r18
    11f8:	26 95       	lsr	r18
    11fa:	24 0f       	add	r18, r20
    11fc:	fc 01       	movw	r30, r24
    11fe:	20 83       	st	Z, r18
    1200:	82 ef       	ldi	r24, 0xF2	; 242
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	29 85       	ldd	r18, Y+9	; 0x09
    1206:	3a 85       	ldd	r19, Y+10	; 0x0a
    1208:	2e 5f       	subi	r18, 0xFE	; 254
    120a:	3f 4f       	sbci	r19, 0xFF	; 255
    120c:	f9 01       	movw	r30, r18
    120e:	20 81       	ld	r18, Z
    1210:	22 95       	swap	r18
    1212:	22 0f       	add	r18, r18
    1214:	20 7e       	andi	r18, 0xE0	; 224
    1216:	fc 01       	movw	r30, r24
    1218:	20 83       	st	Z, r18
    121a:	8f ee       	ldi	r24, 0xEF	; 239
    121c:	90 e0       	ldi	r25, 0x00	; 0
    121e:	2f ee       	ldi	r18, 0xEF	; 239
    1220:	30 e0       	ldi	r19, 0x00	; 0
    1222:	f9 01       	movw	r30, r18
    1224:	20 81       	ld	r18, Z
    1226:	2f 7e       	andi	r18, 0xEF	; 239
    1228:	fc 01       	movw	r30, r24
    122a:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    122c:	8f ef       	ldi	r24, 0xFF	; 255
    122e:	9f ef       	ldi	r25, 0xFF	; 255
    1230:	dc 01       	movw	r26, r24
    1232:	8d 83       	std	Y+5, r24	; 0x05
    1234:	9e 83       	std	Y+6, r25	; 0x06
    1236:	af 83       	std	Y+7, r26	; 0x07
    1238:	b8 87       	std	Y+8, r27	; 0x08
    123a:	27 ef       	ldi	r18, 0xF7	; 247
    123c:	30 e0       	ldi	r19, 0x00	; 0
    123e:	ce 01       	movw	r24, r28
    1240:	05 96       	adiw	r24, 0x05	; 5
    1242:	03 96       	adiw	r24, 0x03	; 3
    1244:	fc 01       	movw	r30, r24
    1246:	80 81       	ld	r24, Z
    1248:	48 2f       	mov	r20, r24
    124a:	44 0f       	add	r20, r20
    124c:	44 0f       	add	r20, r20
    124e:	44 0f       	add	r20, r20
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	02 96       	adiw	r24, 0x02	; 2
    1256:	fc 01       	movw	r30, r24
    1258:	80 81       	ld	r24, Z
    125a:	82 95       	swap	r24
    125c:	86 95       	lsr	r24
    125e:	87 70       	andi	r24, 0x07	; 7
    1260:	84 0f       	add	r24, r20
    1262:	f9 01       	movw	r30, r18
    1264:	80 83       	st	Z, r24
    1266:	26 ef       	ldi	r18, 0xF6	; 246
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	ce 01       	movw	r24, r28
    126c:	05 96       	adiw	r24, 0x05	; 5
    126e:	02 96       	adiw	r24, 0x02	; 2
    1270:	fc 01       	movw	r30, r24
    1272:	80 81       	ld	r24, Z
    1274:	48 2f       	mov	r20, r24
    1276:	44 0f       	add	r20, r20
    1278:	44 0f       	add	r20, r20
    127a:	44 0f       	add	r20, r20
    127c:	ce 01       	movw	r24, r28
    127e:	05 96       	adiw	r24, 0x05	; 5
    1280:	01 96       	adiw	r24, 0x01	; 1
    1282:	fc 01       	movw	r30, r24
    1284:	80 81       	ld	r24, Z
    1286:	82 95       	swap	r24
    1288:	86 95       	lsr	r24
    128a:	87 70       	andi	r24, 0x07	; 7
    128c:	84 0f       	add	r24, r20
    128e:	f9 01       	movw	r30, r18
    1290:	80 83       	st	Z, r24
    1292:	25 ef       	ldi	r18, 0xF5	; 245
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	ce 01       	movw	r24, r28
    1298:	05 96       	adiw	r24, 0x05	; 5
    129a:	01 96       	adiw	r24, 0x01	; 1
    129c:	fc 01       	movw	r30, r24
    129e:	80 81       	ld	r24, Z
    12a0:	48 2f       	mov	r20, r24
    12a2:	44 0f       	add	r20, r20
    12a4:	44 0f       	add	r20, r20
    12a6:	44 0f       	add	r20, r20
    12a8:	ce 01       	movw	r24, r28
    12aa:	05 96       	adiw	r24, 0x05	; 5
    12ac:	fc 01       	movw	r30, r24
    12ae:	80 81       	ld	r24, Z
    12b0:	82 95       	swap	r24
    12b2:	86 95       	lsr	r24
    12b4:	87 70       	andi	r24, 0x07	; 7
    12b6:	84 0f       	add	r24, r20
    12b8:	f9 01       	movw	r30, r18
    12ba:	80 83       	st	Z, r24
    12bc:	84 ef       	ldi	r24, 0xF4	; 244
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	9e 01       	movw	r18, r28
    12c2:	2b 5f       	subi	r18, 0xFB	; 251
    12c4:	3f 4f       	sbci	r19, 0xFF	; 255
    12c6:	f9 01       	movw	r30, r18
    12c8:	20 81       	ld	r18, Z
    12ca:	22 0f       	add	r18, r18
    12cc:	22 0f       	add	r18, r18
    12ce:	22 0f       	add	r18, r18
    12d0:	fc 01       	movw	r30, r24
    12d2:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    12d4:	8f ee       	ldi	r24, 0xEF	; 239
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	2f ee       	ldi	r18, 0xEF	; 239
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	f9 01       	movw	r30, r18
    12de:	40 81       	ld	r20, Z
    12e0:	29 85       	ldd	r18, Y+9	; 0x09
    12e2:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e4:	f9 01       	movw	r30, r18
    12e6:	26 81       	ldd	r18, Z+6	; 0x06
    12e8:	24 2b       	or	r18, r20
    12ea:	fc 01       	movw	r30, r24
    12ec:	20 83       	st	Z, r18
          cmd->ctrl.rtr=0; Can_set_rtrmsk(); Can_clear_rtr();
    12ee:	89 85       	ldd	r24, Y+9	; 0x09
    12f0:	9a 85       	ldd	r25, Y+10	; 0x0a
    12f2:	fc 01       	movw	r30, r24
    12f4:	12 86       	std	Z+10, r1	; 0x0a
    12f6:	84 ef       	ldi	r24, 0xF4	; 244
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	24 ef       	ldi	r18, 0xF4	; 244
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    12fe:	f9 01       	movw	r30, r18
    1300:	20 81       	ld	r18, Z
    1302:	24 60       	ori	r18, 0x04	; 4
    1304:	fc 01       	movw	r30, r24
    1306:	20 83       	st	Z, r18
    1308:	80 ef       	ldi	r24, 0xF0	; 240
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	20 ef       	ldi	r18, 0xF0	; 240
    130e:	30 e0       	ldi	r19, 0x00	; 0
    1310:	f9 01       	movw	r30, r18
    1312:	20 81       	ld	r18, Z
    1314:	2b 7f       	andi	r18, 0xFB	; 251
    1316:	fc 01       	movw	r30, r24
    1318:	20 83       	st	Z, r18
          Can_set_idemsk();
    131a:	84 ef       	ldi	r24, 0xF4	; 244
    131c:	90 e0       	ldi	r25, 0x00	; 0
    131e:	24 ef       	ldi	r18, 0xF4	; 244
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	f9 01       	movw	r30, r18
    1324:	20 81       	ld	r18, Z
    1326:	21 60       	ori	r18, 0x01	; 1
    1328:	fc 01       	movw	r30, r24
    132a:	20 83       	st	Z, r18
          Can_config_rx();       
    132c:	8f ee       	ldi	r24, 0xEF	; 239
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	2f ee       	ldi	r18, 0xEF	; 239
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	2f 73       	andi	r18, 0x3F	; 63
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18
    133e:	8f ee       	ldi	r24, 0xEF	; 239
    1340:	90 e0       	ldi	r25, 0x00	; 0
    1342:	2f ee       	ldi	r18, 0xEF	; 239
    1344:	30 e0       	ldi	r19, 0x00	; 0
    1346:	f9 01       	movw	r30, r18
    1348:	20 81       	ld	r18, Z
    134a:	20 68       	ori	r18, 0x80	; 128
    134c:	fc 01       	movw	r30, r24
    134e:	20 83       	st	Z, r18
          break;
    1350:	59 c3       	rjmp	.+1714   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_RX_REMOTE_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1352:	89 85       	ldd	r24, Y+9	; 0x09
    1354:	9a 85       	ldd	r25, Y+10	; 0x0a
    1356:	fc 01       	movw	r30, r24
    1358:	83 85       	ldd	r24, Z+11	; 0x0b
    135a:	88 23       	and	r24, r24
    135c:	09 f4       	brne	.+2      	; 0x1360 <__stack+0xa61>
    135e:	69 c0       	rjmp	.+210    	; 0x1432 <__stack+0xb33>
    1360:	83 ef       	ldi	r24, 0xF3	; 243
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	29 85       	ldd	r18, Y+9	; 0x09
    1366:	3a 85       	ldd	r19, Y+10	; 0x0a
    1368:	2e 5f       	subi	r18, 0xFE	; 254
    136a:	3f 4f       	sbci	r19, 0xFF	; 255
    136c:	2d 5f       	subi	r18, 0xFD	; 253
    136e:	3f 4f       	sbci	r19, 0xFF	; 255
    1370:	f9 01       	movw	r30, r18
    1372:	20 81       	ld	r18, Z
    1374:	42 2f       	mov	r20, r18
    1376:	44 0f       	add	r20, r20
    1378:	44 0f       	add	r20, r20
    137a:	44 0f       	add	r20, r20
    137c:	29 85       	ldd	r18, Y+9	; 0x09
    137e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1380:	2e 5f       	subi	r18, 0xFE	; 254
    1382:	3f 4f       	sbci	r19, 0xFF	; 255
    1384:	2e 5f       	subi	r18, 0xFE	; 254
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	f9 01       	movw	r30, r18
    138a:	20 81       	ld	r18, Z
    138c:	22 95       	swap	r18
    138e:	26 95       	lsr	r18
    1390:	27 70       	andi	r18, 0x07	; 7
    1392:	24 0f       	add	r18, r20
    1394:	fc 01       	movw	r30, r24
    1396:	20 83       	st	Z, r18
    1398:	82 ef       	ldi	r24, 0xF2	; 242
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	29 85       	ldd	r18, Y+9	; 0x09
    139e:	3a 85       	ldd	r19, Y+10	; 0x0a
    13a0:	2e 5f       	subi	r18, 0xFE	; 254
    13a2:	3f 4f       	sbci	r19, 0xFF	; 255
    13a4:	2e 5f       	subi	r18, 0xFE	; 254
    13a6:	3f 4f       	sbci	r19, 0xFF	; 255
    13a8:	f9 01       	movw	r30, r18
    13aa:	20 81       	ld	r18, Z
    13ac:	42 2f       	mov	r20, r18
    13ae:	44 0f       	add	r20, r20
    13b0:	44 0f       	add	r20, r20
    13b2:	44 0f       	add	r20, r20
    13b4:	29 85       	ldd	r18, Y+9	; 0x09
    13b6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13b8:	2e 5f       	subi	r18, 0xFE	; 254
    13ba:	3f 4f       	sbci	r19, 0xFF	; 255
    13bc:	2f 5f       	subi	r18, 0xFF	; 255
    13be:	3f 4f       	sbci	r19, 0xFF	; 255
    13c0:	f9 01       	movw	r30, r18
    13c2:	20 81       	ld	r18, Z
    13c4:	22 95       	swap	r18
    13c6:	26 95       	lsr	r18
    13c8:	27 70       	andi	r18, 0x07	; 7
    13ca:	24 0f       	add	r18, r20
    13cc:	fc 01       	movw	r30, r24
    13ce:	20 83       	st	Z, r18
    13d0:	81 ef       	ldi	r24, 0xF1	; 241
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	29 85       	ldd	r18, Y+9	; 0x09
    13d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    13d8:	2e 5f       	subi	r18, 0xFE	; 254
    13da:	3f 4f       	sbci	r19, 0xFF	; 255
    13dc:	2f 5f       	subi	r18, 0xFF	; 255
    13de:	3f 4f       	sbci	r19, 0xFF	; 255
    13e0:	f9 01       	movw	r30, r18
    13e2:	20 81       	ld	r18, Z
    13e4:	42 2f       	mov	r20, r18
    13e6:	44 0f       	add	r20, r20
    13e8:	44 0f       	add	r20, r20
    13ea:	44 0f       	add	r20, r20
    13ec:	29 85       	ldd	r18, Y+9	; 0x09
    13ee:	3a 85       	ldd	r19, Y+10	; 0x0a
    13f0:	2e 5f       	subi	r18, 0xFE	; 254
    13f2:	3f 4f       	sbci	r19, 0xFF	; 255
    13f4:	f9 01       	movw	r30, r18
    13f6:	20 81       	ld	r18, Z
    13f8:	22 95       	swap	r18
    13fa:	26 95       	lsr	r18
    13fc:	27 70       	andi	r18, 0x07	; 7
    13fe:	24 0f       	add	r18, r20
    1400:	fc 01       	movw	r30, r24
    1402:	20 83       	st	Z, r18
    1404:	80 ef       	ldi	r24, 0xF0	; 240
    1406:	90 e0       	ldi	r25, 0x00	; 0
    1408:	29 85       	ldd	r18, Y+9	; 0x09
    140a:	3a 85       	ldd	r19, Y+10	; 0x0a
    140c:	2e 5f       	subi	r18, 0xFE	; 254
    140e:	3f 4f       	sbci	r19, 0xFF	; 255
    1410:	f9 01       	movw	r30, r18
    1412:	20 81       	ld	r18, Z
    1414:	22 0f       	add	r18, r18
    1416:	22 0f       	add	r18, r18
    1418:	22 0f       	add	r18, r18
    141a:	fc 01       	movw	r30, r24
    141c:	20 83       	st	Z, r18
    141e:	8f ee       	ldi	r24, 0xEF	; 239
    1420:	90 e0       	ldi	r25, 0x00	; 0
    1422:	2f ee       	ldi	r18, 0xEF	; 239
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	f9 01       	movw	r30, r18
    1428:	20 81       	ld	r18, Z
    142a:	20 61       	ori	r18, 0x10	; 16
    142c:	fc 01       	movw	r30, r24
    142e:	20 83       	st	Z, r18
    1430:	30 c0       	rjmp	.+96     	; 0x1492 <__stack+0xb93>
          else              { Can_set_std_id(cmd->id.std);}
    1432:	83 ef       	ldi	r24, 0xF3	; 243
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	29 85       	ldd	r18, Y+9	; 0x09
    1438:	3a 85       	ldd	r19, Y+10	; 0x0a
    143a:	2e 5f       	subi	r18, 0xFE	; 254
    143c:	3f 4f       	sbci	r19, 0xFF	; 255
    143e:	2f 5f       	subi	r18, 0xFF	; 255
    1440:	3f 4f       	sbci	r19, 0xFF	; 255
    1442:	f9 01       	movw	r30, r18
    1444:	20 81       	ld	r18, Z
    1446:	42 2f       	mov	r20, r18
    1448:	42 95       	swap	r20
    144a:	44 0f       	add	r20, r20
    144c:	40 7e       	andi	r20, 0xE0	; 224
    144e:	29 85       	ldd	r18, Y+9	; 0x09
    1450:	3a 85       	ldd	r19, Y+10	; 0x0a
    1452:	2e 5f       	subi	r18, 0xFE	; 254
    1454:	3f 4f       	sbci	r19, 0xFF	; 255
    1456:	f9 01       	movw	r30, r18
    1458:	20 81       	ld	r18, Z
    145a:	26 95       	lsr	r18
    145c:	26 95       	lsr	r18
    145e:	26 95       	lsr	r18
    1460:	24 0f       	add	r18, r20
    1462:	fc 01       	movw	r30, r24
    1464:	20 83       	st	Z, r18
    1466:	82 ef       	ldi	r24, 0xF2	; 242
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	29 85       	ldd	r18, Y+9	; 0x09
    146c:	3a 85       	ldd	r19, Y+10	; 0x0a
    146e:	2e 5f       	subi	r18, 0xFE	; 254
    1470:	3f 4f       	sbci	r19, 0xFF	; 255
    1472:	f9 01       	movw	r30, r18
    1474:	20 81       	ld	r18, Z
    1476:	22 95       	swap	r18
    1478:	22 0f       	add	r18, r18
    147a:	20 7e       	andi	r18, 0xE0	; 224
    147c:	fc 01       	movw	r30, r24
    147e:	20 83       	st	Z, r18
    1480:	8f ee       	ldi	r24, 0xEF	; 239
    1482:	90 e0       	ldi	r25, 0x00	; 0
    1484:	2f ee       	ldi	r18, 0xEF	; 239
    1486:	30 e0       	ldi	r19, 0x00	; 0
    1488:	f9 01       	movw	r30, r18
    148a:	20 81       	ld	r18, Z
    148c:	2f 7e       	andi	r18, 0xEF	; 239
    148e:	fc 01       	movw	r30, r24
    1490:	20 83       	st	Z, r18
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    1492:	8f ef       	ldi	r24, 0xFF	; 255
    1494:	9f ef       	ldi	r25, 0xFF	; 255
    1496:	dc 01       	movw	r26, r24
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	9e 83       	std	Y+6, r25	; 0x06
    149c:	af 83       	std	Y+7, r26	; 0x07
    149e:	b8 87       	std	Y+8, r27	; 0x08
    14a0:	27 ef       	ldi	r18, 0xF7	; 247
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	ce 01       	movw	r24, r28
    14a6:	05 96       	adiw	r24, 0x05	; 5
    14a8:	03 96       	adiw	r24, 0x03	; 3
    14aa:	fc 01       	movw	r30, r24
    14ac:	80 81       	ld	r24, Z
    14ae:	48 2f       	mov	r20, r24
    14b0:	44 0f       	add	r20, r20
    14b2:	44 0f       	add	r20, r20
    14b4:	44 0f       	add	r20, r20
    14b6:	ce 01       	movw	r24, r28
    14b8:	05 96       	adiw	r24, 0x05	; 5
    14ba:	02 96       	adiw	r24, 0x02	; 2
    14bc:	fc 01       	movw	r30, r24
    14be:	80 81       	ld	r24, Z
    14c0:	82 95       	swap	r24
    14c2:	86 95       	lsr	r24
    14c4:	87 70       	andi	r24, 0x07	; 7
    14c6:	84 0f       	add	r24, r20
    14c8:	f9 01       	movw	r30, r18
    14ca:	80 83       	st	Z, r24
    14cc:	26 ef       	ldi	r18, 0xF6	; 246
    14ce:	30 e0       	ldi	r19, 0x00	; 0
    14d0:	ce 01       	movw	r24, r28
    14d2:	05 96       	adiw	r24, 0x05	; 5
    14d4:	02 96       	adiw	r24, 0x02	; 2
    14d6:	fc 01       	movw	r30, r24
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	44 0f       	add	r20, r20
    14de:	44 0f       	add	r20, r20
    14e0:	44 0f       	add	r20, r20
    14e2:	ce 01       	movw	r24, r28
    14e4:	05 96       	adiw	r24, 0x05	; 5
    14e6:	01 96       	adiw	r24, 0x01	; 1
    14e8:	fc 01       	movw	r30, r24
    14ea:	80 81       	ld	r24, Z
    14ec:	82 95       	swap	r24
    14ee:	86 95       	lsr	r24
    14f0:	87 70       	andi	r24, 0x07	; 7
    14f2:	84 0f       	add	r24, r20
    14f4:	f9 01       	movw	r30, r18
    14f6:	80 83       	st	Z, r24
    14f8:	25 ef       	ldi	r18, 0xF5	; 245
    14fa:	30 e0       	ldi	r19, 0x00	; 0
    14fc:	ce 01       	movw	r24, r28
    14fe:	05 96       	adiw	r24, 0x05	; 5
    1500:	01 96       	adiw	r24, 0x01	; 1
    1502:	fc 01       	movw	r30, r24
    1504:	80 81       	ld	r24, Z
    1506:	48 2f       	mov	r20, r24
    1508:	44 0f       	add	r20, r20
    150a:	44 0f       	add	r20, r20
    150c:	44 0f       	add	r20, r20
    150e:	ce 01       	movw	r24, r28
    1510:	05 96       	adiw	r24, 0x05	; 5
    1512:	fc 01       	movw	r30, r24
    1514:	80 81       	ld	r24, Z
    1516:	82 95       	swap	r24
    1518:	86 95       	lsr	r24
    151a:	87 70       	andi	r24, 0x07	; 7
    151c:	84 0f       	add	r24, r20
    151e:	f9 01       	movw	r30, r18
    1520:	80 83       	st	Z, r24
    1522:	84 ef       	ldi	r24, 0xF4	; 244
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9e 01       	movw	r18, r28
    1528:	2b 5f       	subi	r18, 0xFB	; 251
    152a:	3f 4f       	sbci	r19, 0xFF	; 255
    152c:	f9 01       	movw	r30, r18
    152e:	20 81       	ld	r18, Z
    1530:	22 0f       	add	r18, r18
    1532:	22 0f       	add	r18, r18
    1534:	22 0f       	add	r18, r18
    1536:	fc 01       	movw	r30, r24
    1538:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    153a:	8f ee       	ldi	r24, 0xEF	; 239
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	2f ee       	ldi	r18, 0xEF	; 239
    1540:	30 e0       	ldi	r19, 0x00	; 0
    1542:	f9 01       	movw	r30, r18
    1544:	40 81       	ld	r20, Z
    1546:	29 85       	ldd	r18, Y+9	; 0x09
    1548:	3a 85       	ldd	r19, Y+10	; 0x0a
    154a:	f9 01       	movw	r30, r18
    154c:	26 81       	ldd	r18, Z+6	; 0x06
    154e:	24 2b       	or	r18, r20
    1550:	fc 01       	movw	r30, r24
    1552:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1554:	89 85       	ldd	r24, Y+9	; 0x09
    1556:	9a 85       	ldd	r25, Y+10	; 0x0a
    1558:	21 e0       	ldi	r18, 0x01	; 1
    155a:	fc 01       	movw	r30, r24
    155c:	22 87       	std	Z+10, r18	; 0x0a
    155e:	84 ef       	ldi	r24, 0xF4	; 244
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	24 ef       	ldi	r18, 0xF4	; 244
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	20 81       	ld	r18, Z
    156a:	24 60       	ori	r18, 0x04	; 4
    156c:	fc 01       	movw	r30, r24
    156e:	20 83       	st	Z, r18
    1570:	80 ef       	ldi	r24, 0xF0	; 240
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	20 ef       	ldi	r18, 0xF0	; 240
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	f9 01       	movw	r30, r18
    157a:	20 81       	ld	r18, Z
    157c:	24 60       	ori	r18, 0x04	; 4
    157e:	fc 01       	movw	r30, r24
    1580:	20 83       	st	Z, r18
          Can_clear_rplv();
    1582:	8f ee       	ldi	r24, 0xEF	; 239
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	2f ee       	ldi	r18, 0xEF	; 239
    1588:	30 e0       	ldi	r19, 0x00	; 0
    158a:	f9 01       	movw	r30, r18
    158c:	20 81       	ld	r18, Z
    158e:	2f 7d       	andi	r18, 0xDF	; 223
    1590:	fc 01       	movw	r30, r24
    1592:	20 83       	st	Z, r18
          Can_set_idemsk();
    1594:	84 ef       	ldi	r24, 0xF4	; 244
    1596:	90 e0       	ldi	r25, 0x00	; 0
    1598:	24 ef       	ldi	r18, 0xF4	; 244
    159a:	30 e0       	ldi	r19, 0x00	; 0
    159c:	f9 01       	movw	r30, r18
    159e:	20 81       	ld	r18, Z
    15a0:	21 60       	ori	r18, 0x01	; 1
    15a2:	fc 01       	movw	r30, r24
    15a4:	20 83       	st	Z, r18
          Can_config_rx();       
    15a6:	8f ee       	ldi	r24, 0xEF	; 239
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	2f ee       	ldi	r18, 0xEF	; 239
    15ac:	30 e0       	ldi	r19, 0x00	; 0
    15ae:	f9 01       	movw	r30, r18
    15b0:	20 81       	ld	r18, Z
    15b2:	2f 73       	andi	r18, 0x3F	; 63
    15b4:	fc 01       	movw	r30, r24
    15b6:	20 83       	st	Z, r18
    15b8:	8f ee       	ldi	r24, 0xEF	; 239
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	2f ee       	ldi	r18, 0xEF	; 239
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	f9 01       	movw	r30, r18
    15c2:	20 81       	ld	r18, Z
    15c4:	20 68       	ori	r18, 0x80	; 128
    15c6:	fc 01       	movw	r30, r24
    15c8:	20 83       	st	Z, r18
          break;
    15ca:	1c c2       	rjmp	.+1080   	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_REPLY:
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    15cc:	19 82       	std	Y+1, r1	; 0x01
    15ce:	13 c0       	rjmp	.+38     	; 0x15f6 <__stack+0xcf7>
    15d0:	8a ef       	ldi	r24, 0xFA	; 250
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	29 85       	ldd	r18, Y+9	; 0x09
    15d6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15d8:	f9 01       	movw	r30, r18
    15da:	47 81       	ldd	r20, Z+7	; 0x07
    15dc:	50 85       	ldd	r21, Z+8	; 0x08
    15de:	29 81       	ldd	r18, Y+1	; 0x01
    15e0:	22 2f       	mov	r18, r18
    15e2:	30 e0       	ldi	r19, 0x00	; 0
    15e4:	24 0f       	add	r18, r20
    15e6:	35 1f       	adc	r19, r21
    15e8:	f9 01       	movw	r30, r18
    15ea:	20 81       	ld	r18, Z
    15ec:	fc 01       	movw	r30, r24
    15ee:	20 83       	st	Z, r18
    15f0:	89 81       	ldd	r24, Y+1	; 0x01
    15f2:	8f 5f       	subi	r24, 0xFF	; 255
    15f4:	89 83       	std	Y+1, r24	; 0x01
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	fc 01       	movw	r30, r24
    15fc:	96 81       	ldd	r25, Z+6	; 0x06
    15fe:	89 81       	ldd	r24, Y+1	; 0x01
    1600:	89 17       	cp	r24, r25
    1602:	30 f3       	brcs	.-52     	; 0x15d0 <__stack+0xcd1>
          u32_temp=0; Can_set_ext_msk(u32_temp);
    1604:	1d 82       	std	Y+5, r1	; 0x05
    1606:	1e 82       	std	Y+6, r1	; 0x06
    1608:	1f 82       	std	Y+7, r1	; 0x07
    160a:	18 86       	std	Y+8, r1	; 0x08
    160c:	27 ef       	ldi	r18, 0xF7	; 247
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	ce 01       	movw	r24, r28
    1612:	05 96       	adiw	r24, 0x05	; 5
    1614:	03 96       	adiw	r24, 0x03	; 3
    1616:	fc 01       	movw	r30, r24
    1618:	80 81       	ld	r24, Z
    161a:	48 2f       	mov	r20, r24
    161c:	44 0f       	add	r20, r20
    161e:	44 0f       	add	r20, r20
    1620:	44 0f       	add	r20, r20
    1622:	ce 01       	movw	r24, r28
    1624:	05 96       	adiw	r24, 0x05	; 5
    1626:	02 96       	adiw	r24, 0x02	; 2
    1628:	fc 01       	movw	r30, r24
    162a:	80 81       	ld	r24, Z
    162c:	82 95       	swap	r24
    162e:	86 95       	lsr	r24
    1630:	87 70       	andi	r24, 0x07	; 7
    1632:	84 0f       	add	r24, r20
    1634:	f9 01       	movw	r30, r18
    1636:	80 83       	st	Z, r24
    1638:	26 ef       	ldi	r18, 0xF6	; 246
    163a:	30 e0       	ldi	r19, 0x00	; 0
    163c:	ce 01       	movw	r24, r28
    163e:	05 96       	adiw	r24, 0x05	; 5
    1640:	02 96       	adiw	r24, 0x02	; 2
    1642:	fc 01       	movw	r30, r24
    1644:	80 81       	ld	r24, Z
    1646:	48 2f       	mov	r20, r24
    1648:	44 0f       	add	r20, r20
    164a:	44 0f       	add	r20, r20
    164c:	44 0f       	add	r20, r20
    164e:	ce 01       	movw	r24, r28
    1650:	05 96       	adiw	r24, 0x05	; 5
    1652:	01 96       	adiw	r24, 0x01	; 1
    1654:	fc 01       	movw	r30, r24
    1656:	80 81       	ld	r24, Z
    1658:	82 95       	swap	r24
    165a:	86 95       	lsr	r24
    165c:	87 70       	andi	r24, 0x07	; 7
    165e:	84 0f       	add	r24, r20
    1660:	f9 01       	movw	r30, r18
    1662:	80 83       	st	Z, r24
    1664:	25 ef       	ldi	r18, 0xF5	; 245
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	ce 01       	movw	r24, r28
    166a:	05 96       	adiw	r24, 0x05	; 5
    166c:	01 96       	adiw	r24, 0x01	; 1
    166e:	fc 01       	movw	r30, r24
    1670:	80 81       	ld	r24, Z
    1672:	48 2f       	mov	r20, r24
    1674:	44 0f       	add	r20, r20
    1676:	44 0f       	add	r20, r20
    1678:	44 0f       	add	r20, r20
    167a:	ce 01       	movw	r24, r28
    167c:	05 96       	adiw	r24, 0x05	; 5
    167e:	fc 01       	movw	r30, r24
    1680:	80 81       	ld	r24, Z
    1682:	82 95       	swap	r24
    1684:	86 95       	lsr	r24
    1686:	87 70       	andi	r24, 0x07	; 7
    1688:	84 0f       	add	r24, r20
    168a:	f9 01       	movw	r30, r18
    168c:	80 83       	st	Z, r24
    168e:	84 ef       	ldi	r24, 0xF4	; 244
    1690:	90 e0       	ldi	r25, 0x00	; 0
    1692:	9e 01       	movw	r18, r28
    1694:	2b 5f       	subi	r18, 0xFB	; 251
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	f9 01       	movw	r30, r18
    169a:	20 81       	ld	r18, Z
    169c:	22 0f       	add	r18, r18
    169e:	22 0f       	add	r18, r18
    16a0:	22 0f       	add	r18, r18
    16a2:	fc 01       	movw	r30, r24
    16a4:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    16a6:	8f ee       	ldi	r24, 0xEF	; 239
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	2f ee       	ldi	r18, 0xEF	; 239
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	f9 01       	movw	r30, r18
    16b0:	40 81       	ld	r20, Z
    16b2:	29 85       	ldd	r18, Y+9	; 0x09
    16b4:	3a 85       	ldd	r19, Y+10	; 0x0a
    16b6:	f9 01       	movw	r30, r18
    16b8:	26 81       	ldd	r18, Z+6	; 0x06
    16ba:	24 2b       	or	r18, r20
    16bc:	fc 01       	movw	r30, r24
    16be:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    16c0:	89 85       	ldd	r24, Y+9	; 0x09
    16c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c4:	21 e0       	ldi	r18, 0x01	; 1
    16c6:	fc 01       	movw	r30, r24
    16c8:	22 87       	std	Z+10, r18	; 0x0a
    16ca:	84 ef       	ldi	r24, 0xF4	; 244
    16cc:	90 e0       	ldi	r25, 0x00	; 0
    16ce:	24 ef       	ldi	r18, 0xF4	; 244
    16d0:	30 e0       	ldi	r19, 0x00	; 0
    16d2:	f9 01       	movw	r30, r18
    16d4:	20 81       	ld	r18, Z
    16d6:	24 60       	ori	r18, 0x04	; 4
    16d8:	fc 01       	movw	r30, r24
    16da:	20 83       	st	Z, r18
    16dc:	80 ef       	ldi	r24, 0xF0	; 240
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	20 ef       	ldi	r18, 0xF0	; 240
    16e2:	30 e0       	ldi	r19, 0x00	; 0
    16e4:	f9 01       	movw	r30, r18
    16e6:	20 81       	ld	r18, Z
    16e8:	24 60       	ori	r18, 0x04	; 4
    16ea:	fc 01       	movw	r30, r24
    16ec:	20 83       	st	Z, r18
          Can_set_rplv();
    16ee:	8f ee       	ldi	r24, 0xEF	; 239
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	2f ee       	ldi	r18, 0xEF	; 239
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	f9 01       	movw	r30, r18
    16f8:	20 81       	ld	r18, Z
    16fa:	20 62       	ori	r18, 0x20	; 32
    16fc:	fc 01       	movw	r30, r24
    16fe:	20 83       	st	Z, r18
          Can_clear_idemsk();
    1700:	84 ef       	ldi	r24, 0xF4	; 244
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	24 ef       	ldi	r18, 0xF4	; 244
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	f9 01       	movw	r30, r18
    170a:	20 81       	ld	r18, Z
    170c:	2e 7f       	andi	r18, 0xFE	; 254
    170e:	fc 01       	movw	r30, r24
    1710:	20 83       	st	Z, r18
          Can_config_rx();       
    1712:	8f ee       	ldi	r24, 0xEF	; 239
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	2f ee       	ldi	r18, 0xEF	; 239
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	f9 01       	movw	r30, r18
    171c:	20 81       	ld	r18, Z
    171e:	2f 73       	andi	r18, 0x3F	; 63
    1720:	fc 01       	movw	r30, r24
    1722:	20 83       	st	Z, r18
    1724:	8f ee       	ldi	r24, 0xEF	; 239
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	2f ee       	ldi	r18, 0xEF	; 239
    172a:	30 e0       	ldi	r19, 0x00	; 0
    172c:	f9 01       	movw	r30, r18
    172e:	20 81       	ld	r18, Z
    1730:	20 68       	ori	r18, 0x80	; 128
    1732:	fc 01       	movw	r30, r24
    1734:	20 83       	st	Z, r18
          break;
    1736:	66 c1       	rjmp	.+716    	; 0x1a04 <__stack+0x1105>
        //------------      
        case CMD_REPLY_MASKED:
          if (cmd->ctrl.ide){ Can_set_ext_id(cmd->id.ext);}
    1738:	89 85       	ldd	r24, Y+9	; 0x09
    173a:	9a 85       	ldd	r25, Y+10	; 0x0a
    173c:	fc 01       	movw	r30, r24
    173e:	83 85       	ldd	r24, Z+11	; 0x0b
    1740:	88 23       	and	r24, r24
    1742:	09 f4       	brne	.+2      	; 0x1746 <__stack+0xe47>
    1744:	69 c0       	rjmp	.+210    	; 0x1818 <__stack+0xf19>
    1746:	83 ef       	ldi	r24, 0xF3	; 243
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	29 85       	ldd	r18, Y+9	; 0x09
    174c:	3a 85       	ldd	r19, Y+10	; 0x0a
    174e:	2e 5f       	subi	r18, 0xFE	; 254
    1750:	3f 4f       	sbci	r19, 0xFF	; 255
    1752:	2d 5f       	subi	r18, 0xFD	; 253
    1754:	3f 4f       	sbci	r19, 0xFF	; 255
    1756:	f9 01       	movw	r30, r18
    1758:	20 81       	ld	r18, Z
    175a:	42 2f       	mov	r20, r18
    175c:	44 0f       	add	r20, r20
    175e:	44 0f       	add	r20, r20
    1760:	44 0f       	add	r20, r20
    1762:	29 85       	ldd	r18, Y+9	; 0x09
    1764:	3a 85       	ldd	r19, Y+10	; 0x0a
    1766:	2e 5f       	subi	r18, 0xFE	; 254
    1768:	3f 4f       	sbci	r19, 0xFF	; 255
    176a:	2e 5f       	subi	r18, 0xFE	; 254
    176c:	3f 4f       	sbci	r19, 0xFF	; 255
    176e:	f9 01       	movw	r30, r18
    1770:	20 81       	ld	r18, Z
    1772:	22 95       	swap	r18
    1774:	26 95       	lsr	r18
    1776:	27 70       	andi	r18, 0x07	; 7
    1778:	24 0f       	add	r18, r20
    177a:	fc 01       	movw	r30, r24
    177c:	20 83       	st	Z, r18
    177e:	82 ef       	ldi	r24, 0xF2	; 242
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	29 85       	ldd	r18, Y+9	; 0x09
    1784:	3a 85       	ldd	r19, Y+10	; 0x0a
    1786:	2e 5f       	subi	r18, 0xFE	; 254
    1788:	3f 4f       	sbci	r19, 0xFF	; 255
    178a:	2e 5f       	subi	r18, 0xFE	; 254
    178c:	3f 4f       	sbci	r19, 0xFF	; 255
    178e:	f9 01       	movw	r30, r18
    1790:	20 81       	ld	r18, Z
    1792:	42 2f       	mov	r20, r18
    1794:	44 0f       	add	r20, r20
    1796:	44 0f       	add	r20, r20
    1798:	44 0f       	add	r20, r20
    179a:	29 85       	ldd	r18, Y+9	; 0x09
    179c:	3a 85       	ldd	r19, Y+10	; 0x0a
    179e:	2e 5f       	subi	r18, 0xFE	; 254
    17a0:	3f 4f       	sbci	r19, 0xFF	; 255
    17a2:	2f 5f       	subi	r18, 0xFF	; 255
    17a4:	3f 4f       	sbci	r19, 0xFF	; 255
    17a6:	f9 01       	movw	r30, r18
    17a8:	20 81       	ld	r18, Z
    17aa:	22 95       	swap	r18
    17ac:	26 95       	lsr	r18
    17ae:	27 70       	andi	r18, 0x07	; 7
    17b0:	24 0f       	add	r18, r20
    17b2:	fc 01       	movw	r30, r24
    17b4:	20 83       	st	Z, r18
    17b6:	81 ef       	ldi	r24, 0xF1	; 241
    17b8:	90 e0       	ldi	r25, 0x00	; 0
    17ba:	29 85       	ldd	r18, Y+9	; 0x09
    17bc:	3a 85       	ldd	r19, Y+10	; 0x0a
    17be:	2e 5f       	subi	r18, 0xFE	; 254
    17c0:	3f 4f       	sbci	r19, 0xFF	; 255
    17c2:	2f 5f       	subi	r18, 0xFF	; 255
    17c4:	3f 4f       	sbci	r19, 0xFF	; 255
    17c6:	f9 01       	movw	r30, r18
    17c8:	20 81       	ld	r18, Z
    17ca:	42 2f       	mov	r20, r18
    17cc:	44 0f       	add	r20, r20
    17ce:	44 0f       	add	r20, r20
    17d0:	44 0f       	add	r20, r20
    17d2:	29 85       	ldd	r18, Y+9	; 0x09
    17d4:	3a 85       	ldd	r19, Y+10	; 0x0a
    17d6:	2e 5f       	subi	r18, 0xFE	; 254
    17d8:	3f 4f       	sbci	r19, 0xFF	; 255
    17da:	f9 01       	movw	r30, r18
    17dc:	20 81       	ld	r18, Z
    17de:	22 95       	swap	r18
    17e0:	26 95       	lsr	r18
    17e2:	27 70       	andi	r18, 0x07	; 7
    17e4:	24 0f       	add	r18, r20
    17e6:	fc 01       	movw	r30, r24
    17e8:	20 83       	st	Z, r18
    17ea:	80 ef       	ldi	r24, 0xF0	; 240
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	29 85       	ldd	r18, Y+9	; 0x09
    17f0:	3a 85       	ldd	r19, Y+10	; 0x0a
    17f2:	2e 5f       	subi	r18, 0xFE	; 254
    17f4:	3f 4f       	sbci	r19, 0xFF	; 255
    17f6:	f9 01       	movw	r30, r18
    17f8:	20 81       	ld	r18, Z
    17fa:	22 0f       	add	r18, r18
    17fc:	22 0f       	add	r18, r18
    17fe:	22 0f       	add	r18, r18
    1800:	fc 01       	movw	r30, r24
    1802:	20 83       	st	Z, r18
    1804:	8f ee       	ldi	r24, 0xEF	; 239
    1806:	90 e0       	ldi	r25, 0x00	; 0
    1808:	2f ee       	ldi	r18, 0xEF	; 239
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	f9 01       	movw	r30, r18
    180e:	20 81       	ld	r18, Z
    1810:	20 61       	ori	r18, 0x10	; 16
    1812:	fc 01       	movw	r30, r24
    1814:	20 83       	st	Z, r18
    1816:	30 c0       	rjmp	.+96     	; 0x1878 <__stack+0xf79>
          else              { Can_set_std_id(cmd->id.std);}
    1818:	83 ef       	ldi	r24, 0xF3	; 243
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	29 85       	ldd	r18, Y+9	; 0x09
    181e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1820:	2e 5f       	subi	r18, 0xFE	; 254
    1822:	3f 4f       	sbci	r19, 0xFF	; 255
    1824:	2f 5f       	subi	r18, 0xFF	; 255
    1826:	3f 4f       	sbci	r19, 0xFF	; 255
    1828:	f9 01       	movw	r30, r18
    182a:	20 81       	ld	r18, Z
    182c:	42 2f       	mov	r20, r18
    182e:	42 95       	swap	r20
    1830:	44 0f       	add	r20, r20
    1832:	40 7e       	andi	r20, 0xE0	; 224
    1834:	29 85       	ldd	r18, Y+9	; 0x09
    1836:	3a 85       	ldd	r19, Y+10	; 0x0a
    1838:	2e 5f       	subi	r18, 0xFE	; 254
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	f9 01       	movw	r30, r18
    183e:	20 81       	ld	r18, Z
    1840:	26 95       	lsr	r18
    1842:	26 95       	lsr	r18
    1844:	26 95       	lsr	r18
    1846:	24 0f       	add	r18, r20
    1848:	fc 01       	movw	r30, r24
    184a:	20 83       	st	Z, r18
    184c:	82 ef       	ldi	r24, 0xF2	; 242
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	29 85       	ldd	r18, Y+9	; 0x09
    1852:	3a 85       	ldd	r19, Y+10	; 0x0a
    1854:	2e 5f       	subi	r18, 0xFE	; 254
    1856:	3f 4f       	sbci	r19, 0xFF	; 255
    1858:	f9 01       	movw	r30, r18
    185a:	20 81       	ld	r18, Z
    185c:	22 95       	swap	r18
    185e:	22 0f       	add	r18, r18
    1860:	20 7e       	andi	r18, 0xE0	; 224
    1862:	fc 01       	movw	r30, r24
    1864:	20 83       	st	Z, r18
    1866:	8f ee       	ldi	r24, 0xEF	; 239
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	2f ee       	ldi	r18, 0xEF	; 239
    186c:	30 e0       	ldi	r19, 0x00	; 0
    186e:	f9 01       	movw	r30, r18
    1870:	20 81       	ld	r18, Z
    1872:	2f 7e       	andi	r18, 0xEF	; 239
    1874:	fc 01       	movw	r30, r24
    1876:	20 83       	st	Z, r18
          for (cpt=0;cpt<cmd->dlc;cpt++) CANMSG = *(cmd->pt_data + cpt);
    1878:	19 82       	std	Y+1, r1	; 0x01
    187a:	13 c0       	rjmp	.+38     	; 0x18a2 <__stack+0xfa3>
    187c:	8a ef       	ldi	r24, 0xFA	; 250
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	29 85       	ldd	r18, Y+9	; 0x09
    1882:	3a 85       	ldd	r19, Y+10	; 0x0a
    1884:	f9 01       	movw	r30, r18
    1886:	47 81       	ldd	r20, Z+7	; 0x07
    1888:	50 85       	ldd	r21, Z+8	; 0x08
    188a:	29 81       	ldd	r18, Y+1	; 0x01
    188c:	22 2f       	mov	r18, r18
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	24 0f       	add	r18, r20
    1892:	35 1f       	adc	r19, r21
    1894:	f9 01       	movw	r30, r18
    1896:	20 81       	ld	r18, Z
    1898:	fc 01       	movw	r30, r24
    189a:	20 83       	st	Z, r18
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	8f 5f       	subi	r24, 0xFF	; 255
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	89 85       	ldd	r24, Y+9	; 0x09
    18a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a6:	fc 01       	movw	r30, r24
    18a8:	96 81       	ldd	r25, Z+6	; 0x06
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	89 17       	cp	r24, r25
    18ae:	30 f3       	brcs	.-52     	; 0x187c <__stack+0xf7d>
          u32_temp=~0; Can_set_ext_msk(u32_temp);
    18b0:	8f ef       	ldi	r24, 0xFF	; 255
    18b2:	9f ef       	ldi	r25, 0xFF	; 255
    18b4:	dc 01       	movw	r26, r24
    18b6:	8d 83       	std	Y+5, r24	; 0x05
    18b8:	9e 83       	std	Y+6, r25	; 0x06
    18ba:	af 83       	std	Y+7, r26	; 0x07
    18bc:	b8 87       	std	Y+8, r27	; 0x08
    18be:	27 ef       	ldi	r18, 0xF7	; 247
    18c0:	30 e0       	ldi	r19, 0x00	; 0
    18c2:	ce 01       	movw	r24, r28
    18c4:	05 96       	adiw	r24, 0x05	; 5
    18c6:	03 96       	adiw	r24, 0x03	; 3
    18c8:	fc 01       	movw	r30, r24
    18ca:	80 81       	ld	r24, Z
    18cc:	48 2f       	mov	r20, r24
    18ce:	44 0f       	add	r20, r20
    18d0:	44 0f       	add	r20, r20
    18d2:	44 0f       	add	r20, r20
    18d4:	ce 01       	movw	r24, r28
    18d6:	05 96       	adiw	r24, 0x05	; 5
    18d8:	02 96       	adiw	r24, 0x02	; 2
    18da:	fc 01       	movw	r30, r24
    18dc:	80 81       	ld	r24, Z
    18de:	82 95       	swap	r24
    18e0:	86 95       	lsr	r24
    18e2:	87 70       	andi	r24, 0x07	; 7
    18e4:	84 0f       	add	r24, r20
    18e6:	f9 01       	movw	r30, r18
    18e8:	80 83       	st	Z, r24
    18ea:	26 ef       	ldi	r18, 0xF6	; 246
    18ec:	30 e0       	ldi	r19, 0x00	; 0
    18ee:	ce 01       	movw	r24, r28
    18f0:	05 96       	adiw	r24, 0x05	; 5
    18f2:	02 96       	adiw	r24, 0x02	; 2
    18f4:	fc 01       	movw	r30, r24
    18f6:	80 81       	ld	r24, Z
    18f8:	48 2f       	mov	r20, r24
    18fa:	44 0f       	add	r20, r20
    18fc:	44 0f       	add	r20, r20
    18fe:	44 0f       	add	r20, r20
    1900:	ce 01       	movw	r24, r28
    1902:	05 96       	adiw	r24, 0x05	; 5
    1904:	01 96       	adiw	r24, 0x01	; 1
    1906:	fc 01       	movw	r30, r24
    1908:	80 81       	ld	r24, Z
    190a:	82 95       	swap	r24
    190c:	86 95       	lsr	r24
    190e:	87 70       	andi	r24, 0x07	; 7
    1910:	84 0f       	add	r24, r20
    1912:	f9 01       	movw	r30, r18
    1914:	80 83       	st	Z, r24
    1916:	25 ef       	ldi	r18, 0xF5	; 245
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	ce 01       	movw	r24, r28
    191c:	05 96       	adiw	r24, 0x05	; 5
    191e:	01 96       	adiw	r24, 0x01	; 1
    1920:	fc 01       	movw	r30, r24
    1922:	80 81       	ld	r24, Z
    1924:	48 2f       	mov	r20, r24
    1926:	44 0f       	add	r20, r20
    1928:	44 0f       	add	r20, r20
    192a:	44 0f       	add	r20, r20
    192c:	ce 01       	movw	r24, r28
    192e:	05 96       	adiw	r24, 0x05	; 5
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	82 95       	swap	r24
    1936:	86 95       	lsr	r24
    1938:	87 70       	andi	r24, 0x07	; 7
    193a:	84 0f       	add	r24, r20
    193c:	f9 01       	movw	r30, r18
    193e:	80 83       	st	Z, r24
    1940:	84 ef       	ldi	r24, 0xF4	; 244
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	9e 01       	movw	r18, r28
    1946:	2b 5f       	subi	r18, 0xFB	; 251
    1948:	3f 4f       	sbci	r19, 0xFF	; 255
    194a:	f9 01       	movw	r30, r18
    194c:	20 81       	ld	r18, Z
    194e:	22 0f       	add	r18, r18
    1950:	22 0f       	add	r18, r18
    1952:	22 0f       	add	r18, r18
    1954:	fc 01       	movw	r30, r24
    1956:	20 83       	st	Z, r18
          Can_set_dlc(cmd->dlc);
    1958:	8f ee       	ldi	r24, 0xEF	; 239
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	2f ee       	ldi	r18, 0xEF	; 239
    195e:	30 e0       	ldi	r19, 0x00	; 0
    1960:	f9 01       	movw	r30, r18
    1962:	40 81       	ld	r20, Z
    1964:	29 85       	ldd	r18, Y+9	; 0x09
    1966:	3a 85       	ldd	r19, Y+10	; 0x0a
    1968:	f9 01       	movw	r30, r18
    196a:	26 81       	ldd	r18, Z+6	; 0x06
    196c:	24 2b       	or	r18, r20
    196e:	fc 01       	movw	r30, r24
    1970:	20 83       	st	Z, r18
          cmd->ctrl.rtr=1; Can_set_rtrmsk(); Can_set_rtr();
    1972:	89 85       	ldd	r24, Y+9	; 0x09
    1974:	9a 85       	ldd	r25, Y+10	; 0x0a
    1976:	21 e0       	ldi	r18, 0x01	; 1
    1978:	fc 01       	movw	r30, r24
    197a:	22 87       	std	Z+10, r18	; 0x0a
    197c:	84 ef       	ldi	r24, 0xF4	; 244
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	24 ef       	ldi	r18, 0xF4	; 244
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	f9 01       	movw	r30, r18
    1986:	20 81       	ld	r18, Z
    1988:	24 60       	ori	r18, 0x04	; 4
    198a:	fc 01       	movw	r30, r24
    198c:	20 83       	st	Z, r18
    198e:	80 ef       	ldi	r24, 0xF0	; 240
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	20 ef       	ldi	r18, 0xF0	; 240
    1994:	30 e0       	ldi	r19, 0x00	; 0
    1996:	f9 01       	movw	r30, r18
    1998:	20 81       	ld	r18, Z
    199a:	24 60       	ori	r18, 0x04	; 4
    199c:	fc 01       	movw	r30, r24
    199e:	20 83       	st	Z, r18
          Can_set_rplv();
    19a0:	8f ee       	ldi	r24, 0xEF	; 239
    19a2:	90 e0       	ldi	r25, 0x00	; 0
    19a4:	2f ee       	ldi	r18, 0xEF	; 239
    19a6:	30 e0       	ldi	r19, 0x00	; 0
    19a8:	f9 01       	movw	r30, r18
    19aa:	20 81       	ld	r18, Z
    19ac:	20 62       	ori	r18, 0x20	; 32
    19ae:	fc 01       	movw	r30, r24
    19b0:	20 83       	st	Z, r18
          Can_set_idemsk();
    19b2:	84 ef       	ldi	r24, 0xF4	; 244
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	24 ef       	ldi	r18, 0xF4	; 244
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	f9 01       	movw	r30, r18
    19bc:	20 81       	ld	r18, Z
    19be:	21 60       	ori	r18, 0x01	; 1
    19c0:	fc 01       	movw	r30, r24
    19c2:	20 83       	st	Z, r18
          Can_config_rx();       
    19c4:	8f ee       	ldi	r24, 0xEF	; 239
    19c6:	90 e0       	ldi	r25, 0x00	; 0
    19c8:	2f ee       	ldi	r18, 0xEF	; 239
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	f9 01       	movw	r30, r18
    19ce:	20 81       	ld	r18, Z
    19d0:	2f 73       	andi	r18, 0x3F	; 63
    19d2:	fc 01       	movw	r30, r24
    19d4:	20 83       	st	Z, r18
    19d6:	8f ee       	ldi	r24, 0xEF	; 239
    19d8:	90 e0       	ldi	r25, 0x00	; 0
    19da:	2f ee       	ldi	r18, 0xEF	; 239
    19dc:	30 e0       	ldi	r19, 0x00	; 0
    19de:	f9 01       	movw	r30, r18
    19e0:	20 81       	ld	r18, Z
    19e2:	20 68       	ori	r18, 0x80	; 128
    19e4:	fc 01       	movw	r30, r24
    19e6:	20 83       	st	Z, r18
          break;
    19e8:	0d c0       	rjmp	.+26     	; 0x1a04 <__stack+0x1105>
        //------------      
        default:
          // case CMD_NONE or not implemented command
          cmd->status = STATUS_CLEARED; 
    19ea:	89 85       	ldd	r24, Y+9	; 0x09
    19ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    19ee:	fc 01       	movw	r30, r24
    19f0:	11 86       	std	Z+9, r1	; 0x09
          break;
    19f2:	00 00       	nop
    19f4:	07 c0       	rjmp	.+14     	; 0x1a04 <__stack+0x1105>
        //------------      
      } // switch (cmd ...
    } // if (mob_handle ...
    else
    {
      cmd->status = MOB_NOT_REACHED;
    19f6:	89 85       	ldd	r24, Y+9	; 0x09
    19f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fa:	2f e1       	ldi	r18, 0x1F	; 31
    19fc:	fc 01       	movw	r30, r24
    19fe:	21 87       	std	Z+9, r18	; 0x09
      return CAN_CMD_REFUSED;
    1a00:	8f ef       	ldi	r24, 0xFF	; 255
    1a02:	01 c0       	rjmp	.+2      	; 0x1a06 <__stack+0x1107>
    }
  } // else of no CMD_ABORT
  return CAN_CMD_ACCEPTED;
    1a04:	80 e0       	ldi	r24, 0x00	; 0
}
    1a06:	2a 96       	adiw	r28, 0x0a	; 10
    1a08:	0f b6       	in	r0, 0x3f	; 63
    1a0a:	f8 94       	cli
    1a0c:	de bf       	out	0x3e, r29	; 62
    1a0e:	0f be       	out	0x3f, r0	; 63
    1a10:	cd bf       	out	0x3d, r28	; 61
    1a12:	df 91       	pop	r29
    1a14:	cf 91       	pop	r28
    1a16:	08 95       	ret

00001a18 <can_get_status>:
//!         CAN_STATUS_ERROR         - Error in configuration or in the
//!                                    CAN communication
//!
//------------------------------------------------------------------------------
uint8_t can_get_status (st_cmd_t* cmd)
{
    1a18:	cf 93       	push	r28
    1a1a:	df 93       	push	r29
    1a1c:	00 d0       	rcall	.+0      	; 0x1a1e <can_get_status+0x6>
    1a1e:	00 d0       	rcall	.+0      	; 0x1a20 <can_get_status+0x8>
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	9c 83       	std	Y+4, r25	; 0x04
    1a26:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t a_status, rtn_val;
     
    a_status = cmd->status;
    1a28:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2c:	fc 01       	movw	r30, r24
    1a2e:	81 85       	ldd	r24, Z+9	; 0x09
    1a30:	8a 83       	std	Y+2, r24	; 0x02
    if ((a_status==STATUS_CLEARED)||(a_status==MOB_NOT_REACHED)||(a_status==MOB_DISABLE))
    1a32:	8a 81       	ldd	r24, Y+2	; 0x02
    1a34:	88 23       	and	r24, r24
    1a36:	31 f0       	breq	.+12     	; 0x1a44 <can_get_status+0x2c>
    1a38:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3a:	8f 31       	cpi	r24, 0x1F	; 31
    1a3c:	19 f0       	breq	.+6      	; 0x1a44 <can_get_status+0x2c>
    1a3e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a40:	8f 3f       	cpi	r24, 0xFF	; 255
    1a42:	11 f4       	brne	.+4      	; 0x1a48 <can_get_status+0x30>
    {
        return CAN_STATUS_ERROR;
    1a44:	82 e0       	ldi	r24, 0x02	; 2
    1a46:	14 c1       	rjmp	.+552    	; 0x1c70 <can_get_status+0x258>
    }

    Can_set_mob(cmd->handle);
    1a48:	8d ee       	ldi	r24, 0xED	; 237
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a4e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a50:	f9 01       	movw	r30, r18
    1a52:	20 81       	ld	r18, Z
    1a54:	22 95       	swap	r18
    1a56:	20 7f       	andi	r18, 0xF0	; 240
    1a58:	fc 01       	movw	r30, r24
    1a5a:	20 83       	st	Z, r18
    a_status = can_get_mob_status();
    1a5c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <can_get_mob_status>
    1a60:	8a 83       	std	Y+2, r24	; 0x02
    
    switch (a_status)
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	88 2f       	mov	r24, r24
    1a66:	90 e0       	ldi	r25, 0x00	; 0
    1a68:	80 32       	cpi	r24, 0x20	; 32
    1a6a:	91 05       	cpc	r25, r1
    1a6c:	89 f0       	breq	.+34     	; 0x1a90 <can_get_status+0x78>
    1a6e:	81 32       	cpi	r24, 0x21	; 33
    1a70:	91 05       	cpc	r25, r1
    1a72:	1c f4       	brge	.+6      	; 0x1a7a <can_get_status+0x62>
    1a74:	89 2b       	or	r24, r25
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <can_get_status+0x72>
    1a78:	e5 c0       	rjmp	.+458    	; 0x1c44 <can_get_status+0x22c>
    1a7a:	80 34       	cpi	r24, 0x40	; 64
    1a7c:	91 05       	cpc	r25, r1
    1a7e:	09 f4       	brne	.+2      	; 0x1a82 <can_get_status+0x6a>
    1a80:	cd c0       	rjmp	.+410    	; 0x1c1c <can_get_status+0x204>
    1a82:	80 3a       	cpi	r24, 0xA0	; 160
    1a84:	91 05       	cpc	r25, r1
    1a86:	21 f0       	breq	.+8      	; 0x1a90 <can_get_status+0x78>
    1a88:	dd c0       	rjmp	.+442    	; 0x1c44 <can_get_status+0x22c>
    {
        case MOB_NOT_COMPLETED:
            // cmd->status not updated
            rtn_val = CAN_STATUS_NOT_COMPLETED;
    1a8a:	81 e0       	ldi	r24, 0x01	; 1
    1a8c:	89 83       	std	Y+1, r24	; 0x01
            break;
    1a8e:	ef c0       	rjmp	.+478    	; 0x1c6e <can_get_status+0x256>
        //---------------      
        case MOB_RX_COMPLETED:     
        case MOB_RX_COMPLETED_DLCW:
            cmd->dlc = Can_get_dlc();
    1a90:	8f ee       	ldi	r24, 0xEF	; 239
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	fc 01       	movw	r30, r24
    1a96:	80 81       	ld	r24, Z
    1a98:	28 2f       	mov	r18, r24
    1a9a:	2f 70       	andi	r18, 0x0F	; 15
    1a9c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9e:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa0:	fc 01       	movw	r30, r24
    1aa2:	26 83       	std	Z+6, r18	; 0x06
            can_get_data(cmd->pt_data);
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa8:	fc 01       	movw	r30, r24
    1aaa:	87 81       	ldd	r24, Z+7	; 0x07
    1aac:	90 85       	ldd	r25, Z+8	; 0x08
    1aae:	0e 94 0b 02 	call	0x416	; 0x416 <can_get_data>
            cmd->ctrl.rtr = Can_get_rtr();
    1ab2:	80 ef       	ldi	r24, 0xF0	; 240
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	fc 01       	movw	r30, r24
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 2f       	mov	r24, r24
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	84 70       	andi	r24, 0x04	; 4
    1ac0:	99 27       	eor	r25, r25
    1ac2:	95 95       	asr	r25
    1ac4:	87 95       	ror	r24
    1ac6:	95 95       	asr	r25
    1ac8:	87 95       	ror	r24
    1aca:	21 e0       	ldi	r18, 0x01	; 1
    1acc:	89 2b       	or	r24, r25
    1ace:	09 f4       	brne	.+2      	; 0x1ad2 <can_get_status+0xba>
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad6:	fc 01       	movw	r30, r24
    1ad8:	22 87       	std	Z+10, r18	; 0x0a
            if (Can_get_ide()) // if extended frame
    1ada:	8f ee       	ldi	r24, 0xEF	; 239
    1adc:	90 e0       	ldi	r25, 0x00	; 0
    1ade:	fc 01       	movw	r30, r24
    1ae0:	80 81       	ld	r24, Z
    1ae2:	88 2f       	mov	r24, r24
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	80 71       	andi	r24, 0x10	; 16
    1ae8:	99 27       	eor	r25, r25
    1aea:	95 95       	asr	r25
    1aec:	87 95       	ror	r24
    1aee:	95 95       	asr	r25
    1af0:	87 95       	ror	r24
    1af2:	95 95       	asr	r25
    1af4:	87 95       	ror	r24
    1af6:	95 95       	asr	r25
    1af8:	87 95       	ror	r24
    1afa:	89 2b       	or	r24, r25
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <can_get_status+0xe8>
    1afe:	54 c0       	rjmp	.+168    	; 0x1ba8 <can_get_status+0x190>
            {
                cmd->ctrl.ide = 1; // extended frame
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	9c 81       	ldd	r25, Y+4	; 0x04
    1b04:	21 e0       	ldi	r18, 0x01	; 1
    1b06:	fc 01       	movw	r30, r24
    1b08:	23 87       	std	Z+11, r18	; 0x0b
                Can_get_ext_id(cmd->id.ext);
    1b0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0e:	02 96       	adiw	r24, 0x02	; 2
    1b10:	03 96       	adiw	r24, 0x03	; 3
    1b12:	23 ef       	ldi	r18, 0xF3	; 243
    1b14:	30 e0       	ldi	r19, 0x00	; 0
    1b16:	f9 01       	movw	r30, r18
    1b18:	20 81       	ld	r18, Z
    1b1a:	26 95       	lsr	r18
    1b1c:	26 95       	lsr	r18
    1b1e:	26 95       	lsr	r18
    1b20:	fc 01       	movw	r30, r24
    1b22:	20 83       	st	Z, r18
    1b24:	8b 81       	ldd	r24, Y+3	; 0x03
    1b26:	9c 81       	ldd	r25, Y+4	; 0x04
    1b28:	02 96       	adiw	r24, 0x02	; 2
    1b2a:	02 96       	adiw	r24, 0x02	; 2
    1b2c:	22 ef       	ldi	r18, 0xF2	; 242
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	f9 01       	movw	r30, r18
    1b32:	20 81       	ld	r18, Z
    1b34:	42 2f       	mov	r20, r18
    1b36:	46 95       	lsr	r20
    1b38:	46 95       	lsr	r20
    1b3a:	46 95       	lsr	r20
    1b3c:	23 ef       	ldi	r18, 0xF3	; 243
    1b3e:	30 e0       	ldi	r19, 0x00	; 0
    1b40:	f9 01       	movw	r30, r18
    1b42:	20 81       	ld	r18, Z
    1b44:	22 95       	swap	r18
    1b46:	22 0f       	add	r18, r18
    1b48:	20 7e       	andi	r18, 0xE0	; 224
    1b4a:	24 0f       	add	r18, r20
    1b4c:	fc 01       	movw	r30, r24
    1b4e:	20 83       	st	Z, r18
    1b50:	8b 81       	ldd	r24, Y+3	; 0x03
    1b52:	9c 81       	ldd	r25, Y+4	; 0x04
    1b54:	02 96       	adiw	r24, 0x02	; 2
    1b56:	01 96       	adiw	r24, 0x01	; 1
    1b58:	21 ef       	ldi	r18, 0xF1	; 241
    1b5a:	30 e0       	ldi	r19, 0x00	; 0
    1b5c:	f9 01       	movw	r30, r18
    1b5e:	20 81       	ld	r18, Z
    1b60:	42 2f       	mov	r20, r18
    1b62:	46 95       	lsr	r20
    1b64:	46 95       	lsr	r20
    1b66:	46 95       	lsr	r20
    1b68:	22 ef       	ldi	r18, 0xF2	; 242
    1b6a:	30 e0       	ldi	r19, 0x00	; 0
    1b6c:	f9 01       	movw	r30, r18
    1b6e:	20 81       	ld	r18, Z
    1b70:	22 95       	swap	r18
    1b72:	22 0f       	add	r18, r18
    1b74:	20 7e       	andi	r18, 0xE0	; 224
    1b76:	24 0f       	add	r18, r20
    1b78:	fc 01       	movw	r30, r24
    1b7a:	20 83       	st	Z, r18
    1b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b80:	02 96       	adiw	r24, 0x02	; 2
    1b82:	20 ef       	ldi	r18, 0xF0	; 240
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	f9 01       	movw	r30, r18
    1b88:	20 81       	ld	r18, Z
    1b8a:	42 2f       	mov	r20, r18
    1b8c:	46 95       	lsr	r20
    1b8e:	46 95       	lsr	r20
    1b90:	46 95       	lsr	r20
    1b92:	21 ef       	ldi	r18, 0xF1	; 241
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	f9 01       	movw	r30, r18
    1b98:	20 81       	ld	r18, Z
    1b9a:	22 95       	swap	r18
    1b9c:	22 0f       	add	r18, r18
    1b9e:	20 7e       	andi	r18, 0xE0	; 224
    1ba0:	24 0f       	add	r18, r20
    1ba2:	fc 01       	movw	r30, r24
    1ba4:	20 83       	st	Z, r18
    1ba6:	26 c0       	rjmp	.+76     	; 0x1bf4 <can_get_status+0x1dc>
            }
            else // else standard frame
                {
                    cmd->ctrl.ide = 0;
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	fc 01       	movw	r30, r24
    1bae:	13 86       	std	Z+11, r1	; 0x0b
                    Can_get_std_id(cmd->id.std);
    1bb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1bb4:	02 96       	adiw	r24, 0x02	; 2
    1bb6:	01 96       	adiw	r24, 0x01	; 1
    1bb8:	23 ef       	ldi	r18, 0xF3	; 243
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	f9 01       	movw	r30, r18
    1bbe:	20 81       	ld	r18, Z
    1bc0:	22 95       	swap	r18
    1bc2:	26 95       	lsr	r18
    1bc4:	27 70       	andi	r18, 0x07	; 7
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	20 83       	st	Z, r18
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bce:	02 96       	adiw	r24, 0x02	; 2
    1bd0:	22 ef       	ldi	r18, 0xF2	; 242
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	f9 01       	movw	r30, r18
    1bd6:	20 81       	ld	r18, Z
    1bd8:	42 2f       	mov	r20, r18
    1bda:	42 95       	swap	r20
    1bdc:	46 95       	lsr	r20
    1bde:	47 70       	andi	r20, 0x07	; 7
    1be0:	23 ef       	ldi	r18, 0xF3	; 243
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	f9 01       	movw	r30, r18
    1be6:	20 81       	ld	r18, Z
    1be8:	22 0f       	add	r18, r18
    1bea:	22 0f       	add	r18, r18
    1bec:	22 0f       	add	r18, r18
    1bee:	24 0f       	add	r18, r20
    1bf0:	fc 01       	movw	r30, r24
    1bf2:	20 83       	st	Z, r18
                }
            // Status field of descriptor: 0x20 if Rx completed
            // Status field of descriptor: 0xA0 if Rx completed with DLCWarning    
            cmd->status = a_status;
    1bf4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bf8:	2a 81       	ldd	r18, Y+2	; 0x02
    1bfa:	fc 01       	movw	r30, r24
    1bfc:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1bfe:	8f ee       	ldi	r24, 0xEF	; 239
    1c00:	90 e0       	ldi	r25, 0x00	; 0
    1c02:	2f ee       	ldi	r18, 0xEF	; 239
    1c04:	30 e0       	ldi	r19, 0x00	; 0
    1c06:	f9 01       	movw	r30, r18
    1c08:	20 81       	ld	r18, Z
    1c0a:	2f 73       	andi	r18, 0x3F	; 63
    1c0c:	fc 01       	movw	r30, r24
    1c0e:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c10:	8e ee       	ldi	r24, 0xEE	; 238
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	fc 01       	movw	r30, r24
    1c16:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1c18:	19 82       	std	Y+1, r1	; 0x01
            break;
    1c1a:	29 c0       	rjmp	.+82     	; 0x1c6e <can_get_status+0x256>
        //---------------      
        case MOB_TX_COMPLETED:     
            // Status field of descriptor: 0x40 if Tx completed
            cmd->status = a_status;
    1c1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c20:	2a 81       	ldd	r18, Y+2	; 0x02
    1c22:	fc 01       	movw	r30, r24
    1c24:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1c26:	8f ee       	ldi	r24, 0xEF	; 239
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	2f ee       	ldi	r18, 0xEF	; 239
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	f9 01       	movw	r30, r18
    1c30:	20 81       	ld	r18, Z
    1c32:	2f 73       	andi	r18, 0x3F	; 63
    1c34:	fc 01       	movw	r30, r24
    1c36:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c38:	8e ee       	ldi	r24, 0xEE	; 238
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_COMPLETED;
    1c40:	19 82       	std	Y+1, r1	; 0x01
            break;
    1c42:	15 c0       	rjmp	.+42     	; 0x1c6e <can_get_status+0x256>
        //---------------      
        default:
            // Status field of descriptor: (bin)000b.scfa if MOb error
            cmd->status = a_status;
    1c44:	8b 81       	ldd	r24, Y+3	; 0x03
    1c46:	9c 81       	ldd	r25, Y+4	; 0x04
    1c48:	2a 81       	ldd	r18, Y+2	; 0x02
    1c4a:	fc 01       	movw	r30, r24
    1c4c:	21 87       	std	Z+9, r18	; 0x09
            Can_mob_abort();        // Freed the MOB
    1c4e:	8f ee       	ldi	r24, 0xEF	; 239
    1c50:	90 e0       	ldi	r25, 0x00	; 0
    1c52:	2f ee       	ldi	r18, 0xEF	; 239
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	f9 01       	movw	r30, r18
    1c58:	20 81       	ld	r18, Z
    1c5a:	2f 73       	andi	r18, 0x3F	; 63
    1c5c:	fc 01       	movw	r30, r24
    1c5e:	20 83       	st	Z, r18
            Can_clear_status_mob(); //   and reset MOb status
    1c60:	8e ee       	ldi	r24, 0xEE	; 238
    1c62:	90 e0       	ldi	r25, 0x00	; 0
    1c64:	fc 01       	movw	r30, r24
    1c66:	10 82       	st	Z, r1
            rtn_val = CAN_STATUS_ERROR;
    1c68:	82 e0       	ldi	r24, 0x02	; 2
    1c6a:	89 83       	std	Y+1, r24	; 0x01
            break;
    1c6c:	00 00       	nop
             
    } // switch (a_status...
 
    return (rtn_val);
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c70:	0f 90       	pop	r0
    1c72:	0f 90       	pop	r0
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	df 91       	pop	r29
    1c7a:	cf 91       	pop	r28
    1c7c:	08 95       	ret

00001c7e <__low>:
	return (__x1 & ( 1 << __x2));
}
*/

static __inline uint8_t __low(uint16_t __x)
{
    1c7e:	cf 93       	push	r28
    1c80:	df 93       	push	r29
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <__low+0x6>
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) ((__x) & 0xFF);
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c8e:	0f 90       	pop	r0
    1c90:	0f 90       	pop	r0
    1c92:	df 91       	pop	r29
    1c94:	cf 91       	pop	r28
    1c96:	08 95       	ret

00001c98 <__high>:

static __inline uint8_t __high(uint16_t __x)
{
    1c98:	cf 93       	push	r28
    1c9a:	df 93       	push	r29
    1c9c:	00 d0       	rcall	.+0      	; 0x1c9e <__high+0x6>
    1c9e:	cd b7       	in	r28, 0x3d	; 61
    1ca0:	de b7       	in	r29, 0x3e	; 62
    1ca2:	9a 83       	std	Y+2, r25	; 0x02
    1ca4:	89 83       	std	Y+1, r24	; 0x01
	return (uint8_t) (((__x)>>8) & 0xFF);
    1ca6:	89 81       	ldd	r24, Y+1	; 0x01
    1ca8:	9a 81       	ldd	r25, Y+2	; 0x02
    1caa:	89 2f       	mov	r24, r25
    1cac:	99 27       	eor	r25, r25
}
    1cae:	0f 90       	pop	r0
    1cb0:	0f 90       	pop	r0
    1cb2:	df 91       	pop	r29
    1cb4:	cf 91       	pop	r28
    1cb6:	08 95       	ret

00001cb8 <can_network_init>:
	while(can_cmd(&message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
	*/

void can_network_init (uint8_t mode)
{
    1cb8:	cf 93       	push	r28
    1cba:	df 93       	push	r29
    1cbc:	1f 92       	push	r1
    1cbe:	cd b7       	in	r28, 0x3d	; 61
    1cc0:	de b7       	in	r29, 0x3e	; 62
    1cc2:	89 83       	std	Y+1, r24	; 0x01
	can_init(mode);
    1cc4:	89 81       	ldd	r24, Y+1	; 0x01
    1cc6:	0e 94 59 02 	call	0x4b2	; 0x4b2 <can_init>
}
    1cca:	00 00       	nop
    1ccc:	0f 90       	pop	r0
    1cce:	df 91       	pop	r29
    1cd0:	cf 91       	pop	r28
    1cd2:	08 95       	ret

00001cd4 <can_send_aem_message>:

void can_send_aem_message(tSensor sensor)
{
    1cd4:	ef 92       	push	r14
    1cd6:	ff 92       	push	r15
    1cd8:	0f 93       	push	r16
    1cda:	1f 93       	push	r17
    1cdc:	cf 93       	push	r28
    1cde:	df 93       	push	r29
    1ce0:	cd b7       	in	r28, 0x3d	; 61
    1ce2:	de b7       	in	r29, 0x3e	; 62
    1ce4:	64 97       	sbiw	r28, 0x14	; 20
    1ce6:	0f b6       	in	r0, 0x3f	; 63
    1ce8:	f8 94       	cli
    1cea:	de bf       	out	0x3e, r29	; 62
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	cd bf       	out	0x3d, r28	; 61
	
	aem_message.pt_data = &aem_pt_data[0];
	
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
}
    1cf0:	0d b7       	in	r16, 0x3d	; 61
    1cf2:	1e b7       	in	r17, 0x3e	; 62
{
	can_init(mode);
}

void can_send_aem_message(tSensor sensor)
{
    1cf4:	8d b7       	in	r24, 0x3d	; 61
    1cf6:	9e b7       	in	r25, 0x3e	; 62
    1cf8:	7c 01       	movw	r14, r24
	uint16_t tmpLambda;
	
	T_BYTE6_AEM byte6;
	T_BYTE7_AEM byte7;	
	
	aem_message.id.ext = 0x180;
    1cfa:	80 e8       	ldi	r24, 0x80	; 128
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	a0 e0       	ldi	r26, 0x00	; 0
    1d00:	b0 e0       	ldi	r27, 0x00	; 0
    1d02:	89 87       	std	Y+9, r24	; 0x09
    1d04:	9a 87       	std	Y+10, r25	; 0x0a
    1d06:	ab 87       	std	Y+11, r26	; 0x0b
    1d08:	bc 87       	std	Y+12, r27	; 0x0c
	aem_message.ctrl.ide = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	8a 8b       	std	Y+18, r24	; 0x12
	aem_message.ctrl.rtr = 0;
    1d0e:	19 8a       	std	Y+17, r1	; 0x11
	aem_message.dlc = 8;
    1d10:	88 e0       	ldi	r24, 0x08	; 8
    1d12:	8d 87       	std	Y+13, r24	; 0x0d
	aem_message.cmd = CMD_TX_DATA;
    1d14:	82 e0       	ldi	r24, 0x02	; 2
    1d16:	88 87       	std	Y+8, r24	; 0x08
	uint8_t aem_pt_data[aem_message.dlc];
    1d18:	2d 85       	ldd	r18, Y+13	; 0x0d
    1d1a:	82 2f       	mov	r24, r18
    1d1c:	90 e0       	ldi	r25, 0x00	; 0
    1d1e:	01 97       	sbiw	r24, 0x01	; 1
    1d20:	9a 83       	std	Y+2, r25	; 0x02
    1d22:	89 83       	std	Y+1, r24	; 0x01
    1d24:	82 2f       	mov	r24, r18
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	2d b7       	in	r18, 0x3d	; 61
    1d2a:	3e b7       	in	r19, 0x3e	; 62
    1d2c:	28 1b       	sub	r18, r24
    1d2e:	39 0b       	sbc	r19, r25
    1d30:	0f b6       	in	r0, 0x3f	; 63
    1d32:	f8 94       	cli
    1d34:	3e bf       	out	0x3e, r19	; 62
    1d36:	0f be       	out	0x3f, r0	; 63
    1d38:	2d bf       	out	0x3d, r18	; 61
    1d3a:	8d b7       	in	r24, 0x3d	; 61
    1d3c:	9e b7       	in	r25, 0x3e	; 62
    1d3e:	01 96       	adiw	r24, 0x01	; 1
    1d40:	9c 83       	std	Y+4, r25	; 0x04
    1d42:	8b 83       	std	Y+3, r24	; 0x03
	
	tmpLambda = sensor.Lambda*10;
    1d44:	8c a5       	ldd	r24, Y+44	; 0x2c
    1d46:	9d a5       	ldd	r25, Y+45	; 0x2d
    1d48:	88 0f       	add	r24, r24
    1d4a:	99 1f       	adc	r25, r25
    1d4c:	9c 01       	movw	r18, r24
    1d4e:	22 0f       	add	r18, r18
    1d50:	33 1f       	adc	r19, r19
    1d52:	22 0f       	add	r18, r18
    1d54:	33 1f       	adc	r19, r19
    1d56:	82 0f       	add	r24, r18
    1d58:	93 1f       	adc	r25, r19
    1d5a:	9e 83       	std	Y+6, r25	; 0x06
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
	aem_pt_data[0] = high(tmpLambda);
    1d5e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d60:	9e 81       	ldd	r25, Y+6	; 0x06
    1d62:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__high>
    1d66:	28 2f       	mov	r18, r24
    1d68:	8b 81       	ldd	r24, Y+3	; 0x03
    1d6a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d6c:	fc 01       	movw	r30, r24
    1d6e:	20 83       	st	Z, r18
	aem_pt_data[1] = low(tmpLambda);
    1d70:	8d 81       	ldd	r24, Y+5	; 0x05
    1d72:	9e 81       	ldd	r25, Y+6	; 0x06
    1d74:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__low>
    1d78:	28 2f       	mov	r18, r24
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7e:	fc 01       	movw	r30, r24
    1d80:	21 83       	std	Z+1, r18	; 0x01

	aem_pt_data[2] = high(sensor.O2);
    1d82:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d84:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d86:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__high>
    1d8a:	28 2f       	mov	r18, r24
    1d8c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d90:	fc 01       	movw	r30, r24
    1d92:	22 83       	std	Z+2, r18	; 0x02
	aem_pt_data[3] = low(sensor.O2);
    1d94:	8e a5       	ldd	r24, Y+46	; 0x2e
    1d96:	9f a5       	ldd	r25, Y+47	; 0x2f
    1d98:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__low>
    1d9c:	28 2f       	mov	r18, r24
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	fc 01       	movw	r30, r24
    1da4:	23 83       	std	Z+3, r18	; 0x03

	aem_pt_data[4] = (sensor.SystemVoltage / 100);
    1da6:	8a a9       	ldd	r24, Y+50	; 0x32
    1da8:	9b a9       	ldd	r25, Y+51	; 0x33
    1daa:	96 95       	lsr	r25
    1dac:	87 95       	ror	r24
    1dae:	96 95       	lsr	r25
    1db0:	87 95       	ror	r24
    1db2:	9c 01       	movw	r18, r24
    1db4:	ab e7       	ldi	r26, 0x7B	; 123
    1db6:	b4 e1       	ldi	r27, 0x14	; 20
    1db8:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    1dbc:	96 95       	lsr	r25
    1dbe:	87 95       	ror	r24
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc4:	9c 81       	ldd	r25, Y+4	; 0x04
    1dc6:	fc 01       	movw	r30, r24
    1dc8:	24 83       	std	Z+4, r18	; 0x04
	aem_pt_data[5] = (sensor.HeaterVoltage / 100);
    1dca:	88 a9       	ldd	r24, Y+48	; 0x30
    1dcc:	99 a9       	ldd	r25, Y+49	; 0x31
    1dce:	96 95       	lsr	r25
    1dd0:	87 95       	ror	r24
    1dd2:	96 95       	lsr	r25
    1dd4:	87 95       	ror	r24
    1dd6:	9c 01       	movw	r18, r24
    1dd8:	ab e7       	ldi	r26, 0x7B	; 123
    1dda:	b4 e1       	ldi	r27, 0x14	; 20
    1ddc:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    1de0:	96 95       	lsr	r25
    1de2:	87 95       	ror	r24
    1de4:	28 2f       	mov	r18, r24
    1de6:	8b 81       	ldd	r24, Y+3	; 0x03
    1de8:	9c 81       	ldd	r25, Y+4	; 0x04
    1dea:	fc 01       	movw	r30, r24
    1dec:	25 83       	std	Z+5, r18	; 0x05
	
	byte6.signals.SensorDetectedStatus = sensor.SensorDetectedStatus;
    1dee:	88 ad       	ldd	r24, Y+56	; 0x38
    1df0:	8f 70       	andi	r24, 0x0F	; 15
    1df2:	8f 70       	andi	r24, 0x0F	; 15
    1df4:	9b 89       	ldd	r25, Y+19	; 0x13
    1df6:	90 7f       	andi	r25, 0xF0	; 240
    1df8:	89 2b       	or	r24, r25
    1dfa:	8b 8b       	std	Y+19, r24	; 0x13
	byte6.signals.DataValidState = 0x1;
    1dfc:	8b 89       	ldd	r24, Y+19	; 0x13
    1dfe:	80 68       	ori	r24, 0x80	; 128
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
	byte6.signals.UsingFreeAirCal = 0x0;
    1e02:	8b 89       	ldd	r24, Y+19	; 0x13
    1e04:	8f 7d       	andi	r24, 0xDF	; 223
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
	aem_pt_data[6] = byte6.raw_byte;
    1e08:	2b 89       	ldd	r18, Y+19	; 0x13
    1e0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e0e:	fc 01       	movw	r30, r24
    1e10:	26 83       	std	Z+6, r18	; 0x06
	
	byte7.signals.SensorFaultState = sensor.SensorFaultState;
    1e12:	8f a9       	ldd	r24, Y+55	; 0x37
    1e14:	81 70       	andi	r24, 0x01	; 1
    1e16:	81 70       	andi	r24, 0x01	; 1
    1e18:	82 95       	swap	r24
    1e1a:	88 0f       	add	r24, r24
    1e1c:	88 0f       	add	r24, r24
    1e1e:	80 7c       	andi	r24, 0xC0	; 192
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	9f 7b       	andi	r25, 0xBF	; 191
    1e24:	89 2b       	or	r24, r25
    1e26:	8c 8b       	std	Y+20, r24	; 0x14
	byte7.signals.SensorStatus = sensor.SensorStatus;
    1e28:	8e a9       	ldd	r24, Y+54	; 0x36
    1e2a:	8f 71       	andi	r24, 0x1F	; 31
    1e2c:	8f 71       	andi	r24, 0x1F	; 31
    1e2e:	9c 89       	ldd	r25, Y+20	; 0x14
    1e30:	90 7e       	andi	r25, 0xE0	; 224
    1e32:	89 2b       	or	r24, r25
    1e34:	8c 8b       	std	Y+20, r24	; 0x14
	aem_pt_data[7] = byte7.raw_byte;
    1e36:	2c 89       	ldd	r18, Y+20	; 0x14
    1e38:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e3c:	fc 01       	movw	r30, r24
    1e3e:	27 83       	std	Z+7, r18	; 0x07
	
	aem_message.pt_data = &aem_pt_data[0];
    1e40:	8b 81       	ldd	r24, Y+3	; 0x03
    1e42:	9c 81       	ldd	r25, Y+4	; 0x04
    1e44:	9f 87       	std	Y+15, r25	; 0x0f
    1e46:	8e 87       	std	Y+14, r24	; 0x0e
	
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1e48:	00 00       	nop
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	07 96       	adiw	r24, 0x07	; 7
    1e4e:	0e 94 76 02 	call	0x4ec	; 0x4ec <can_cmd>
    1e52:	88 23       	and	r24, r24
    1e54:	d1 f7       	brne	.-12     	; 0x1e4a <can_send_aem_message+0x176>
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    1e56:	00 00       	nop
    1e58:	ce 01       	movw	r24, r28
    1e5a:	07 96       	adiw	r24, 0x07	; 7
    1e5c:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <can_get_status>
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	d1 f3       	breq	.-12     	; 0x1e58 <can_send_aem_message+0x184>
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	fe be       	out	0x3e, r15	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	ed be       	out	0x3d, r14	; 61
}
    1e6e:	00 00       	nop
    1e70:	0f b6       	in	r0, 0x3f	; 63
    1e72:	f8 94       	cli
    1e74:	1e bf       	out	0x3e, r17	; 62
    1e76:	0f be       	out	0x3f, r0	; 63
    1e78:	0d bf       	out	0x3d, r16	; 61
    1e7a:	64 96       	adiw	r28, 0x14	; 20
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	df 91       	pop	r29
    1e88:	cf 91       	pop	r28
    1e8a:	1f 91       	pop	r17
    1e8c:	0f 91       	pop	r16
    1e8e:	ff 90       	pop	r15
    1e90:	ef 90       	pop	r14
    1e92:	08 95       	ret

00001e94 <can_send_debug_message>:

void can_send_debug_message(uint16_t ur_ref_raw, uint16_t ur_raw, uint8_t pid, uint8_t signature, uint8_t diagRegister)
{
    1e94:	ef 92       	push	r14
    1e96:	ff 92       	push	r15
    1e98:	0f 93       	push	r16
    1e9a:	1f 93       	push	r17
    1e9c:	cf 93       	push	r28
    1e9e:	df 93       	push	r29
    1ea0:	cd b7       	in	r28, 0x3d	; 61
    1ea2:	de b7       	in	r29, 0x3e	; 62
    1ea4:	67 97       	sbiw	r28, 0x17	; 23
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	9a 8b       	std	Y+18, r25	; 0x12
    1eb2:	89 8b       	std	Y+17, r24	; 0x11
    1eb4:	7c 8b       	std	Y+20, r23	; 0x14
    1eb6:	6b 8b       	std	Y+19, r22	; 0x13
    1eb8:	4d 8b       	std	Y+21, r20	; 0x15
    1eba:	2e 8b       	std	Y+22, r18	; 0x16
    1ebc:	0f 8b       	std	Y+23, r16	; 0x17
	
	debug_message.pt_data = &pt_data[0];
	
	while(can_cmd(&debug_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&debug_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    1ebe:	0d b7       	in	r16, 0x3d	; 61
    1ec0:	1e b7       	in	r17, 0x3e	; 62
	while(can_cmd(&aem_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
	while(can_get_status(&aem_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
}

void can_send_debug_message(uint16_t ur_ref_raw, uint16_t ur_raw, uint8_t pid, uint8_t signature, uint8_t diagRegister)
{
    1ec2:	8d b7       	in	r24, 0x3d	; 61
    1ec4:	9e b7       	in	r25, 0x3e	; 62
    1ec6:	7c 01       	movw	r14, r24
	st_cmd_t debug_message;
	debug_message.id.ext = 0x200;
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	92 e0       	ldi	r25, 0x02	; 2
    1ecc:	a0 e0       	ldi	r26, 0x00	; 0
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	8f 83       	std	Y+7, r24	; 0x07
    1ed2:	98 87       	std	Y+8, r25	; 0x08
    1ed4:	a9 87       	std	Y+9, r26	; 0x09
    1ed6:	ba 87       	std	Y+10, r27	; 0x0a
	debug_message.ctrl.ide = 1;
    1ed8:	81 e0       	ldi	r24, 0x01	; 1
    1eda:	88 8b       	std	Y+16, r24	; 0x10
	debug_message.ctrl.rtr = 0;
    1edc:	1f 86       	std	Y+15, r1	; 0x0f
	debug_message.dlc = 7;
    1ede:	87 e0       	ldi	r24, 0x07	; 7
    1ee0:	8b 87       	std	Y+11, r24	; 0x0b
	debug_message.cmd = CMD_TX_DATA;
    1ee2:	82 e0       	ldi	r24, 0x02	; 2
    1ee4:	8e 83       	std	Y+6, r24	; 0x06
	uint8_t pt_data[debug_message.dlc];
    1ee6:	2b 85       	ldd	r18, Y+11	; 0x0b
    1ee8:	82 2f       	mov	r24, r18
    1eea:	90 e0       	ldi	r25, 0x00	; 0
    1eec:	01 97       	sbiw	r24, 0x01	; 1
    1eee:	9a 83       	std	Y+2, r25	; 0x02
    1ef0:	89 83       	std	Y+1, r24	; 0x01
    1ef2:	82 2f       	mov	r24, r18
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	2d b7       	in	r18, 0x3d	; 61
    1ef8:	3e b7       	in	r19, 0x3e	; 62
    1efa:	28 1b       	sub	r18, r24
    1efc:	39 0b       	sbc	r19, r25
    1efe:	0f b6       	in	r0, 0x3f	; 63
    1f00:	f8 94       	cli
    1f02:	3e bf       	out	0x3e, r19	; 62
    1f04:	0f be       	out	0x3f, r0	; 63
    1f06:	2d bf       	out	0x3d, r18	; 61
    1f08:	8d b7       	in	r24, 0x3d	; 61
    1f0a:	9e b7       	in	r25, 0x3e	; 62
    1f0c:	01 96       	adiw	r24, 0x01	; 1
    1f0e:	9c 83       	std	Y+4, r25	; 0x04
    1f10:	8b 83       	std	Y+3, r24	; 0x03
	
	pt_data[0] = low(ur_ref_raw);
    1f12:	89 89       	ldd	r24, Y+17	; 0x11
    1f14:	9a 89       	ldd	r25, Y+18	; 0x12
    1f16:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__low>
    1f1a:	28 2f       	mov	r18, r24
    1f1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1f1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1f20:	fc 01       	movw	r30, r24
    1f22:	20 83       	st	Z, r18
	pt_data[1] = high(ur_ref_raw);
    1f24:	89 89       	ldd	r24, Y+17	; 0x11
    1f26:	9a 89       	ldd	r25, Y+18	; 0x12
    1f28:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__high>
    1f2c:	28 2f       	mov	r18, r24
    1f2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f30:	9c 81       	ldd	r25, Y+4	; 0x04
    1f32:	fc 01       	movw	r30, r24
    1f34:	21 83       	std	Z+1, r18	; 0x01
	pt_data[2] = low(ur_raw);
    1f36:	8b 89       	ldd	r24, Y+19	; 0x13
    1f38:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3a:	0e 94 3f 0e 	call	0x1c7e	; 0x1c7e <__low>
    1f3e:	28 2f       	mov	r18, r24
    1f40:	8b 81       	ldd	r24, Y+3	; 0x03
    1f42:	9c 81       	ldd	r25, Y+4	; 0x04
    1f44:	fc 01       	movw	r30, r24
    1f46:	22 83       	std	Z+2, r18	; 0x02
	pt_data[3] = high(ur_raw);
    1f48:	8b 89       	ldd	r24, Y+19	; 0x13
    1f4a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f4c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <__high>
    1f50:	28 2f       	mov	r18, r24
    1f52:	8b 81       	ldd	r24, Y+3	; 0x03
    1f54:	9c 81       	ldd	r25, Y+4	; 0x04
    1f56:	fc 01       	movw	r30, r24
    1f58:	23 83       	std	Z+3, r18	; 0x03
	pt_data[4] = pid;
    1f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5e:	2d 89       	ldd	r18, Y+21	; 0x15
    1f60:	fc 01       	movw	r30, r24
    1f62:	24 83       	std	Z+4, r18	; 0x04
	pt_data[5] = signature;
    1f64:	8b 81       	ldd	r24, Y+3	; 0x03
    1f66:	9c 81       	ldd	r25, Y+4	; 0x04
    1f68:	2e 89       	ldd	r18, Y+22	; 0x16
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	25 83       	std	Z+5, r18	; 0x05
	pt_data[6] = diagRegister;
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	9c 81       	ldd	r25, Y+4	; 0x04
    1f72:	2f 89       	ldd	r18, Y+23	; 0x17
    1f74:	fc 01       	movw	r30, r24
    1f76:	26 83       	std	Z+6, r18	; 0x06
	
	debug_message.pt_data = &pt_data[0];
    1f78:	8b 81       	ldd	r24, Y+3	; 0x03
    1f7a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f7c:	9d 87       	std	Y+13, r25	; 0x0d
    1f7e:	8c 87       	std	Y+12, r24	; 0x0c
	
	while(can_cmd(&debug_message) != CAN_CMD_ACCEPTED);					// wait for MOb to configure
    1f80:	00 00       	nop
    1f82:	ce 01       	movw	r24, r28
    1f84:	05 96       	adiw	r24, 0x05	; 5
    1f86:	0e 94 76 02 	call	0x4ec	; 0x4ec <can_cmd>
    1f8a:	88 23       	and	r24, r24
    1f8c:	d1 f7       	brne	.-12     	; 0x1f82 <can_send_debug_message+0xee>
	while(can_get_status(&debug_message) == CAN_STATUS_NOT_COMPLETED);	// wait for a transmit request to come in, and send a response
    1f8e:	00 00       	nop
    1f90:	ce 01       	movw	r24, r28
    1f92:	05 96       	adiw	r24, 0x05	; 5
    1f94:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <can_get_status>
    1f98:	81 30       	cpi	r24, 0x01	; 1
    1f9a:	d1 f3       	breq	.-12     	; 0x1f90 <can_send_debug_message+0xfc>
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	fe be       	out	0x3e, r15	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	ed be       	out	0x3d, r14	; 61
    1fa6:	00 00       	nop
    1fa8:	0f b6       	in	r0, 0x3f	; 63
    1faa:	f8 94       	cli
    1fac:	1e bf       	out	0x3e, r17	; 62
    1fae:	0f be       	out	0x3f, r0	; 63
    1fb0:	0d bf       	out	0x3d, r16	; 61
    1fb2:	67 96       	adiw	r28, 0x17	; 23
    1fb4:	0f b6       	in	r0, 0x3f	; 63
    1fb6:	f8 94       	cli
    1fb8:	de bf       	out	0x3e, r29	; 62
    1fba:	0f be       	out	0x3f, r0	; 63
    1fbc:	cd bf       	out	0x3d, r28	; 61
    1fbe:	df 91       	pop	r29
    1fc0:	cf 91       	pop	r28
    1fc2:	1f 91       	pop	r17
    1fc4:	0f 91       	pop	r16
    1fc6:	ff 90       	pop	r15
    1fc8:	ef 90       	pop	r14
    1fca:	08 95       	ret

00001fcc <__low>:
		*mode = NORMAL_V17;
		break;
	}
	
	return COMMAND_VALID;
}
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	00 d0       	rcall	.+0      	; 0x1fd2 <__low+0x6>
    1fd2:	cd b7       	in	r28, 0x3d	; 61
    1fd4:	de b7       	in	r29, 0x3e	; 62
    1fd6:	9a 83       	std	Y+2, r25	; 0x02
    1fd8:	89 83       	std	Y+1, r24	; 0x01
    1fda:	89 81       	ldd	r24, Y+1	; 0x01
    1fdc:	0f 90       	pop	r0
    1fde:	0f 90       	pop	r0
    1fe0:	df 91       	pop	r29
    1fe2:	cf 91       	pop	r28
    1fe4:	08 95       	ret

00001fe6 <__high>:
    1fe6:	cf 93       	push	r28
    1fe8:	df 93       	push	r29
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <__high+0x6>
    1fec:	cd b7       	in	r28, 0x3d	; 61
    1fee:	de b7       	in	r29, 0x3e	; 62
    1ff0:	9a 83       	std	Y+2, r25	; 0x02
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff8:	89 2f       	mov	r24, r25
    1ffa:	99 27       	eor	r25, r25
    1ffc:	0f 90       	pop	r0
    1ffe:	0f 90       	pop	r0
    2000:	df 91       	pop	r29
    2002:	cf 91       	pop	r28
    2004:	08 95       	ret

00002006 <cj125_sreset>:
    2006:	cf 93       	push	r28
    2008:	df 93       	push	r29
    200a:	00 d0       	rcall	.+0      	; 0x200c <cj125_sreset+0x6>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	1a 82       	std	Y+2, r1	; 0x02
    2012:	19 82       	std	Y+1, r1	; 0x01
    2014:	80 e4       	ldi	r24, 0x40	; 64
    2016:	9a e5       	ldi	r25, 0x5A	; 90
    2018:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
    2020:	80 e0       	ldi	r24, 0x00	; 0
    2022:	9a e5       	ldi	r25, 0x5A	; 90
    2024:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    2028:	9a 83       	std	Y+2, r25	; 0x02
    202a:	89 83       	std	Y+1, r24	; 0x01
    202c:	89 81       	ldd	r24, Y+1	; 0x01
    202e:	9a 81       	ldd	r25, Y+2	; 0x02
    2030:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2034:	88 32       	cpi	r24, 0x28	; 40
    2036:	31 f0       	breq	.+12     	; 0x2044 <cj125_sreset+0x3e>
    2038:	89 81       	ldd	r24, Y+1	; 0x01
    203a:	9a 81       	ldd	r25, Y+2	; 0x02
    203c:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2040:	8e 32       	cpi	r24, 0x2E	; 46
    2042:	11 f4       	brne	.+4      	; 0x2048 <cj125_sreset+0x42>
    2044:	80 e0       	ldi	r24, 0x00	; 0
    2046:	01 c0       	rjmp	.+2      	; 0x204a <cj125_sreset+0x44>
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	0f 90       	pop	r0
    204c:	0f 90       	pop	r0
    204e:	df 91       	pop	r29
    2050:	cf 91       	pop	r28
    2052:	08 95       	ret

00002054 <cj125_readSignature>:
    2054:	cf 93       	push	r28
    2056:	df 93       	push	r29
    2058:	00 d0       	rcall	.+0      	; 0x205a <cj125_readSignature+0x6>
    205a:	00 d0       	rcall	.+0      	; 0x205c <cj125_readSignature+0x8>
    205c:	cd b7       	in	r28, 0x3d	; 61
    205e:	de b7       	in	r29, 0x3e	; 62
    2060:	9c 83       	std	Y+4, r25	; 0x04
    2062:	8b 83       	std	Y+3, r24	; 0x03
    2064:	80 e0       	ldi	r24, 0x00	; 0
    2066:	98 e4       	ldi	r25, 0x48	; 72
    2068:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    206c:	9a 83       	std	Y+2, r25	; 0x02
    206e:	89 83       	std	Y+1, r24	; 0x01
    2070:	89 81       	ldd	r24, Y+1	; 0x01
    2072:	9a 81       	ldd	r25, Y+2	; 0x02
    2074:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2078:	88 32       	cpi	r24, 0x28	; 40
    207a:	31 f0       	breq	.+12     	; 0x2088 <cj125_readSignature+0x34>
    207c:	89 81       	ldd	r24, Y+1	; 0x01
    207e:	9a 81       	ldd	r25, Y+2	; 0x02
    2080:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2084:	8e 32       	cpi	r24, 0x2E	; 46
    2086:	59 f4       	brne	.+22     	; 0x209e <cj125_readSignature+0x4a>
    2088:	89 81       	ldd	r24, Y+1	; 0x01
    208a:	9a 81       	ldd	r25, Y+2	; 0x02
    208c:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__low>
    2090:	28 2f       	mov	r18, r24
    2092:	8b 81       	ldd	r24, Y+3	; 0x03
    2094:	9c 81       	ldd	r25, Y+4	; 0x04
    2096:	fc 01       	movw	r30, r24
    2098:	20 83       	st	Z, r18
    209a:	80 e0       	ldi	r24, 0x00	; 0
    209c:	01 c0       	rjmp	.+2      	; 0x20a0 <cj125_readSignature+0x4c>
    209e:	81 e0       	ldi	r24, 0x01	; 1
    20a0:	0f 90       	pop	r0
    20a2:	0f 90       	pop	r0
    20a4:	0f 90       	pop	r0
    20a6:	0f 90       	pop	r0
    20a8:	df 91       	pop	r29
    20aa:	cf 91       	pop	r28
    20ac:	08 95       	ret

000020ae <cj125_readStatus>:
    20ae:	cf 93       	push	r28
    20b0:	df 93       	push	r29
    20b2:	00 d0       	rcall	.+0      	; 0x20b4 <cj125_readStatus+0x6>
    20b4:	00 d0       	rcall	.+0      	; 0x20b6 <cj125_readStatus+0x8>
    20b6:	cd b7       	in	r28, 0x3d	; 61
    20b8:	de b7       	in	r29, 0x3e	; 62
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	8b 83       	std	Y+3, r24	; 0x03
    20be:	1a 82       	std	Y+2, r1	; 0x02
    20c0:	19 82       	std	Y+1, r1	; 0x01
    20c2:	80 e0       	ldi	r24, 0x00	; 0
    20c4:	98 e7       	ldi	r25, 0x78	; 120
    20c6:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    20ca:	9a 83       	std	Y+2, r25	; 0x02
    20cc:	89 83       	std	Y+1, r24	; 0x01
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	9a 81       	ldd	r25, Y+2	; 0x02
    20d2:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	81 70       	andi	r24, 0x01	; 1
    20dc:	99 27       	eor	r25, r25
    20de:	89 2b       	or	r24, r25
    20e0:	11 f0       	breq	.+4      	; 0x20e6 <cj125_readStatus+0x38>
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0a c0       	rjmp	.+20     	; 0x20fa <cj125_readStatus+0x4c>
    20e6:	89 81       	ldd	r24, Y+1	; 0x01
    20e8:	9a 81       	ldd	r25, Y+2	; 0x02
    20ea:	0e 94 e6 0f 	call	0x1fcc	; 0x1fcc <__low>
    20ee:	28 2f       	mov	r18, r24
    20f0:	8b 81       	ldd	r24, Y+3	; 0x03
    20f2:	9c 81       	ldd	r25, Y+4	; 0x04
    20f4:	fc 01       	movw	r30, r24
    20f6:	20 83       	st	Z, r18
    20f8:	80 e0       	ldi	r24, 0x00	; 0
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	df 91       	pop	r29
    2104:	cf 91       	pop	r28
    2106:	08 95       	ret

00002108 <cj125_set_calibration_mode>:
    2108:	cf 93       	push	r28
    210a:	df 93       	push	r29
    210c:	00 d0       	rcall	.+0      	; 0x210e <cj125_set_calibration_mode+0x6>
    210e:	cd b7       	in	r28, 0x3d	; 61
    2110:	de b7       	in	r29, 0x3e	; 62
    2112:	1a 82       	std	Y+2, r1	; 0x02
    2114:	19 82       	std	Y+1, r1	; 0x01
    2116:	8d e9       	ldi	r24, 0x9D	; 157
    2118:	96 e5       	ldi	r25, 0x56	; 86
    211a:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    211e:	9a 83       	std	Y+2, r25	; 0x02
    2120:	89 83       	std	Y+1, r24	; 0x01
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	9c e6       	ldi	r25, 0x6C	; 108
    2126:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    212a:	9a 83       	std	Y+2, r25	; 0x02
    212c:	89 83       	std	Y+1, r24	; 0x01
    212e:	89 81       	ldd	r24, Y+1	; 0x01
    2130:	9a 81       	ldd	r25, Y+2	; 0x02
    2132:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2136:	88 2f       	mov	r24, r24
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	81 70       	andi	r24, 0x01	; 1
    213c:	99 27       	eor	r25, r25
    213e:	89 2b       	or	r24, r25
    2140:	11 f0       	breq	.+4      	; 0x2146 <cj125_set_calibration_mode+0x3e>
    2142:	81 e0       	ldi	r24, 0x01	; 1
    2144:	01 c0       	rjmp	.+2      	; 0x2148 <cj125_set_calibration_mode+0x40>
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	0f 90       	pop	r0
    214a:	0f 90       	pop	r0
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	08 95       	ret

00002152 <cj125_set_running_mode_v8>:
    2152:	cf 93       	push	r28
    2154:	df 93       	push	r29
    2156:	00 d0       	rcall	.+0      	; 0x2158 <cj125_set_running_mode_v8+0x6>
    2158:	cd b7       	in	r28, 0x3d	; 61
    215a:	de b7       	in	r29, 0x3e	; 62
    215c:	1a 82       	std	Y+2, r1	; 0x02
    215e:	19 82       	std	Y+1, r1	; 0x01
    2160:	88 e8       	ldi	r24, 0x88	; 136
    2162:	96 e5       	ldi	r25, 0x56	; 86
    2164:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    2168:	9a 83       	std	Y+2, r25	; 0x02
    216a:	89 83       	std	Y+1, r24	; 0x01
    216c:	89 81       	ldd	r24, Y+1	; 0x01
    216e:	9a 81       	ldd	r25, Y+2	; 0x02
    2170:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    2174:	88 2f       	mov	r24, r24
    2176:	90 e0       	ldi	r25, 0x00	; 0
    2178:	81 70       	andi	r24, 0x01	; 1
    217a:	99 27       	eor	r25, r25
    217c:	89 2b       	or	r24, r25
    217e:	11 f0       	breq	.+4      	; 0x2184 <cj125_set_running_mode_v8+0x32>
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	01 c0       	rjmp	.+2      	; 0x2186 <cj125_set_running_mode_v8+0x34>
    2184:	80 e0       	ldi	r24, 0x00	; 0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	df 91       	pop	r29
    218c:	cf 91       	pop	r28
    218e:	08 95       	ret

00002190 <cj125_read_init1_register>:

tcj125_command_status cj125_read_init1_register (uint16_t *reg)
{
    2190:	cf 93       	push	r28
    2192:	df 93       	push	r29
    2194:	00 d0       	rcall	.+0      	; 0x2196 <cj125_read_init1_register+0x6>
    2196:	00 d0       	rcall	.+0      	; 0x2198 <cj125_read_init1_register+0x8>
    2198:	cd b7       	in	r28, 0x3d	; 61
    219a:	de b7       	in	r29, 0x3e	; 62
    219c:	9c 83       	std	Y+4, r25	; 0x04
    219e:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t statusReg = 0;
    21a0:	1a 82       	std	Y+2, r1	; 0x02
    21a2:	19 82       	std	Y+1, r1	; 0x01

	statusReg = spi_read_write(CJ125_RD_INIT1);
    21a4:	80 e0       	ldi	r24, 0x00	; 0
    21a6:	9c e6       	ldi	r25, 0x6C	; 108
    21a8:	0e 94 b3 1b 	call	0x3766	; 0x3766 <spi_read_write>
    21ac:	9a 83       	std	Y+2, r25	; 0x02
    21ae:	89 83       	std	Y+1, r24	; 0x01
	
	if (BIT_CHECK(high(statusReg), CJ125_DIAG_INSTR_F))
    21b0:	89 81       	ldd	r24, Y+1	; 0x01
    21b2:	9a 81       	ldd	r25, Y+2	; 0x02
    21b4:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <__high>
    21b8:	88 2f       	mov	r24, r24
    21ba:	90 e0       	ldi	r25, 0x00	; 0
    21bc:	81 70       	andi	r24, 0x01	; 1
    21be:	99 27       	eor	r25, r25
    21c0:	89 2b       	or	r24, r25
    21c2:	11 f0       	breq	.+4      	; 0x21c8 <cj125_read_init1_register+0x38>
	{
		return COMMAND_NOT_VALID;
    21c4:	81 e0       	ldi	r24, 0x01	; 1
    21c6:	08 c0       	rjmp	.+16     	; 0x21d8 <cj125_read_init1_register+0x48>
	}
	
	*reg = statusReg;
    21c8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ca:	9c 81       	ldd	r25, Y+4	; 0x04
    21cc:	29 81       	ldd	r18, Y+1	; 0x01
    21ce:	3a 81       	ldd	r19, Y+2	; 0x02
    21d0:	fc 01       	movw	r30, r24
    21d2:	31 83       	std	Z+1, r19	; 0x01
    21d4:	20 83       	st	Z, r18
	
	return COMMAND_VALID;
    21d6:	80 e0       	ldi	r24, 0x00	; 0
}
    21d8:	0f 90       	pop	r0
    21da:	0f 90       	pop	r0
    21dc:	0f 90       	pop	r0
    21de:	0f 90       	pop	r0
    21e0:	df 91       	pop	r29
    21e2:	cf 91       	pop	r28
    21e4:	08 95       	ret

000021e6 <__voltage2dac_millis>:
{
	return ((uint16_t) __v * 5000UL / 1024UL );
}

static __inline uint16_t __voltage2dac_millis (uint16_t millis)
{
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <__voltage2dac_millis+0x6>
    21ec:	cd b7       	in	r28, 0x3d	; 61
    21ee:	de b7       	in	r29, 0x3e	; 62
    21f0:	9a 83       	std	Y+2, r25	; 0x02
    21f2:	89 83       	std	Y+1, r24	; 0x01
	return (uint16_t) (millis * 1024UL / 5000UL);
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	9a 81       	ldd	r25, Y+2	; 0x02
    21f8:	cc 01       	movw	r24, r24
    21fa:	a0 e0       	ldi	r26, 0x00	; 0
    21fc:	b0 e0       	ldi	r27, 0x00	; 0
    21fe:	07 2e       	mov	r0, r23
    2200:	7a e0       	ldi	r23, 0x0A	; 10
    2202:	88 0f       	add	r24, r24
    2204:	99 1f       	adc	r25, r25
    2206:	aa 1f       	adc	r26, r26
    2208:	bb 1f       	adc	r27, r27
    220a:	7a 95       	dec	r23
    220c:	d1 f7       	brne	.-12     	; 0x2202 <__voltage2dac_millis+0x1c>
    220e:	70 2d       	mov	r23, r0
    2210:	28 e8       	ldi	r18, 0x88	; 136
    2212:	33 e1       	ldi	r19, 0x13	; 19
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	50 e0       	ldi	r21, 0x00	; 0
    2218:	bc 01       	movw	r22, r24
    221a:	cd 01       	movw	r24, r26
    221c:	0e 94 b9 1f 	call	0x3f72	; 0x3f72 <__udivmodsi4>
    2220:	da 01       	movw	r26, r20
    2222:	c9 01       	movw	r24, r18
}
    2224:	0f 90       	pop	r0
    2226:	0f 90       	pop	r0
    2228:	df 91       	pop	r29
    222a:	cf 91       	pop	r28
    222c:	08 95       	ret

0000222e <dac_init>:
uint16_t lambda_values_milli[] = {650, 700, 750, 800, 850, 900, 950, 1000, 1050, 1100, 1150, 1200, 1250, 1300};
uint16_t voltage_values_milli[] = {250, 600, 950, 1300, 1650, 2000, 2350, 2700, 3050, 3400, 3750, 4100, 4450, 4800};
uint16_t dac_values[] = {51, 123, 195, 266, 338, 410, 481, 553, 625, 696, 768, 840, 911, 983};

void dac_init (void)
{
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	// dac output enable, dac enable, no autotrigger
	DACON = (1 << DAOE) |(1 << DAEN);
    2236:	80 e9       	ldi	r24, 0x90	; 144
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	23 e0       	ldi	r18, 0x03	; 3
    223c:	fc 01       	movw	r30, r24
    223e:	20 83       	st	Z, r18
	
	// set DAC to default 0.1v 
	DAC = 20;
    2240:	81 e9       	ldi	r24, 0x91	; 145
    2242:	90 e0       	ldi	r25, 0x00	; 0
    2244:	24 e1       	ldi	r18, 0x14	; 20
    2246:	30 e0       	ldi	r19, 0x00	; 0
    2248:	fc 01       	movw	r30, r24
    224a:	31 83       	std	Z+1, r19	; 0x01
    224c:	20 83       	st	Z, r18
}
    224e:	00 00       	nop
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	08 95       	ret

00002256 <calculate_dac_value>:

uint16_t calculate_dac_value (uint16_t lambda_millis)
{
    2256:	cf 93       	push	r28
    2258:	df 93       	push	r29
    225a:	cd b7       	in	r28, 0x3d	; 61
    225c:	de b7       	in	r29, 0x3e	; 62
    225e:	27 97       	sbiw	r28, 0x07	; 7
    2260:	0f b6       	in	r0, 0x3f	; 63
    2262:	f8 94       	cli
    2264:	de bf       	out	0x3e, r29	; 62
    2266:	0f be       	out	0x3f, r0	; 63
    2268:	cd bf       	out	0x3d, r28	; 61
    226a:	9f 83       	std	Y+7, r25	; 0x07
    226c:	8e 83       	std	Y+6, r24	; 0x06
	uint16_t retVal = 0;
    226e:	1a 82       	std	Y+2, r1	; 0x02
    2270:	19 82       	std	Y+1, r1	; 0x01
	uint8_t counter = 0;
    2272:	1b 82       	std	Y+3, r1	; 0x03
	uint16_t voltage_millis = 0;
    2274:	1d 82       	std	Y+5, r1	; 0x05
    2276:	1c 82       	std	Y+4, r1	; 0x04
	
	// check agains ends:
	if (lambda_millis <= lambda_values_milli[0])
    2278:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    227c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    2280:	8e 81       	ldd	r24, Y+6	; 0x06
    2282:	9f 81       	ldd	r25, Y+7	; 0x07
    2284:	28 17       	cp	r18, r24
    2286:	39 07       	cpc	r19, r25
    2288:	30 f0       	brcs	.+12     	; 0x2296 <calculate_dac_value+0x40>
	{
		retVal = dac_values[0];
    228a:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <dac_values>
    228e:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <dac_values+0x1>
    2292:	9a 83       	std	Y+2, r25	; 0x02
    2294:	89 83       	std	Y+1, r24	; 0x01
	}
	
	if ( lambda_millis >= lambda_values_milli[13])
    2296:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <__DATA_REGION_ORIGIN__+0x1a>
    229a:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <__DATA_REGION_ORIGIN__+0x1b>
    229e:	8e 81       	ldd	r24, Y+6	; 0x06
    22a0:	9f 81       	ldd	r25, Y+7	; 0x07
    22a2:	82 17       	cp	r24, r18
    22a4:	93 07       	cpc	r25, r19
    22a6:	08 f4       	brcc	.+2      	; 0x22aa <calculate_dac_value+0x54>
    22a8:	5a c0       	rjmp	.+180    	; 0x235e <calculate_dac_value+0x108>
	{
		retVal = dac_values[13];
    22aa:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <dac_values+0x1a>
    22ae:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <dac_values+0x1b>
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
	}
	
	
	while (retVal == 0 && counter < 14)
    22b6:	53 c0       	rjmp	.+166    	; 0x235e <calculate_dac_value+0x108>
	{
		// do we have exact value?
		if (lambda_values_milli[counter] == lambda_millis)
    22b8:	8b 81       	ldd	r24, Y+3	; 0x03
    22ba:	88 2f       	mov	r24, r24
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	88 0f       	add	r24, r24
    22c0:	99 1f       	adc	r25, r25
    22c2:	80 50       	subi	r24, 0x00	; 0
    22c4:	9f 4f       	sbci	r25, 0xFF	; 255
    22c6:	fc 01       	movw	r30, r24
    22c8:	20 81       	ld	r18, Z
    22ca:	31 81       	ldd	r19, Z+1	; 0x01
    22cc:	8e 81       	ldd	r24, Y+6	; 0x06
    22ce:	9f 81       	ldd	r25, Y+7	; 0x07
    22d0:	28 17       	cp	r18, r24
    22d2:	39 07       	cpc	r19, r25
    22d4:	69 f4       	brne	.+26     	; 0x22f0 <calculate_dac_value+0x9a>
		{
			retVal = dac_values[counter];
    22d6:	8b 81       	ldd	r24, Y+3	; 0x03
    22d8:	88 2f       	mov	r24, r24
    22da:	90 e0       	ldi	r25, 0x00	; 0
    22dc:	88 0f       	add	r24, r24
    22de:	99 1f       	adc	r25, r25
    22e0:	84 5e       	subi	r24, 0xE4	; 228
    22e2:	9e 4f       	sbci	r25, 0xFE	; 254
    22e4:	fc 01       	movw	r30, r24
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	9a 83       	std	Y+2, r25	; 0x02
    22ec:	89 83       	std	Y+1, r24	; 0x01
    22ee:	34 c0       	rjmp	.+104    	; 0x2358 <calculate_dac_value+0x102>
		}
		
		// are we between two values? if so, calculate
		else if (lambda_values_milli[counter] <= lambda_millis && lambda_millis <= lambda_values_milli[counter + 1])
    22f0:	8b 81       	ldd	r24, Y+3	; 0x03
    22f2:	88 2f       	mov	r24, r24
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	88 0f       	add	r24, r24
    22f8:	99 1f       	adc	r25, r25
    22fa:	80 50       	subi	r24, 0x00	; 0
    22fc:	9f 4f       	sbci	r25, 0xFF	; 255
    22fe:	fc 01       	movw	r30, r24
    2300:	20 81       	ld	r18, Z
    2302:	31 81       	ldd	r19, Z+1	; 0x01
    2304:	8e 81       	ldd	r24, Y+6	; 0x06
    2306:	9f 81       	ldd	r25, Y+7	; 0x07
    2308:	82 17       	cp	r24, r18
    230a:	93 07       	cpc	r25, r19
    230c:	28 f1       	brcs	.+74     	; 0x2358 <calculate_dac_value+0x102>
    230e:	8b 81       	ldd	r24, Y+3	; 0x03
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	01 96       	adiw	r24, 0x01	; 1
    2316:	88 0f       	add	r24, r24
    2318:	99 1f       	adc	r25, r25
    231a:	80 50       	subi	r24, 0x00	; 0
    231c:	9f 4f       	sbci	r25, 0xFF	; 255
    231e:	fc 01       	movw	r30, r24
    2320:	20 81       	ld	r18, Z
    2322:	31 81       	ldd	r19, Z+1	; 0x01
    2324:	8e 81       	ldd	r24, Y+6	; 0x06
    2326:	9f 81       	ldd	r25, Y+7	; 0x07
    2328:	28 17       	cp	r18, r24
    232a:	39 07       	cpc	r19, r25
    232c:	a8 f0       	brcs	.+42     	; 0x2358 <calculate_dac_value+0x102>
		{
			// calculate voltage for given lambda:
			voltage_millis = lambda_millis * 7 - 4300;
    232e:	2e 81       	ldd	r18, Y+6	; 0x06
    2330:	3f 81       	ldd	r19, Y+7	; 0x07
    2332:	c9 01       	movw	r24, r18
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	88 0f       	add	r24, r24
    233a:	99 1f       	adc	r25, r25
    233c:	88 0f       	add	r24, r24
    233e:	99 1f       	adc	r25, r25
    2340:	82 1b       	sub	r24, r18
    2342:	93 0b       	sbc	r25, r19
    2344:	8c 5c       	subi	r24, 0xCC	; 204
    2346:	90 41       	sbci	r25, 0x10	; 16
    2348:	9d 83       	std	Y+5, r25	; 0x05
    234a:	8c 83       	std	Y+4, r24	; 0x04
			retVal = voltage2dac_millis(voltage_millis);	
    234c:	8c 81       	ldd	r24, Y+4	; 0x04
    234e:	9d 81       	ldd	r25, Y+5	; 0x05
    2350:	0e 94 f3 10 	call	0x21e6	; 0x21e6 <__voltage2dac_millis>
    2354:	9a 83       	std	Y+2, r25	; 0x02
    2356:	89 83       	std	Y+1, r24	; 0x01
		}
		counter++;
    2358:	8b 81       	ldd	r24, Y+3	; 0x03
    235a:	8f 5f       	subi	r24, 0xFF	; 255
    235c:	8b 83       	std	Y+3, r24	; 0x03
	{
		retVal = dac_values[13];
	}
	
	
	while (retVal == 0 && counter < 14)
    235e:	89 81       	ldd	r24, Y+1	; 0x01
    2360:	9a 81       	ldd	r25, Y+2	; 0x02
    2362:	89 2b       	or	r24, r25
    2364:	21 f4       	brne	.+8      	; 0x236e <calculate_dac_value+0x118>
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	8e 30       	cpi	r24, 0x0E	; 14
    236a:	08 f4       	brcc	.+2      	; 0x236e <calculate_dac_value+0x118>
    236c:	a5 cf       	rjmp	.-182    	; 0x22b8 <calculate_dac_value+0x62>
			retVal = voltage2dac_millis(voltage_millis);	
		}
		counter++;
	}
	
	return retVal;	
    236e:	89 81       	ldd	r24, Y+1	; 0x01
    2370:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2372:	27 96       	adiw	r28, 0x07	; 7
    2374:	0f b6       	in	r0, 0x3f	; 63
    2376:	f8 94       	cli
    2378:	de bf       	out	0x3e, r29	; 62
    237a:	0f be       	out	0x3f, r0	; 63
    237c:	cd bf       	out	0x3d, r28	; 61
    237e:	df 91       	pop	r29
    2380:	cf 91       	pop	r28
    2382:	08 95       	ret

00002384 <dac_setValue>:

void dac_setValue(uint16_t value)
{
    2384:	cf 93       	push	r28
    2386:	df 93       	push	r29
    2388:	00 d0       	rcall	.+0      	; 0x238a <dac_setValue+0x6>
    238a:	cd b7       	in	r28, 0x3d	; 61
    238c:	de b7       	in	r29, 0x3e	; 62
    238e:	9a 83       	std	Y+2, r25	; 0x02
    2390:	89 83       	std	Y+1, r24	; 0x01
	DAC = value;
    2392:	81 e9       	ldi	r24, 0x91	; 145
    2394:	90 e0       	ldi	r25, 0x00	; 0
    2396:	29 81       	ldd	r18, Y+1	; 0x01
    2398:	3a 81       	ldd	r19, Y+2	; 0x02
    239a:	fc 01       	movw	r30, r24
    239c:	31 83       	std	Z+1, r19	; 0x01
    239e:	20 83       	st	Z, r18
}
    23a0:	00 00       	nop
    23a2:	0f 90       	pop	r0
    23a4:	0f 90       	pop	r0
    23a6:	df 91       	pop	r29
    23a8:	cf 91       	pop	r28
    23aa:	08 95       	ret

000023ac <dac_update_output>:

void dac_update_output (uint16_t lambda_millis)
{
    23ac:	cf 93       	push	r28
    23ae:	df 93       	push	r29
    23b0:	00 d0       	rcall	.+0      	; 0x23b2 <dac_update_output+0x6>
    23b2:	00 d0       	rcall	.+0      	; 0x23b4 <dac_update_output+0x8>
    23b4:	cd b7       	in	r28, 0x3d	; 61
    23b6:	de b7       	in	r29, 0x3e	; 62
    23b8:	9c 83       	std	Y+4, r25	; 0x04
    23ba:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t tmpValue = 0;
    23bc:	1a 82       	std	Y+2, r1	; 0x02
    23be:	19 82       	std	Y+1, r1	; 0x01
	
	tmpValue = calculate_dac_value(lambda_millis);
    23c0:	8b 81       	ldd	r24, Y+3	; 0x03
    23c2:	9c 81       	ldd	r25, Y+4	; 0x04
    23c4:	0e 94 2b 11 	call	0x2256	; 0x2256 <calculate_dac_value>
    23c8:	9a 83       	std	Y+2, r25	; 0x02
    23ca:	89 83       	std	Y+1, r24	; 0x01
	DAC = tmpValue;
    23cc:	81 e9       	ldi	r24, 0x91	; 145
    23ce:	90 e0       	ldi	r25, 0x00	; 0
    23d0:	29 81       	ldd	r18, Y+1	; 0x01
    23d2:	3a 81       	ldd	r19, Y+2	; 0x02
    23d4:	fc 01       	movw	r30, r24
    23d6:	31 83       	std	Z+1, r19	; 0x01
    23d8:	20 83       	st	Z, r18
    23da:	00 00       	nop
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	0f 90       	pop	r0
    23e4:	df 91       	pop	r29
    23e6:	cf 91       	pop	r28
    23e8:	08 95       	ret

000023ea <__adc2voltage_millis>:
{
	return ((float) __v * 5UL / 1024UL );
}

static __inline uint16_t __adc2voltage_millis(uint16_t __v)
{
    23ea:	cf 93       	push	r28
    23ec:	df 93       	push	r29
    23ee:	00 d0       	rcall	.+0      	; 0x23f0 <__adc2voltage_millis+0x6>
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	89 83       	std	Y+1, r24	; 0x01
	return ((uint16_t) __v * 5000UL / 1024UL );
    23f8:	89 81       	ldd	r24, Y+1	; 0x01
    23fa:	9a 81       	ldd	r25, Y+2	; 0x02
    23fc:	9c 01       	movw	r18, r24
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	50 e0       	ldi	r21, 0x00	; 0
    2402:	88 e8       	ldi	r24, 0x88	; 136
    2404:	93 e1       	ldi	r25, 0x13	; 19
    2406:	dc 01       	movw	r26, r24
    2408:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    240c:	dc 01       	movw	r26, r24
    240e:	cb 01       	movw	r24, r22
    2410:	07 2e       	mov	r0, r23
    2412:	7a e0       	ldi	r23, 0x0A	; 10
    2414:	b6 95       	lsr	r27
    2416:	a7 95       	ror	r26
    2418:	97 95       	ror	r25
    241a:	87 95       	ror	r24
    241c:	7a 95       	dec	r23
    241e:	d1 f7       	brne	.-12     	; 0x2414 <__adc2voltage_millis+0x2a>
    2420:	70 2d       	mov	r23, r0
}
    2422:	0f 90       	pop	r0
    2424:	0f 90       	pop	r0
    2426:	df 91       	pop	r29
    2428:	cf 91       	pop	r28
    242a:	08 95       	ret

0000242c <__duty_cycle2voltage>:
{
	return (uint16_t)(((float)_targetVoltageMillis / (float)_supplyVoltageMillis) * _steps - 1);
}

static __inline uint16_t __duty_cycle2voltage(uint16_t _supplyVoltageMillis, uint16_t _dutyCycle, uint16_t _steps)
{
    242c:	cf 92       	push	r12
    242e:	df 92       	push	r13
    2430:	ef 92       	push	r14
    2432:	ff 92       	push	r15
    2434:	cf 93       	push	r28
    2436:	df 93       	push	r29
    2438:	00 d0       	rcall	.+0      	; 0x243a <__duty_cycle2voltage+0xe>
    243a:	00 d0       	rcall	.+0      	; 0x243c <__duty_cycle2voltage+0x10>
    243c:	00 d0       	rcall	.+0      	; 0x243e <__duty_cycle2voltage+0x12>
    243e:	cd b7       	in	r28, 0x3d	; 61
    2440:	de b7       	in	r29, 0x3e	; 62
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	7c 83       	std	Y+4, r23	; 0x04
    2448:	6b 83       	std	Y+3, r22	; 0x03
    244a:	5e 83       	std	Y+6, r21	; 0x06
    244c:	4d 83       	std	Y+5, r20	; 0x05
	return ((float) _supplyVoltageMillis / (float) _steps) *_dutyCycle;
    244e:	89 81       	ldd	r24, Y+1	; 0x01
    2450:	9a 81       	ldd	r25, Y+2	; 0x02
    2452:	cc 01       	movw	r24, r24
    2454:	a0 e0       	ldi	r26, 0x00	; 0
    2456:	b0 e0       	ldi	r27, 0x00	; 0
    2458:	bc 01       	movw	r22, r24
    245a:	cd 01       	movw	r24, r26
    245c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2460:	6b 01       	movw	r12, r22
    2462:	7c 01       	movw	r14, r24
    2464:	8d 81       	ldd	r24, Y+5	; 0x05
    2466:	9e 81       	ldd	r25, Y+6	; 0x06
    2468:	cc 01       	movw	r24, r24
    246a:	a0 e0       	ldi	r26, 0x00	; 0
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	bc 01       	movw	r22, r24
    2470:	cd 01       	movw	r24, r26
    2472:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9c 01       	movw	r18, r24
    247c:	ad 01       	movw	r20, r26
    247e:	c7 01       	movw	r24, r14
    2480:	b6 01       	movw	r22, r12
    2482:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__divsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	6c 01       	movw	r12, r24
    248c:	7d 01       	movw	r14, r26
    248e:	8b 81       	ldd	r24, Y+3	; 0x03
    2490:	9c 81       	ldd	r25, Y+4	; 0x04
    2492:	cc 01       	movw	r24, r24
    2494:	a0 e0       	ldi	r26, 0x00	; 0
    2496:	b0 e0       	ldi	r27, 0x00	; 0
    2498:	bc 01       	movw	r22, r24
    249a:	cd 01       	movw	r24, r26
    249c:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    24a0:	dc 01       	movw	r26, r24
    24a2:	cb 01       	movw	r24, r22
    24a4:	9c 01       	movw	r18, r24
    24a6:	ad 01       	movw	r20, r26
    24a8:	c7 01       	movw	r24, r14
    24aa:	b6 01       	movw	r22, r12
    24ac:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    24b0:	dc 01       	movw	r26, r24
    24b2:	cb 01       	movw	r24, r22
    24b4:	bc 01       	movw	r22, r24
    24b6:	cd 01       	movw	r24, r26
    24b8:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__fixunssfsi>
    24bc:	dc 01       	movw	r26, r24
    24be:	cb 01       	movw	r24, r22
}
    24c0:	26 96       	adiw	r28, 0x06	; 6
    24c2:	0f b6       	in	r0, 0x3f	; 63
    24c4:	f8 94       	cli
    24c6:	de bf       	out	0x3e, r29	; 62
    24c8:	0f be       	out	0x3f, r0	; 63
    24ca:	cd bf       	out	0x3d, r28	; 61
    24cc:	df 91       	pop	r29
    24ce:	cf 91       	pop	r28
    24d0:	ff 90       	pop	r15
    24d2:	ef 90       	pop	r14
    24d4:	df 90       	pop	r13
    24d6:	cf 90       	pop	r12
    24d8:	08 95       	ret

000024da <main>:
extern tSensor sensor1;
extern tBoard board;
extern volatile uint16_t ms_counter;

int main(void)
{
    24da:	0f 93       	push	r16
    24dc:	cf 93       	push	r28
    24de:	df 93       	push	r29
    24e0:	cd b7       	in	r28, 0x3d	; 61
    24e2:	de b7       	in	r29, 0x3e	; 62
    24e4:	2a 97       	sbiw	r28, 0x0a	; 10
    24e6:	0f b6       	in	r0, 0x3f	; 63
    24e8:	f8 94       	cli
    24ea:	de bf       	out	0x3e, r29	; 62
    24ec:	0f be       	out	0x3f, r0	; 63
    24ee:	cd bf       	out	0x3d, r28	; 61
	uint8_t counter = 0;
    24f0:	19 82       	std	Y+1, r1	; 0x01
	uint16_t adcValue = 0;
    24f2:	1b 82       	std	Y+3, r1	; 0x03
    24f4:	1a 82       	std	Y+2, r1	; 0x02
	uint16_t pid = 0;
    24f6:	1d 82       	std	Y+5, r1	; 0x05
    24f8:	1c 82       	std	Y+4, r1	; 0x04
	tcj125_command_status commStatus;
	bool enabled = false;
    24fa:	1e 82       	std	Y+6, r1	; 0x06
	uint8_t evapCounter = 0;
    24fc:	1f 82       	std	Y+7, r1	; 0x07
	uint16_t registerData = 0;
    24fe:	1a 86       	std	Y+10, r1	; 0x0a
    2500:	19 86       	std	Y+9, r1	; 0x09

	adc_init();
    2502:	0e 94 7d 00 	call	0xfa	; 0xfa <adc_init>
	spi_init();
    2506:	0e 94 8b 1b 	call	0x3716	; 0x3716 <spi_init>
	dac_init();
    250a:	0e 94 17 11 	call	0x222e	; 0x222e <dac_init>
	can_network_init(1);
    250e:	81 e0       	ldi	r24, 0x01	; 1
    2510:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <can_network_init>

	board_init(&board);	
    2514:	87 ee       	ldi	r24, 0xE7	; 231
    2516:	91 e0       	ldi	r25, 0x01	; 1
    2518:	0e 94 00 1c 	call	0x3800	; 0x3800 <board_init>
	sensor_init(&sensor1, 8);
    251c:	68 e0       	ldi	r22, 0x08	; 8
    251e:	8b ec       	ldi	r24, 0xCB	; 203
    2520:	91 e0       	ldi	r25, 0x01	; 1
    2522:	0e 94 f0 14 	call	0x29e0	; 0x29e0 <sensor_init>
	board_read_inputs(&board);
    2526:	87 ee       	ldi	r24, 0xE7	; 231
    2528:	91 e0       	ldi	r25, 0x01	; 1
    252a:	0e 94 39 1c 	call	0x3872	; 0x3872 <board_read_inputs>
	
	timer_delay_ms(100);
    252e:	84 e6       	ldi	r24, 0x64	; 100
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	0e 94 a6 1c 	call	0x394c	; 0x394c <timer_delay_ms>
	
	sei();
    2536:	78 94       	sei
	
	commStatus = cj125_sreset();
    2538:	0e 94 03 10 	call	0x2006	; 0x2006 <cj125_sreset>
    253c:	88 87       	std	Y+8, r24	; 0x08
	
	commStatus = cj125_read_init1_register(&registerData);
    253e:	ce 01       	movw	r24, r28
    2540:	09 96       	adiw	r24, 0x09	; 9
    2542:	0e 94 c8 10 	call	0x2190	; 0x2190 <cj125_read_init1_register>
    2546:	88 87       	std	Y+8, r24	; 0x08
	
	commStatus = cj125_readSignature(&board.cj125_signature);
    2548:	87 ee       	ldi	r24, 0xE7	; 231
    254a:	91 e0       	ldi	r25, 0x01	; 1
    254c:	0e 94 2a 10 	call	0x2054	; 0x2054 <cj125_readSignature>
    2550:	88 87       	std	Y+8, r24	; 0x08

	commStatus = cj125_set_calibration_mode();
    2552:	0e 94 84 10 	call	0x2108	; 0x2108 <cj125_set_calibration_mode>
    2556:	88 87       	std	Y+8, r24	; 0x08
	
	timer_delay_ms(500);
    2558:	84 ef       	ldi	r24, 0xF4	; 244
    255a:	91 e0       	ldi	r25, 0x01	; 1
    255c:	0e 94 a6 1c 	call	0x394c	; 0x394c <timer_delay_ms>
	
	commStatus = cj125_read_init1_register(&registerData);
    2560:	ce 01       	movw	r24, r28
    2562:	09 96       	adiw	r24, 0x09	; 9
    2564:	0e 94 c8 10 	call	0x2190	; 0x2190 <cj125_read_init1_register>
    2568:	88 87       	std	Y+8, r24	; 0x08
	// Ur value: lower value means hotter sensor...
	// Ur_ref is something round about 1v (ADC 208 = 1015mV)
	// Ua_ref is something round about 1.5v (ADC 309 =  1503mV)
	
	
	sensor1.Ur_ref_raw = adc_read_UR();
    256a:	0e 94 3c 01 	call	0x278	; 0x278 <adc_read_UR>
    256e:	90 93 d3 01 	sts	0x01D3, r25	; 0x8001d3 <sensor1+0x8>
    2572:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <sensor1+0x7>
	sensor1.Ur_ref = adc2voltage_millis(sensor1.Ur_ref_raw);
    2576:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sensor1+0x7>
    257a:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <sensor1+0x8>
    257e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__adc2voltage_millis>
    2582:	90 93 d1 01 	sts	0x01D1, r25	; 0x8001d1 <sensor1+0x6>
    2586:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <sensor1+0x5>
	sensor1.Ua_ref = adc2voltage_millis(adc_read_UA());
    258a:	0e 94 28 01 	call	0x250	; 0x250 <adc_read_UA>
    258e:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__adc2voltage_millis>
    2592:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <sensor1+0x4>
    2596:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <sensor1+0x3>

	cj125_set_running_mode_v8();
    259a:	0e 94 a9 10 	call	0x2152	; 0x2152 <cj125_set_running_mode_v8>
	timer_delay_ms(500);
    259e:	84 ef       	ldi	r24, 0xF4	; 244
    25a0:	91 e0       	ldi	r25, 0x01	; 1
    25a2:	0e 94 a6 1c 	call	0x394c	; 0x394c <timer_delay_ms>

	sensor_update_status();
    25a6:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <sensor_update_status>

	// check activation input before this both steps!!!	
	
	while (counter < 10) 
    25aa:	34 c0       	rjmp	.+104    	; 0x2614 <main+0x13a>
	{
		sensor_update_status();
    25ac:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <sensor_update_status>
		can_send_aem_message(sensor1);
    25b0:	8d b7       	in	r24, 0x3d	; 61
    25b2:	9e b7       	in	r25, 0x3e	; 62
    25b4:	4c 97       	sbiw	r24, 0x1c	; 28
    25b6:	0f b6       	in	r0, 0x3f	; 63
    25b8:	f8 94       	cli
    25ba:	9e bf       	out	0x3e, r25	; 62
    25bc:	0f be       	out	0x3f, r0	; 63
    25be:	8d bf       	out	0x3d, r24	; 61
    25c0:	8d b7       	in	r24, 0x3d	; 61
    25c2:	9e b7       	in	r25, 0x3e	; 62
    25c4:	01 96       	adiw	r24, 0x01	; 1
    25c6:	2c e1       	ldi	r18, 0x1C	; 28
    25c8:	eb ec       	ldi	r30, 0xCB	; 203
    25ca:	f1 e0       	ldi	r31, 0x01	; 1
    25cc:	dc 01       	movw	r26, r24
    25ce:	01 90       	ld	r0, Z+
    25d0:	0d 92       	st	X+, r0
    25d2:	2a 95       	dec	r18
    25d4:	e1 f7       	brne	.-8      	; 0x25ce <main+0xf4>
    25d6:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <can_send_aem_message>
    25da:	ed b7       	in	r30, 0x3d	; 61
    25dc:	fe b7       	in	r31, 0x3e	; 62
    25de:	7c 96       	adiw	r30, 0x1c	; 28
    25e0:	0f b6       	in	r0, 0x3f	; 63
    25e2:	f8 94       	cli
    25e4:	de bf       	out	0x3e, r29	; 62
    25e6:	0f be       	out	0x3f, r0	; 63
    25e8:	cd bf       	out	0x3d, r28	; 61
		#ifdef DEBUG_CAN
			can_send_debug_message(sensor1.Ur_ref_raw, 0, 0, board.cj125_signature, sensor1.diagRegister);
    25ea:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <sensor1+0x18>
    25ee:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <board>
    25f2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sensor1+0x7>
    25f6:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <sensor1+0x8>
    25fa:	03 2f       	mov	r16, r19
    25fc:	40 e0       	ldi	r20, 0x00	; 0
    25fe:	60 e0       	ldi	r22, 0x00	; 0
    2600:	70 e0       	ldi	r23, 0x00	; 0
    2602:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <can_send_debug_message>
		#endif
		
		timer_delay_ms(100);
    2606:	84 e6       	ldi	r24, 0x64	; 100
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	0e 94 a6 1c 	call	0x394c	; 0x394c <timer_delay_ms>
		counter++;
    260e:	89 81       	ldd	r24, Y+1	; 0x01
    2610:	8f 5f       	subi	r24, 0xFF	; 255
    2612:	89 83       	std	Y+1, r24	; 0x01

	sensor_update_status();

	// check activation input before this both steps!!!	
	
	while (counter < 10) 
    2614:	89 81       	ldd	r24, Y+1	; 0x01
    2616:	8a 30       	cpi	r24, 0x0A	; 10
    2618:	48 f2       	brcs	.-110    	; 0x25ac <main+0xd2>
		
		timer_delay_ms(100);
		counter++;
	}
	
	counter = 0;
    261a:	19 82       	std	Y+1, r1	; 0x01
	
	sensor1.SensorStatus = EVAP_START_UP;
    261c:	8f e0       	ldi	r24, 0x0F	; 15
    261e:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
	
	enabled = isEnabled();
    2622:	0e 94 56 1c 	call	0x38ac	; 0x38ac <isEnabled>
    2626:	8e 83       	std	Y+6, r24	; 0x06
	
	heater_setVoltage(1500);
    2628:	8c ed       	ldi	r24, 0xDC	; 220
    262a:	95 e0       	ldi	r25, 0x05	; 5
    262c:	0e 94 76 19 	call	0x32ec	; 0x32ec <heater_setVoltage>
	
	while (counter < 25)
    2630:	34 c0       	rjmp	.+104    	; 0x269a <main+0x1c0>
	{
		sensor_update_status();
    2632:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <sensor_update_status>
		can_send_aem_message(sensor1);
    2636:	8d b7       	in	r24, 0x3d	; 61
    2638:	9e b7       	in	r25, 0x3e	; 62
    263a:	4c 97       	sbiw	r24, 0x1c	; 28
    263c:	0f b6       	in	r0, 0x3f	; 63
    263e:	f8 94       	cli
    2640:	9e bf       	out	0x3e, r25	; 62
    2642:	0f be       	out	0x3f, r0	; 63
    2644:	8d bf       	out	0x3d, r24	; 61
    2646:	8d b7       	in	r24, 0x3d	; 61
    2648:	9e b7       	in	r25, 0x3e	; 62
    264a:	01 96       	adiw	r24, 0x01	; 1
    264c:	2c e1       	ldi	r18, 0x1C	; 28
    264e:	eb ec       	ldi	r30, 0xCB	; 203
    2650:	f1 e0       	ldi	r31, 0x01	; 1
    2652:	dc 01       	movw	r26, r24
    2654:	01 90       	ld	r0, Z+
    2656:	0d 92       	st	X+, r0
    2658:	2a 95       	dec	r18
    265a:	e1 f7       	brne	.-8      	; 0x2654 <main+0x17a>
    265c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <can_send_aem_message>
    2660:	ed b7       	in	r30, 0x3d	; 61
    2662:	fe b7       	in	r31, 0x3e	; 62
    2664:	7c 96       	adiw	r30, 0x1c	; 28
    2666:	0f b6       	in	r0, 0x3f	; 63
    2668:	f8 94       	cli
    266a:	de bf       	out	0x3e, r29	; 62
    266c:	0f be       	out	0x3f, r0	; 63
    266e:	cd bf       	out	0x3d, r28	; 61
		#ifdef DEBUG_CAN
			can_send_debug_message(sensor1.Ur_ref_raw, 0, 0, board.cj125_signature, sensor1.diagRegister);
    2670:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <sensor1+0x18>
    2674:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <board>
    2678:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sensor1+0x7>
    267c:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <sensor1+0x8>
    2680:	03 2f       	mov	r16, r19
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	60 e0       	ldi	r22, 0x00	; 0
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <can_send_debug_message>
		#endif
		timer_delay_ms(100);
    268c:	84 e6       	ldi	r24, 0x64	; 100
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	0e 94 a6 1c 	call	0x394c	; 0x394c <timer_delay_ms>
		counter++;
    2694:	89 81       	ldd	r24, Y+1	; 0x01
    2696:	8f 5f       	subi	r24, 0xFF	; 255
    2698:	89 83       	std	Y+1, r24	; 0x01
	
	enabled = isEnabled();
	
	heater_setVoltage(1500);
	
	while (counter < 25)
    269a:	89 81       	ldd	r24, Y+1	; 0x01
    269c:	89 31       	cpi	r24, 0x19	; 25
    269e:	48 f2       	brcs	.-110    	; 0x2632 <main+0x158>
		#endif
		timer_delay_ms(100);
		counter++;
	}
	
	sensor1.SensorStatus = WARMING_UP;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
	
	init_1ms_timer();
    26a6:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <init_1ms_timer>
	
	while(1)
	{
		if (BIT_CHECK(TIMER_TASKS, BIT_TIMER_10ms))
    26aa:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    26ae:	88 2f       	mov	r24, r24
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	81 70       	andi	r24, 0x01	; 1
    26b4:	99 27       	eor	r25, r25
    26b6:	89 2b       	or	r24, r25
    26b8:	09 f4       	brne	.+2      	; 0x26bc <main+0x1e2>
    26ba:	42 c0       	rjmp	.+132    	; 0x2740 <main+0x266>
		{
			BIT_CLEAR(TIMER_TASKS, BIT_TIMER_10ms);
    26bc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    26c0:	8e 7f       	andi	r24, 0xFE	; 254
    26c2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
				
			if (sensor1.SensorStatus == RUN && sensor1.SystemVoltageOK == true && sensor1.SensorFaultState == OK)
    26c6:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    26ca:	86 30       	cpi	r24, 0x06	; 6
    26cc:	c1 f4       	brne	.+48     	; 0x26fe <main+0x224>
    26ce:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sensor1+0x17>
    26d2:	88 23       	and	r24, r24
    26d4:	a1 f0       	breq	.+40     	; 0x26fe <main+0x224>
    26d6:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    26da:	88 23       	and	r24, r24
    26dc:	81 f4       	brne	.+32     	; 0x26fe <main+0x224>
			{
				sensor_update_ua(&sensor1, adc2voltage_millis(adc_read_UA()));
    26de:	0e 94 28 01 	call	0x250	; 0x250 <adc_read_UA>
    26e2:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__adc2voltage_millis>
    26e6:	bc 01       	movw	r22, r24
    26e8:	8b ec       	ldi	r24, 0xCB	; 203
    26ea:	91 e0       	ldi	r25, 0x01	; 1
    26ec:	0e 94 13 19 	call	0x3226	; 0x3226 <sensor_update_ua>
				dac_update_output(sensor1.Lambda);
    26f0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <sensor1+0xf>
    26f4:	90 91 db 01 	lds	r25, 0x01DB	; 0x8001db <sensor1+0x10>
    26f8:	0e 94 d6 11 	call	0x23ac	; 0x23ac <dac_update_output>
    26fc:	04 c0       	rjmp	.+8      	; 0x2706 <main+0x22c>
			} else {
				dac_setValue(0);
    26fe:	80 e0       	ldi	r24, 0x00	; 0
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	0e 94 c2 11 	call	0x2384	; 0x2384 <dac_setValue>
			}
			
			can_send_aem_message(sensor1);			
    2706:	8d b7       	in	r24, 0x3d	; 61
    2708:	9e b7       	in	r25, 0x3e	; 62
    270a:	4c 97       	sbiw	r24, 0x1c	; 28
    270c:	0f b6       	in	r0, 0x3f	; 63
    270e:	f8 94       	cli
    2710:	9e bf       	out	0x3e, r25	; 62
    2712:	0f be       	out	0x3f, r0	; 63
    2714:	8d bf       	out	0x3d, r24	; 61
    2716:	8d b7       	in	r24, 0x3d	; 61
    2718:	9e b7       	in	r25, 0x3e	; 62
    271a:	01 96       	adiw	r24, 0x01	; 1
    271c:	2c e1       	ldi	r18, 0x1C	; 28
    271e:	eb ec       	ldi	r30, 0xCB	; 203
    2720:	f1 e0       	ldi	r31, 0x01	; 1
    2722:	dc 01       	movw	r26, r24
    2724:	01 90       	ld	r0, Z+
    2726:	0d 92       	st	X+, r0
    2728:	2a 95       	dec	r18
    272a:	e1 f7       	brne	.-8      	; 0x2724 <main+0x24a>
    272c:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <can_send_aem_message>
    2730:	ed b7       	in	r30, 0x3d	; 61
    2732:	fe b7       	in	r31, 0x3e	; 62
    2734:	7c 96       	adiw	r30, 0x1c	; 28
    2736:	0f b6       	in	r0, 0x3f	; 63
    2738:	f8 94       	cli
    273a:	de bf       	out	0x3e, r29	; 62
    273c:	0f be       	out	0x3f, r0	; 63
    273e:	cd bf       	out	0x3d, r28	; 61
		}
		
		if (BIT_CHECK(TIMER_TASKS, BIT_TIMER_100ms))
    2740:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2744:	88 2f       	mov	r24, r24
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	88 70       	andi	r24, 0x08	; 8
    274a:	99 27       	eor	r25, r25
    274c:	89 2b       	or	r24, r25
    274e:	09 f4       	brne	.+2      	; 0x2752 <main+0x278>
    2750:	5c c0       	rjmp	.+184    	; 0x280a <main+0x330>
		{
			BIT_CLEAR(TIMER_TASKS, BIT_TIMER_100ms);
    2752:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2756:	87 7f       	andi	r24, 0xF7	; 247
    2758:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
			sensor_update_status();
    275c:	0e 94 b1 15 	call	0x2b62	; 0x2b62 <sensor_update_status>
			board_read_inputs(&board);
    2760:	87 ee       	ldi	r24, 0xE7	; 231
    2762:	91 e0       	ldi	r25, 0x01	; 1
    2764:	0e 94 39 1c 	call	0x3872	; 0x3872 <board_read_inputs>
			
			// waiting for activation
			if (sensor1.SensorStatus == RESET && isEnabled())
    2768:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    276c:	88 23       	and	r24, r24
    276e:	11 f4       	brne	.+4      	; 0x2774 <main+0x29a>
    2770:	0e 94 56 1c 	call	0x38ac	; 0x38ac <isEnabled>
			{
				// sensor1.SensorStatus = EVAP_START_UP;
			}
			
			if (sensor1.SensorFaultState == OK && sensor1.SensorStatus == RUN && sensor1.SystemVoltageOK)
    2774:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    2778:	88 23       	and	r24, r24
    277a:	71 f5       	brne	.+92     	; 0x27d8 <main+0x2fe>
    277c:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    2780:	86 30       	cpi	r24, 0x06	; 6
    2782:	51 f5       	brne	.+84     	; 0x27d8 <main+0x2fe>
    2784:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sensor1+0x17>
    2788:	88 23       	and	r24, r24
    278a:	31 f1       	breq	.+76     	; 0x27d8 <main+0x2fe>
			{
				adcValue = adc_read_UR();
    278c:	0e 94 3c 01 	call	0x278	; 0x278 <adc_read_UR>
    2790:	9b 83       	std	Y+3, r25	; 0x03
    2792:	8a 83       	std	Y+2, r24	; 0x02
				pid = calc_pid (sensor1.Ur_ref_raw, adcValue, true);
    2794:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sensor1+0x7>
    2798:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <sensor1+0x8>
    279c:	2a 81       	ldd	r18, Y+2	; 0x02
    279e:	3b 81       	ldd	r19, Y+3	; 0x03
    27a0:	41 e0       	ldi	r20, 0x01	; 1
    27a2:	b9 01       	movw	r22, r18
    27a4:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <calc_pid>
    27a8:	9d 83       	std	Y+5, r25	; 0x05
    27aa:	8c 83       	std	Y+4, r24	; 0x04
							
				heater_setVoltage(duty_cycle2voltage(sensor1.SystemVoltage, pid, 256));
    27ac:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <sensor1+0x15>
    27b0:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <sensor1+0x16>
    27b4:	2c 81       	ldd	r18, Y+4	; 0x04
    27b6:	3d 81       	ldd	r19, Y+5	; 0x05
    27b8:	40 e0       	ldi	r20, 0x00	; 0
    27ba:	51 e0       	ldi	r21, 0x01	; 1
    27bc:	b9 01       	movw	r22, r18
    27be:	0e 94 16 12 	call	0x242c	; 0x242c <__duty_cycle2voltage>
    27c2:	0e 94 76 19 	call	0x32ec	; 0x32ec <heater_setVoltage>
				
				sensor_update_ur(&sensor1, adc2voltage_millis(adcValue));
    27c6:	8a 81       	ldd	r24, Y+2	; 0x02
    27c8:	9b 81       	ldd	r25, Y+3	; 0x03
    27ca:	0e 94 f5 11 	call	0x23ea	; 0x23ea <__adc2voltage_millis>
    27ce:	bc 01       	movw	r22, r24
    27d0:	8b ec       	ldi	r24, 0xCB	; 203
    27d2:	91 e0       	ldi	r25, 0x01	; 1
    27d4:	0e 94 5d 19 	call	0x32ba	; 0x32ba <sensor_update_ur>
			}
			
			#ifdef DEBUG_CAN
				can_send_debug_message(sensor1.Ur_ref_raw, adcValue, pid, board.cj125_signature, sensor1.diagRegister);
    27d8:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <sensor1+0x18>
    27dc:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <board>
    27e0:	3c 81       	ldd	r19, Y+4	; 0x04
    27e2:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <sensor1+0x7>
    27e6:	90 91 d3 01 	lds	r25, 0x01D3	; 0x8001d3 <sensor1+0x8>
    27ea:	6a 81       	ldd	r22, Y+2	; 0x02
    27ec:	7b 81       	ldd	r23, Y+3	; 0x03
    27ee:	04 2f       	mov	r16, r20
    27f0:	43 2f       	mov	r20, r19
    27f2:	0e 94 4a 0f 	call	0x1e94	; 0x1e94 <can_send_debug_message>
			#endif
			
			// here we have to check heater und adjust PID!
			// for now we stay at 13v...
			PORTB ^= (1 << PINB5);
    27f6:	85 e2       	ldi	r24, 0x25	; 37
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	25 e2       	ldi	r18, 0x25	; 37
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	f9 01       	movw	r30, r18
    2800:	30 81       	ld	r19, Z
    2802:	20 e2       	ldi	r18, 0x20	; 32
    2804:	23 27       	eor	r18, r19
    2806:	fc 01       	movw	r30, r24
    2808:	20 83       	st	Z, r18
		}
		
		if (BIT_CHECK(TIMER_TASKS, BIT_TIMER_250ms))
    280a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    280e:	88 2f       	mov	r24, r24
    2810:	90 e0       	ldi	r25, 0x00	; 0
    2812:	80 71       	andi	r24, 0x10	; 16
    2814:	99 27       	eor	r25, r25
    2816:	89 2b       	or	r24, r25
    2818:	09 f4       	brne	.+2      	; 0x281c <main+0x342>
    281a:	47 cf       	rjmp	.-370    	; 0x26aa <main+0x1d0>
		{
			BIT_CLEAR(TIMER_TASKS, BIT_TIMER_250ms);
    281c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    2820:	8f 7e       	andi	r24, 0xEF	; 239
    2822:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
			
			if (sensor1.SensorStatus == WARMING_UP && sensor1.SystemVoltageOK && sensor1.SensorFaultState == OK)
    2826:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sensor1+0x19>
    282a:	81 30       	cpi	r24, 0x01	; 1
    282c:	09 f0       	breq	.+2      	; 0x2830 <main+0x356>
    282e:	3d cf       	rjmp	.-390    	; 0x26aa <main+0x1d0>
    2830:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <sensor1+0x17>
    2834:	88 23       	and	r24, r24
    2836:	09 f4       	brne	.+2      	; 0x283a <main+0x360>
    2838:	38 cf       	rjmp	.-400    	; 0x26aa <main+0x1d0>
    283a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sensor1+0x1a>
    283e:	88 23       	and	r24, r24
    2840:	09 f0       	breq	.+2      	; 0x2844 <main+0x36a>
    2842:	33 cf       	rjmp	.-410    	; 0x26aa <main+0x1d0>
			{
				// we are warming up the sensor in 0.4v/s or 0.1v in 250ms
				sensor1.HeaterVoltage += 100;
    2844:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <sensor1+0x13>
    2848:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <sensor1+0x14>
    284c:	8c 59       	subi	r24, 0x9C	; 156
    284e:	9f 4f       	sbci	r25, 0xFF	; 255
    2850:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <sensor1+0x14>
    2854:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <sensor1+0x13>
				if (sensor1.HeaterVoltage > 13000)
    2858:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <sensor1+0x13>
    285c:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <sensor1+0x14>
    2860:	89 3c       	cpi	r24, 0xC9	; 201
    2862:	92 43       	sbci	r25, 0x32	; 50
    2864:	48 f0       	brcs	.+18     	; 0x2878 <main+0x39e>
				{
					sensor1.HeaterVoltage = 13000;	
    2866:	88 ec       	ldi	r24, 0xC8	; 200
    2868:	92 e3       	ldi	r25, 0x32	; 50
    286a:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <sensor1+0x14>
    286e:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <sensor1+0x13>
					sensor1.SensorStatus = RUN;
    2872:	86 e0       	ldi	r24, 0x06	; 6
    2874:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
				}
				
				adcValue = adc_read_UR();				
    2878:	0e 94 3c 01 	call	0x278	; 0x278 <adc_read_UR>
    287c:	9b 83       	std	Y+3, r25	; 0x03
    287e:	8a 83       	std	Y+2, r24	; 0x02
				heater_setVoltage(sensor1.HeaterVoltage);				
    2880:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <sensor1+0x13>
    2884:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <sensor1+0x14>
    2888:	0e 94 76 19 	call	0x32ec	; 0x32ec <heater_setVoltage>
			}
		}
	}
    288c:	0e cf       	rjmp	.-484    	; 0x26aa <main+0x1d0>

0000288e <__adc2voltage_millis>:
{
	return ((float) __v * 5UL / 1024UL );
}

static __inline uint16_t __adc2voltage_millis(uint16_t __v)
{
    288e:	cf 93       	push	r28
    2890:	df 93       	push	r29
    2892:	00 d0       	rcall	.+0      	; 0x2894 <__adc2voltage_millis+0x6>
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
    2898:	9a 83       	std	Y+2, r25	; 0x02
    289a:	89 83       	std	Y+1, r24	; 0x01
	return ((uint16_t) __v * 5000UL / 1024UL );
    289c:	89 81       	ldd	r24, Y+1	; 0x01
    289e:	9a 81       	ldd	r25, Y+2	; 0x02
    28a0:	9c 01       	movw	r18, r24
    28a2:	40 e0       	ldi	r20, 0x00	; 0
    28a4:	50 e0       	ldi	r21, 0x00	; 0
    28a6:	88 e8       	ldi	r24, 0x88	; 136
    28a8:	93 e1       	ldi	r25, 0x13	; 19
    28aa:	dc 01       	movw	r26, r24
    28ac:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    28b0:	dc 01       	movw	r26, r24
    28b2:	cb 01       	movw	r24, r22
    28b4:	07 2e       	mov	r0, r23
    28b6:	7a e0       	ldi	r23, 0x0A	; 10
    28b8:	b6 95       	lsr	r27
    28ba:	a7 95       	ror	r26
    28bc:	97 95       	ror	r25
    28be:	87 95       	ror	r24
    28c0:	7a 95       	dec	r23
    28c2:	d1 f7       	brne	.-12     	; 0x28b8 <__adc2voltage_millis+0x2a>
    28c4:	70 2d       	mov	r23, r0
}
    28c6:	0f 90       	pop	r0
    28c8:	0f 90       	pop	r0
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	08 95       	ret

000028d0 <__voltage2duty_cycle>:
{
	return (uint8_t) (((__x)>>8) & 0xFF);
}

static __inline uint16_t __voltage2duty_cycle(uint16_t _targetVoltageMillis, uint16_t _supplyVoltageMillis, uint16_t _steps)
{
    28d0:	cf 92       	push	r12
    28d2:	df 92       	push	r13
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	cf 93       	push	r28
    28da:	df 93       	push	r29
    28dc:	00 d0       	rcall	.+0      	; 0x28de <__voltage2duty_cycle+0xe>
    28de:	00 d0       	rcall	.+0      	; 0x28e0 <__voltage2duty_cycle+0x10>
    28e0:	00 d0       	rcall	.+0      	; 0x28e2 <__voltage2duty_cycle+0x12>
    28e2:	cd b7       	in	r28, 0x3d	; 61
    28e4:	de b7       	in	r29, 0x3e	; 62
    28e6:	9a 83       	std	Y+2, r25	; 0x02
    28e8:	89 83       	std	Y+1, r24	; 0x01
    28ea:	7c 83       	std	Y+4, r23	; 0x04
    28ec:	6b 83       	std	Y+3, r22	; 0x03
    28ee:	5e 83       	std	Y+6, r21	; 0x06
    28f0:	4d 83       	std	Y+5, r20	; 0x05
	return (uint16_t)(((float)_targetVoltageMillis / (float)_supplyVoltageMillis) * _steps - 1);
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	cc 01       	movw	r24, r24
    28f8:	a0 e0       	ldi	r26, 0x00	; 0
    28fa:	b0 e0       	ldi	r27, 0x00	; 0
    28fc:	bc 01       	movw	r22, r24
    28fe:	cd 01       	movw	r24, r26
    2900:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2904:	6b 01       	movw	r12, r22
    2906:	7c 01       	movw	r14, r24
    2908:	8b 81       	ldd	r24, Y+3	; 0x03
    290a:	9c 81       	ldd	r25, Y+4	; 0x04
    290c:	cc 01       	movw	r24, r24
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	bc 01       	movw	r22, r24
    2914:	cd 01       	movw	r24, r26
    2916:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	9c 01       	movw	r18, r24
    2920:	ad 01       	movw	r20, r26
    2922:	c7 01       	movw	r24, r14
    2924:	b6 01       	movw	r22, r12
    2926:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__divsf3>
    292a:	dc 01       	movw	r26, r24
    292c:	cb 01       	movw	r24, r22
    292e:	6c 01       	movw	r12, r24
    2930:	7d 01       	movw	r14, r26
    2932:	8d 81       	ldd	r24, Y+5	; 0x05
    2934:	9e 81       	ldd	r25, Y+6	; 0x06
    2936:	cc 01       	movw	r24, r24
    2938:	a0 e0       	ldi	r26, 0x00	; 0
    293a:	b0 e0       	ldi	r27, 0x00	; 0
    293c:	bc 01       	movw	r22, r24
    293e:	cd 01       	movw	r24, r26
    2940:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2944:	dc 01       	movw	r26, r24
    2946:	cb 01       	movw	r24, r22
    2948:	9c 01       	movw	r18, r24
    294a:	ad 01       	movw	r20, r26
    294c:	c7 01       	movw	r24, r14
    294e:	b6 01       	movw	r22, r12
    2950:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    2954:	dc 01       	movw	r26, r24
    2956:	cb 01       	movw	r24, r22
    2958:	20 e0       	ldi	r18, 0x00	; 0
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	40 e8       	ldi	r20, 0x80	; 128
    295e:	5f e3       	ldi	r21, 0x3F	; 63
    2960:	bc 01       	movw	r22, r24
    2962:	cd 01       	movw	r24, r26
    2964:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__subsf3>
    2968:	dc 01       	movw	r26, r24
    296a:	cb 01       	movw	r24, r22
    296c:	bc 01       	movw	r22, r24
    296e:	cd 01       	movw	r24, r26
    2970:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__fixunssfsi>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
}
    2978:	26 96       	adiw	r28, 0x06	; 6
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	ff 90       	pop	r15
    298a:	ef 90       	pop	r14
    298c:	df 90       	pop	r13
    298e:	cf 90       	pop	r12
    2990:	08 95       	ret

00002992 <__is_between>:
	return ((float) _supplyVoltageMillis / (float) _steps) *_dutyCycle;
}


static __inline uint8_t __is_between(uint16_t x, uint16_t y, uint16_t z)
{
    2992:	cf 93       	push	r28
    2994:	df 93       	push	r29
    2996:	00 d0       	rcall	.+0      	; 0x2998 <__is_between+0x6>
    2998:	00 d0       	rcall	.+0      	; 0x299a <__is_between+0x8>
    299a:	00 d0       	rcall	.+0      	; 0x299c <__is_between+0xa>
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
    29a0:	9a 83       	std	Y+2, r25	; 0x02
    29a2:	89 83       	std	Y+1, r24	; 0x01
    29a4:	7c 83       	std	Y+4, r23	; 0x04
    29a6:	6b 83       	std	Y+3, r22	; 0x03
    29a8:	5e 83       	std	Y+6, r21	; 0x06
    29aa:	4d 83       	std	Y+5, r20	; 0x05
	if ((x > y) && (x < z))
    29ac:	29 81       	ldd	r18, Y+1	; 0x01
    29ae:	3a 81       	ldd	r19, Y+2	; 0x02
    29b0:	8b 81       	ldd	r24, Y+3	; 0x03
    29b2:	9c 81       	ldd	r25, Y+4	; 0x04
    29b4:	82 17       	cp	r24, r18
    29b6:	93 07       	cpc	r25, r19
    29b8:	48 f4       	brcc	.+18     	; 0x29cc <__is_between+0x3a>
    29ba:	29 81       	ldd	r18, Y+1	; 0x01
    29bc:	3a 81       	ldd	r19, Y+2	; 0x02
    29be:	8d 81       	ldd	r24, Y+5	; 0x05
    29c0:	9e 81       	ldd	r25, Y+6	; 0x06
    29c2:	28 17       	cp	r18, r24
    29c4:	39 07       	cpc	r19, r25
    29c6:	10 f4       	brcc	.+4      	; 0x29cc <__is_between+0x3a>
	{
		return 1;
    29c8:	81 e0       	ldi	r24, 0x01	; 1
    29ca:	01 c0       	rjmp	.+2      	; 0x29ce <__is_between+0x3c>
	}
	
	return 0;
    29cc:	80 e0       	ldi	r24, 0x00	; 0
}
    29ce:	26 96       	adiw	r28, 0x06	; 6
    29d0:	0f b6       	in	r0, 0x3f	; 63
    29d2:	f8 94       	cli
    29d4:	de bf       	out	0x3e, r29	; 62
    29d6:	0f be       	out	0x3f, r0	; 63
    29d8:	cd bf       	out	0x3d, r28	; 61
    29da:	df 91       	pop	r29
    29dc:	cf 91       	pop	r28
    29de:	08 95       	ret

000029e0 <sensor_init>:
tPIDController pidController;
tSensor sensor1;
extern tBoard board;

void sensor_init (tSensor *sensor, uint8_t amplification_factor)
{
    29e0:	cf 93       	push	r28
    29e2:	df 93       	push	r29
    29e4:	00 d0       	rcall	.+0      	; 0x29e6 <sensor_init+0x6>
    29e6:	1f 92       	push	r1
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	9a 83       	std	Y+2, r25	; 0x02
    29ee:	89 83       	std	Y+1, r24	; 0x01
    29f0:	6b 83       	std	Y+3, r22	; 0x03
	sensor->SensorStatus = RESET;
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	9a 81       	ldd	r25, Y+2	; 0x02
    29f6:	fc 01       	movw	r30, r24
    29f8:	11 8e       	std	Z+25, r1	; 0x19
	sensor->SensorFaultState = OK;
    29fa:	89 81       	ldd	r24, Y+1	; 0x01
    29fc:	9a 81       	ldd	r25, Y+2	; 0x02
    29fe:	fc 01       	movw	r30, r24
    2a00:	12 8e       	std	Z+26, r1	; 0x1a
	sensor->Shunt = 61900;
    2a02:	89 81       	ldd	r24, Y+1	; 0x01
    2a04:	9a 81       	ldd	r25, Y+2	; 0x02
    2a06:	2c ec       	ldi	r18, 0xCC	; 204
    2a08:	31 ef       	ldi	r19, 0xF1	; 241
    2a0a:	fc 01       	movw	r30, r24
    2a0c:	31 83       	std	Z+1, r19	; 0x01
    2a0e:	20 83       	st	Z, r18
	sensor->Ip = 0;
    2a10:	89 81       	ldd	r24, Y+1	; 0x01
    2a12:	9a 81       	ldd	r25, Y+2	; 0x02
    2a14:	fc 01       	movw	r30, r24
    2a16:	16 86       	std	Z+14, r1	; 0x0e
    2a18:	15 86       	std	Z+13, r1	; 0x0d
	sensor->Lambda = 0;
    2a1a:	89 81       	ldd	r24, Y+1	; 0x01
    2a1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a1e:	fc 01       	movw	r30, r24
    2a20:	10 8a       	std	Z+16, r1	; 0x10
    2a22:	17 86       	std	Z+15, r1	; 0x0f
	sensor->Ua = 0;
    2a24:	89 81       	ldd	r24, Y+1	; 0x01
    2a26:	9a 81       	ldd	r25, Y+2	; 0x02
    2a28:	fc 01       	movw	r30, r24
    2a2a:	12 86       	std	Z+10, r1	; 0x0a
    2a2c:	11 86       	std	Z+9, r1	; 0x09
	sensor->Ua_ref = 0;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	fc 01       	movw	r30, r24
    2a34:	14 82       	std	Z+4, r1	; 0x04
    2a36:	13 82       	std	Z+3, r1	; 0x03
	sensor->Ur = 0;
    2a38:	89 81       	ldd	r24, Y+1	; 0x01
    2a3a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3c:	fc 01       	movw	r30, r24
    2a3e:	14 86       	std	Z+12, r1	; 0x0c
    2a40:	13 86       	std	Z+11, r1	; 0x0b
	sensor->Ur_ref_raw = 0;
    2a42:	89 81       	ldd	r24, Y+1	; 0x01
    2a44:	9a 81       	ldd	r25, Y+2	; 0x02
    2a46:	fc 01       	movw	r30, r24
    2a48:	10 86       	std	Z+8, r1	; 0x08
    2a4a:	17 82       	std	Z+7, r1	; 0x07
	sensor->O2 = 0;
    2a4c:	89 81       	ldd	r24, Y+1	; 0x01
    2a4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2a50:	fc 01       	movw	r30, r24
    2a52:	12 8a       	std	Z+18, r1	; 0x12
    2a54:	11 8a       	std	Z+17, r1	; 0x11
	sensor->HeaterVoltage = 0;
    2a56:	89 81       	ldd	r24, Y+1	; 0x01
    2a58:	9a 81       	ldd	r25, Y+2	; 0x02
    2a5a:	fc 01       	movw	r30, r24
    2a5c:	14 8a       	std	Z+20, r1	; 0x14
    2a5e:	13 8a       	std	Z+19, r1	; 0x13
	sensor->diagRegister = 0;
    2a60:	89 81       	ldd	r24, Y+1	; 0x01
    2a62:	9a 81       	ldd	r25, Y+2	; 0x02
    2a64:	fc 01       	movw	r30, r24
    2a66:	10 8e       	std	Z+24, r1	; 0x18
	sensor->SensorDetectedStatus = BOSCH_LSU49;
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6c:	22 e0       	ldi	r18, 0x02	; 2
    2a6e:	fc 01       	movw	r30, r24
    2a70:	23 8f       	std	Z+27, r18	; 0x1b
	sensor->Amplification = amplification_factor;
    2a72:	89 81       	ldd	r24, Y+1	; 0x01
    2a74:	9a 81       	ldd	r25, Y+2	; 0x02
    2a76:	2b 81       	ldd	r18, Y+3	; 0x03
    2a78:	fc 01       	movw	r30, r24
    2a7a:	22 83       	std	Z+2, r18	; 0x02
	
	heater_init();
    2a7c:	0e 94 47 15 	call	0x2a8e	; 0x2a8e <heater_init>
}
    2a80:	00 00       	nop
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0
    2a86:	0f 90       	pop	r0
    2a88:	df 91       	pop	r29
    2a8a:	cf 91       	pop	r28
    2a8c:	08 95       	ret

00002a8e <heater_init>:

void heater_init (void)
{
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	cd b7       	in	r28, 0x3d	; 61
    2a94:	de b7       	in	r29, 0x3e	; 62
	// init COM1B1 as GPIO (PC1) and default low:
	// if bit COM1B1 is 0, then pc1 acts as gpio with original state (so, output and low)
	DDRC |= (1 << PINC1);		// PC1 is an output
    2a96:	87 e2       	ldi	r24, 0x27	; 39
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	27 e2       	ldi	r18, 0x27	; 39
    2a9c:	30 e0       	ldi	r19, 0x00	; 0
    2a9e:	f9 01       	movw	r30, r18
    2aa0:	20 81       	ld	r18, Z
    2aa2:	22 60       	ori	r18, 0x02	; 2
    2aa4:	fc 01       	movw	r30, r24
    2aa6:	20 83       	st	Z, r18
	PORTC &= ~(1 << PINC1);	// and is low
    2aa8:	88 e2       	ldi	r24, 0x28	; 40
    2aaa:	90 e0       	ldi	r25, 0x00	; 0
    2aac:	28 e2       	ldi	r18, 0x28	; 40
    2aae:	30 e0       	ldi	r19, 0x00	; 0
    2ab0:	f9 01       	movw	r30, r18
    2ab2:	20 81       	ld	r18, Z
    2ab4:	2d 7f       	andi	r18, 0xFD	; 253
    2ab6:	fc 01       	movw	r30, r24
    2ab8:	20 83       	st	Z, r18
	
	// pin pc1 (OC1B, Timer 1 output compare B) connected to sensor heater
	// fast pwm mode, prescaler 256,  top 0x0ff (255) = 244Hz
	// pwm mode 5, 8-bit resolution
	// clear oc1b on compare match
	TCCR1A |= (1 << WGM10)|(1 << COM1B1);
    2aba:	80 e8       	ldi	r24, 0x80	; 128
    2abc:	90 e0       	ldi	r25, 0x00	; 0
    2abe:	20 e8       	ldi	r18, 0x80	; 128
    2ac0:	30 e0       	ldi	r19, 0x00	; 0
    2ac2:	f9 01       	movw	r30, r18
    2ac4:	20 81       	ld	r18, Z
    2ac6:	21 62       	ori	r18, 0x21	; 33
    2ac8:	fc 01       	movw	r30, r24
    2aca:	20 83       	st	Z, r18
	TCCR1B |= (1 << WGM12)|(1 << CS12);
    2acc:	81 e8       	ldi	r24, 0x81	; 129
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	21 e8       	ldi	r18, 0x81	; 129
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	20 81       	ld	r18, Z
    2ad8:	2c 60       	ori	r18, 0x0C	; 12
    2ada:	fc 01       	movw	r30, r24
    2adc:	20 83       	st	Z, r18
	
	// init pid controller...
	// original values: p = 120; i = 0.8; d = 10;
	// optimal values seems to be p=7.1, i=0.3, d=0
	
	pidController.pGain = 5;
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 ea       	ldi	r26, 0xA0	; 160
    2ae4:	b0 e4       	ldi	r27, 0x40	; 64
    2ae6:	80 93 b3 01 	sts	0x01B3, r24	; 0x8001b3 <pidController>
    2aea:	90 93 b4 01 	sts	0x01B4, r25	; 0x8001b4 <pidController+0x1>
    2aee:	a0 93 b5 01 	sts	0x01B5, r26	; 0x8001b5 <pidController+0x2>
    2af2:	b0 93 b6 01 	sts	0x01B6, r27	; 0x8001b6 <pidController+0x3>
	pidController.iGain = 0.8;
    2af6:	8d ec       	ldi	r24, 0xCD	; 205
    2af8:	9c ec       	ldi	r25, 0xCC	; 204
    2afa:	ac e4       	ldi	r26, 0x4C	; 76
    2afc:	bf e3       	ldi	r27, 0x3F	; 63
    2afe:	80 93 b7 01 	sts	0x01B7, r24	; 0x8001b7 <pidController+0x4>
    2b02:	90 93 b8 01 	sts	0x01B8, r25	; 0x8001b8 <pidController+0x5>
    2b06:	a0 93 b9 01 	sts	0x01B9, r26	; 0x8001b9 <pidController+0x6>
    2b0a:	b0 93 ba 01 	sts	0x01BA, r27	; 0x8001ba <pidController+0x7>
	pidController.dGain = 3.2;
    2b0e:	8d ec       	ldi	r24, 0xCD	; 205
    2b10:	9c ec       	ldi	r25, 0xCC	; 204
    2b12:	ac e4       	ldi	r26, 0x4C	; 76
    2b14:	b0 e4       	ldi	r27, 0x40	; 64
    2b16:	80 93 bb 01 	sts	0x01BB, r24	; 0x8001bb <pidController+0x8>
    2b1a:	90 93 bc 01 	sts	0x01BC, r25	; 0x8001bc <pidController+0x9>
    2b1e:	a0 93 bd 01 	sts	0x01BD, r26	; 0x8001bd <pidController+0xa>
    2b22:	b0 93 be 01 	sts	0x01BE, r27	; 0x8001be <pidController+0xb>
	
	pidController.iMin = -250;
    2b26:	86 e0       	ldi	r24, 0x06	; 6
    2b28:	9f ef       	ldi	r25, 0xFF	; 255
    2b2a:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <pidController+0x11>
    2b2e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <pidController+0x10>
	pidController.iMax = 250;
    2b32:	8a ef       	ldi	r24, 0xFA	; 250
    2b34:	90 e0       	ldi	r25, 0x00	; 0
    2b36:	90 93 c6 01 	sts	0x01C6, r25	; 0x8001c6 <pidController+0x13>
    2b3a:	80 93 c5 01 	sts	0x01C5, r24	; 0x8001c5 <pidController+0x12>
	pidController.pwmMin = 0;
    2b3e:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <pidController+0x15>
    2b42:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <pidController+0x14>
	pidController.pwmMax = 240;
    2b46:	80 ef       	ldi	r24, 0xF0	; 240
    2b48:	90 e0       	ldi	r25, 0x00	; 0
    2b4a:	90 93 ca 01 	sts	0x01CA, r25	; 0x8001ca <pidController+0x17>
    2b4e:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pidController+0x16>
		
	heater_setDuty(0);
    2b52:	80 e0       	ldi	r24, 0x00	; 0
    2b54:	90 e0       	ldi	r25, 0x00	; 0
    2b56:	0e 94 a8 19 	call	0x3350	; 0x3350 <heater_setDuty>
}
    2b5a:	00 00       	nop
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret

00002b62 <sensor_update_status>:

void sensor_update_status (void)
{	
    2b62:	cf 93       	push	r28
    2b64:	df 93       	push	r29
    2b66:	cd b7       	in	r28, 0x3d	; 61
    2b68:	de b7       	in	r29, 0x3e	; 62
	
	sensor1.SystemVoltage = adc2voltage_millis(adc_read_battery()) * 5;
    2b6a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <adc_read_battery>
    2b6e:	0e 94 47 14 	call	0x288e	; 0x288e <__adc2voltage_millis>
    2b72:	9c 01       	movw	r18, r24
    2b74:	c9 01       	movw	r24, r18
    2b76:	88 0f       	add	r24, r24
    2b78:	99 1f       	adc	r25, r25
    2b7a:	88 0f       	add	r24, r24
    2b7c:	99 1f       	adc	r25, r25
    2b7e:	82 0f       	add	r24, r18
    2b80:	93 1f       	adc	r25, r19
    2b82:	90 93 e1 01 	sts	0x01E1, r25	; 0x8001e1 <sensor1+0x16>
    2b86:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <sensor1+0x15>
	
	if (is_between(sensor1.SystemVoltage, 11000, 16500))
    2b8a:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <sensor1+0x15>
    2b8e:	90 91 e1 01 	lds	r25, 0x01E1	; 0x8001e1 <sensor1+0x16>
    2b92:	44 e7       	ldi	r20, 0x74	; 116
    2b94:	50 e4       	ldi	r21, 0x40	; 64
    2b96:	68 ef       	ldi	r22, 0xF8	; 248
    2b98:	7a e2       	ldi	r23, 0x2A	; 42
    2b9a:	0e 94 c9 14 	call	0x2992	; 0x2992 <__is_between>
    2b9e:	88 23       	and	r24, r24
    2ba0:	21 f0       	breq	.+8      	; 0x2baa <sensor_update_status+0x48>
	{
		sensor1.SystemVoltageOK = true;
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <sensor1+0x17>
    2ba8:	02 c0       	rjmp	.+4      	; 0x2bae <sensor_update_status+0x4c>
	}
	else
	{
		sensor1.SystemVoltageOK = false;
    2baa:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <sensor1+0x17>
	}
	
	if (cj125_readStatus(&sensor1.diagRegister) == COMMAND_VALID)
    2bae:	83 ee       	ldi	r24, 0xE3	; 227
    2bb0:	91 e0       	ldi	r25, 0x01	; 1
    2bb2:	0e 94 57 10 	call	0x20ae	; 0x20ae <cj125_readStatus>
    2bb6:	88 23       	and	r24, r24
    2bb8:	31 f5       	brne	.+76     	; 0x2c06 <sensor_update_status+0xa4>
	{

		// check that everythingis okay...
		if (sensor1.diagRegister == CJ125_DIAG_REG_STATUS_OK)
    2bba:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <sensor1+0x18>
    2bbe:	8f 3f       	cpi	r24, 0xFF	; 255
    2bc0:	19 f4       	brne	.+6      	; 0x2bc8 <sensor_update_status+0x66>
		{
			sensor1.SensorFaultState = OK;
    2bc2:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sensor1+0x1a>
	else
	{
		sensor1.SensorStatus = ERROR;
		sensor1.SensorFaultState = FAULT;
	}
}
    2bc6:	26 c0       	rjmp	.+76     	; 0x2c14 <sensor_update_status+0xb2>
		{
			sensor1.SensorFaultState = OK;
		}
		else
		{	
			sensor1.SensorFaultState = FAULT;
    2bc8:	81 e0       	ldi	r24, 0x01	; 1
    2bca:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
			// if not, check what's wrong.
			// check the heater
			switch ((sensor1.diagRegister >> 6)&CJ125_DIAG_MASK)
    2bce:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <sensor1+0x18>
    2bd2:	82 95       	swap	r24
    2bd4:	86 95       	lsr	r24
    2bd6:	86 95       	lsr	r24
    2bd8:	83 70       	andi	r24, 0x03	; 3
    2bda:	88 2f       	mov	r24, r24
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	83 70       	andi	r24, 0x03	; 3
    2be0:	99 27       	eor	r25, r25
    2be2:	81 30       	cpi	r24, 0x01	; 1
    2be4:	91 05       	cpc	r25, r1
    2be6:	51 f0       	breq	.+20     	; 0x2bfc <sensor_update_status+0x9a>
    2be8:	82 30       	cpi	r24, 0x02	; 2
    2bea:	91 05       	cpc	r25, r1
    2bec:	19 f0       	breq	.+6      	; 0x2bf4 <sensor_update_status+0x92>
    2bee:	89 2b       	or	r24, r25
    2bf0:	09 f0       	breq	.+2      	; 0x2bf4 <sensor_update_status+0x92>
	else
	{
		sensor1.SensorStatus = ERROR;
		sensor1.SensorFaultState = FAULT;
	}
}
    2bf2:	10 c0       	rjmp	.+32     	; 0x2c14 <sensor_update_status+0xb2>
			// check the heater
			switch ((sensor1.diagRegister >> 6)&CJ125_DIAG_MASK)
			{
				case 0:
				case 2:
					sensor1.SensorStatus = HEATER_SHORT_CIRCUIT;
    2bf4:	89 e0       	ldi	r24, 0x09	; 9
    2bf6:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
					break;
    2bfa:	0c c0       	rjmp	.+24     	; 0x2c14 <sensor_update_status+0xb2>
				
				case 1:
					sensor1.SensorStatus = HEATER_OPEN_CIRCUIT;
    2bfc:	8a e0       	ldi	r24, 0x0A	; 10
    2bfe:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
					break;
    2c02:	00 00       	nop
    2c04:	07 c0       	rjmp	.+14     	; 0x2c14 <sensor_update_status+0xb2>
			}
		}
	}
	else
	{
		sensor1.SensorStatus = ERROR;
    2c06:	84 e1       	ldi	r24, 0x14	; 20
    2c08:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sensor1+0x19>
		sensor1.SensorFaultState = FAULT;
    2c0c:	81 e0       	ldi	r24, 0x01	; 1
    2c0e:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sensor1+0x1a>
	}
}
    2c12:	00 c0       	rjmp	.+0      	; 0x2c14 <sensor_update_status+0xb2>
    2c14:	00 00       	nop
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	08 95       	ret

00002c1c <calculate_ip>:

int16_t calculate_ip (uint16_t Ua_ref, uint16_t Ua, uint8_t amp)
{
    2c1c:	cf 92       	push	r12
    2c1e:	df 92       	push	r13
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	cf 93       	push	r28
    2c26:	df 93       	push	r29
    2c28:	cd b7       	in	r28, 0x3d	; 61
    2c2a:	de b7       	in	r29, 0x3e	; 62
    2c2c:	2f 97       	sbiw	r28, 0x0f	; 15
    2c2e:	0f b6       	in	r0, 0x3f	; 63
    2c30:	f8 94       	cli
    2c32:	de bf       	out	0x3e, r29	; 62
    2c34:	0f be       	out	0x3f, r0	; 63
    2c36:	cd bf       	out	0x3d, r28	; 61
    2c38:	9c 87       	std	Y+12, r25	; 0x0c
    2c3a:	8b 87       	std	Y+11, r24	; 0x0b
    2c3c:	7e 87       	std	Y+14, r23	; 0x0e
    2c3e:	6d 87       	std	Y+13, r22	; 0x0d
    2c40:	4f 87       	std	Y+15, r20	; 0x0f
	int16_t ip;
	int32_t delta;
	int32_t divisor;
	// pump current calculation formula: Ip = (((Ua - Ua_ref) * PUMP_FACTOR ) / (SENSOR_SHUT * AMPLIFICATION)) * 1000
	delta = ((int32_t)Ua - (int32_t)Ua_ref) * 1000;
    2c42:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c44:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c46:	9c 01       	movw	r18, r24
    2c48:	40 e0       	ldi	r20, 0x00	; 0
    2c4a:	50 e0       	ldi	r21, 0x00	; 0
    2c4c:	8b 85       	ldd	r24, Y+11	; 0x0b
    2c4e:	9c 85       	ldd	r25, Y+12	; 0x0c
    2c50:	cc 01       	movw	r24, r24
    2c52:	a0 e0       	ldi	r26, 0x00	; 0
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	28 1b       	sub	r18, r24
    2c58:	39 0b       	sbc	r19, r25
    2c5a:	4a 0b       	sbc	r20, r26
    2c5c:	5b 0b       	sbc	r21, r27
    2c5e:	88 ee       	ldi	r24, 0xE8	; 232
    2c60:	93 e0       	ldi	r25, 0x03	; 3
    2c62:	dc 01       	movw	r26, r24
    2c64:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    2c68:	dc 01       	movw	r26, r24
    2c6a:	cb 01       	movw	r24, r22
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	9a 83       	std	Y+2, r25	; 0x02
    2c70:	ab 83       	std	Y+3, r26	; 0x03
    2c72:	bc 83       	std	Y+4, r27	; 0x04
	// divisor = (int32_t)SENSOR_SHUNT * (int32_t)amp;	
	divisor = (int32_t)sensor1.Shunt * (int32_t)amp;	
    2c74:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <sensor1>
    2c78:	90 91 cc 01 	lds	r25, 0x01CC	; 0x8001cc <sensor1+0x1>
    2c7c:	9c 01       	movw	r18, r24
    2c7e:	40 e0       	ldi	r20, 0x00	; 0
    2c80:	50 e0       	ldi	r21, 0x00	; 0
    2c82:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c84:	88 2f       	mov	r24, r24
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	a0 e0       	ldi	r26, 0x00	; 0
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	bc 01       	movw	r22, r24
    2c8e:	cd 01       	movw	r24, r26
    2c90:	0e 94 a9 1f 	call	0x3f52	; 0x3f52 <__mulsi3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8d 83       	std	Y+5, r24	; 0x05
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	af 83       	std	Y+7, r26	; 0x07
    2c9e:	b8 87       	std	Y+8, r27	; 0x08
	ip = (int16_t)(((float)delta / (float)divisor)*1000);
    2ca0:	69 81       	ldd	r22, Y+1	; 0x01
    2ca2:	7a 81       	ldd	r23, Y+2	; 0x02
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    2cac:	6b 01       	movw	r12, r22
    2cae:	7c 01       	movw	r14, r24
    2cb0:	6d 81       	ldd	r22, Y+5	; 0x05
    2cb2:	7e 81       	ldd	r23, Y+6	; 0x06
    2cb4:	8f 81       	ldd	r24, Y+7	; 0x07
    2cb6:	98 85       	ldd	r25, Y+8	; 0x08
    2cb8:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9c 01       	movw	r18, r24
    2cc2:	ad 01       	movw	r20, r26
    2cc4:	c7 01       	movw	r24, r14
    2cc6:	b6 01       	movw	r22, r12
    2cc8:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__divsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	20 e0       	ldi	r18, 0x00	; 0
    2cd2:	30 e0       	ldi	r19, 0x00	; 0
    2cd4:	4a e7       	ldi	r20, 0x7A	; 122
    2cd6:	54 e4       	ldi	r21, 0x44	; 68
    2cd8:	bc 01       	movw	r22, r24
    2cda:	cd 01       	movw	r24, r26
    2cdc:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    2ce0:	dc 01       	movw	r26, r24
    2ce2:	cb 01       	movw	r24, r22
    2ce4:	bc 01       	movw	r22, r24
    2ce6:	cd 01       	movw	r24, r26
    2ce8:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__fixsfsi>
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	9a 87       	std	Y+10, r25	; 0x0a
    2cf2:	89 87       	std	Y+9, r24	; 0x09
	return ip;
    2cf4:	89 85       	ldd	r24, Y+9	; 0x09
    2cf6:	9a 85       	ldd	r25, Y+10	; 0x0a
}
    2cf8:	2f 96       	adiw	r28, 0x0f	; 15
    2cfa:	0f b6       	in	r0, 0x3f	; 63
    2cfc:	f8 94       	cli
    2cfe:	de bf       	out	0x3e, r29	; 62
    2d00:	0f be       	out	0x3f, r0	; 63
    2d02:	cd bf       	out	0x3d, r28	; 61
    2d04:	df 91       	pop	r29
    2d06:	cf 91       	pop	r28
    2d08:	ff 90       	pop	r15
    2d0a:	ef 90       	pop	r14
    2d0c:	df 90       	pop	r13
    2d0e:	cf 90       	pop	r12
    2d10:	08 95       	ret

00002d12 <calculate_lambda>:

uint16_t calculate_lambda (int16_t Ip)
{
    2d12:	cf 92       	push	r12
    2d14:	df 92       	push	r13
    2d16:	ef 92       	push	r14
    2d18:	ff 92       	push	r15
    2d1a:	cf 93       	push	r28
    2d1c:	df 93       	push	r29
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    2d22:	2d 97       	sbiw	r28, 0x0d	; 13
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	9d 87       	std	Y+13, r25	; 0x0d
    2d30:	8c 87       	std	Y+12, r24	; 0x0c
	uint8_t counter = 0;
    2d32:	19 82       	std	Y+1, r1	; 0x01
	uint16_t Lambda = 0;
    2d34:	1b 82       	std	Y+3, r1	; 0x03
    2d36:	1a 82       	std	Y+2, r1	; 0x02
	
	float gain, offset;
	
	// check against the both ends
	if (Ip <= ip_values[0])
    2d38:	20 91 38 01 	lds	r18, 0x0138	; 0x800138 <ip_values>
    2d3c:	30 91 39 01 	lds	r19, 0x0139	; 0x800139 <ip_values+0x1>
    2d40:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d42:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d44:	28 17       	cp	r18, r24
    2d46:	39 07       	cpc	r19, r25
    2d48:	34 f0       	brlt	.+12     	; 0x2d56 <calculate_lambda+0x44>
	{
		Lambda = lambda_values[0];
    2d4a:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <lambda_values>
    2d4e:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <lambda_values+0x1>
    2d52:	9b 83       	std	Y+3, r25	; 0x03
    2d54:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	if (Ip >= ip_values[22])
    2d56:	20 91 64 01 	lds	r18, 0x0164	; 0x800164 <ip_values+0x2c>
    2d5a:	30 91 65 01 	lds	r19, 0x0165	; 0x800165 <ip_values+0x2d>
    2d5e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d60:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d62:	82 17       	cp	r24, r18
    2d64:	93 07       	cpc	r25, r19
    2d66:	0c f4       	brge	.+2      	; 0x2d6a <calculate_lambda+0x58>
    2d68:	ff c0       	rjmp	.+510    	; 0x2f68 <calculate_lambda+0x256>
	{
		Lambda = lambda_values[22];
    2d6a:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <lambda_values+0x2c>
    2d6e:	90 91 95 01 	lds	r25, 0x0195	; 0x800195 <lambda_values+0x2d>
    2d72:	9b 83       	std	Y+3, r25	; 0x03
    2d74:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	while ((Lambda == 0) && (counter < 22))
    2d76:	f8 c0       	rjmp	.+496    	; 0x2f68 <calculate_lambda+0x256>
	{
		// exists an exact value?
		if ( ip_values[counter] == Ip)
    2d78:	89 81       	ldd	r24, Y+1	; 0x01
    2d7a:	88 2f       	mov	r24, r24
    2d7c:	90 e0       	ldi	r25, 0x00	; 0
    2d7e:	88 0f       	add	r24, r24
    2d80:	99 1f       	adc	r25, r25
    2d82:	88 5c       	subi	r24, 0xC8	; 200
    2d84:	9e 4f       	sbci	r25, 0xFE	; 254
    2d86:	fc 01       	movw	r30, r24
    2d88:	20 81       	ld	r18, Z
    2d8a:	31 81       	ldd	r19, Z+1	; 0x01
    2d8c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d8e:	9d 85       	ldd	r25, Y+13	; 0x0d
    2d90:	28 17       	cp	r18, r24
    2d92:	39 07       	cpc	r19, r25
    2d94:	69 f4       	brne	.+26     	; 0x2db0 <calculate_lambda+0x9e>
		{
			Lambda = lambda_values[counter];
    2d96:	89 81       	ldd	r24, Y+1	; 0x01
    2d98:	88 2f       	mov	r24, r24
    2d9a:	90 e0       	ldi	r25, 0x00	; 0
    2d9c:	88 0f       	add	r24, r24
    2d9e:	99 1f       	adc	r25, r25
    2da0:	88 59       	subi	r24, 0x98	; 152
    2da2:	9e 4f       	sbci	r25, 0xFE	; 254
    2da4:	fc 01       	movw	r30, r24
    2da6:	80 81       	ld	r24, Z
    2da8:	91 81       	ldd	r25, Z+1	; 0x01
    2daa:	9b 83       	std	Y+3, r25	; 0x03
    2dac:	8a 83       	std	Y+2, r24	; 0x02
    2dae:	d9 c0       	rjmp	.+434    	; 0x2f62 <calculate_lambda+0x250>
		}
		
		// ip value is between two values
		else if ((ip_values[counter] <= Ip) && (Ip <= ip_values[counter + 1]))
    2db0:	89 81       	ldd	r24, Y+1	; 0x01
    2db2:	88 2f       	mov	r24, r24
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	88 0f       	add	r24, r24
    2db8:	99 1f       	adc	r25, r25
    2dba:	88 5c       	subi	r24, 0xC8	; 200
    2dbc:	9e 4f       	sbci	r25, 0xFE	; 254
    2dbe:	fc 01       	movw	r30, r24
    2dc0:	20 81       	ld	r18, Z
    2dc2:	31 81       	ldd	r19, Z+1	; 0x01
    2dc4:	8c 85       	ldd	r24, Y+12	; 0x0c
    2dc6:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dc8:	82 17       	cp	r24, r18
    2dca:	93 07       	cpc	r25, r19
    2dcc:	0c f4       	brge	.+2      	; 0x2dd0 <calculate_lambda+0xbe>
    2dce:	c9 c0       	rjmp	.+402    	; 0x2f62 <calculate_lambda+0x250>
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	88 2f       	mov	r24, r24
    2dd4:	90 e0       	ldi	r25, 0x00	; 0
    2dd6:	01 96       	adiw	r24, 0x01	; 1
    2dd8:	88 0f       	add	r24, r24
    2dda:	99 1f       	adc	r25, r25
    2ddc:	88 5c       	subi	r24, 0xC8	; 200
    2dde:	9e 4f       	sbci	r25, 0xFE	; 254
    2de0:	fc 01       	movw	r30, r24
    2de2:	20 81       	ld	r18, Z
    2de4:	31 81       	ldd	r19, Z+1	; 0x01
    2de6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2de8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2dea:	28 17       	cp	r18, r24
    2dec:	39 07       	cpc	r19, r25
    2dee:	0c f4       	brge	.+2      	; 0x2df2 <calculate_lambda+0xe0>
    2df0:	b8 c0       	rjmp	.+368    	; 0x2f62 <calculate_lambda+0x250>
		{
			gain = (float) (lambda_values[counter+1] - lambda_values[counter]) / (ip_values[counter + 1] -  ip_values[counter]);
    2df2:	89 81       	ldd	r24, Y+1	; 0x01
    2df4:	88 2f       	mov	r24, r24
    2df6:	90 e0       	ldi	r25, 0x00	; 0
    2df8:	01 96       	adiw	r24, 0x01	; 1
    2dfa:	88 0f       	add	r24, r24
    2dfc:	99 1f       	adc	r25, r25
    2dfe:	88 59       	subi	r24, 0x98	; 152
    2e00:	9e 4f       	sbci	r25, 0xFE	; 254
    2e02:	fc 01       	movw	r30, r24
    2e04:	20 81       	ld	r18, Z
    2e06:	31 81       	ldd	r19, Z+1	; 0x01
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	88 2f       	mov	r24, r24
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	88 0f       	add	r24, r24
    2e10:	99 1f       	adc	r25, r25
    2e12:	88 59       	subi	r24, 0x98	; 152
    2e14:	9e 4f       	sbci	r25, 0xFE	; 254
    2e16:	fc 01       	movw	r30, r24
    2e18:	80 81       	ld	r24, Z
    2e1a:	91 81       	ldd	r25, Z+1	; 0x01
    2e1c:	a9 01       	movw	r20, r18
    2e1e:	48 1b       	sub	r20, r24
    2e20:	59 0b       	sbc	r21, r25
    2e22:	ca 01       	movw	r24, r20
    2e24:	cc 01       	movw	r24, r24
    2e26:	a0 e0       	ldi	r26, 0x00	; 0
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	bc 01       	movw	r22, r24
    2e2c:	cd 01       	movw	r24, r26
    2e2e:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2e32:	6b 01       	movw	r12, r22
    2e34:	7c 01       	movw	r14, r24
    2e36:	89 81       	ldd	r24, Y+1	; 0x01
    2e38:	88 2f       	mov	r24, r24
    2e3a:	90 e0       	ldi	r25, 0x00	; 0
    2e3c:	01 96       	adiw	r24, 0x01	; 1
    2e3e:	88 0f       	add	r24, r24
    2e40:	99 1f       	adc	r25, r25
    2e42:	88 5c       	subi	r24, 0xC8	; 200
    2e44:	9e 4f       	sbci	r25, 0xFE	; 254
    2e46:	fc 01       	movw	r30, r24
    2e48:	20 81       	ld	r18, Z
    2e4a:	31 81       	ldd	r19, Z+1	; 0x01
    2e4c:	89 81       	ldd	r24, Y+1	; 0x01
    2e4e:	88 2f       	mov	r24, r24
    2e50:	90 e0       	ldi	r25, 0x00	; 0
    2e52:	88 0f       	add	r24, r24
    2e54:	99 1f       	adc	r25, r25
    2e56:	88 5c       	subi	r24, 0xC8	; 200
    2e58:	9e 4f       	sbci	r25, 0xFE	; 254
    2e5a:	fc 01       	movw	r30, r24
    2e5c:	80 81       	ld	r24, Z
    2e5e:	91 81       	ldd	r25, Z+1	; 0x01
    2e60:	a9 01       	movw	r20, r18
    2e62:	48 1b       	sub	r20, r24
    2e64:	59 0b       	sbc	r21, r25
    2e66:	ca 01       	movw	r24, r20
    2e68:	09 2e       	mov	r0, r25
    2e6a:	00 0c       	add	r0, r0
    2e6c:	aa 0b       	sbc	r26, r26
    2e6e:	bb 0b       	sbc	r27, r27
    2e70:	bc 01       	movw	r22, r24
    2e72:	cd 01       	movw	r24, r26
    2e74:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    2e78:	dc 01       	movw	r26, r24
    2e7a:	cb 01       	movw	r24, r22
    2e7c:	9c 01       	movw	r18, r24
    2e7e:	ad 01       	movw	r20, r26
    2e80:	c7 01       	movw	r24, r14
    2e82:	b6 01       	movw	r22, r12
    2e84:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__divsf3>
    2e88:	dc 01       	movw	r26, r24
    2e8a:	cb 01       	movw	r24, r22
    2e8c:	8c 83       	std	Y+4, r24	; 0x04
    2e8e:	9d 83       	std	Y+5, r25	; 0x05
    2e90:	ae 83       	std	Y+6, r26	; 0x06
    2e92:	bf 83       	std	Y+7, r27	; 0x07
			
			offset = (lambda_values[counter+1] - (ip_values[counter + 1] * gain));
    2e94:	89 81       	ldd	r24, Y+1	; 0x01
    2e96:	88 2f       	mov	r24, r24
    2e98:	90 e0       	ldi	r25, 0x00	; 0
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	88 0f       	add	r24, r24
    2e9e:	99 1f       	adc	r25, r25
    2ea0:	88 59       	subi	r24, 0x98	; 152
    2ea2:	9e 4f       	sbci	r25, 0xFE	; 254
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	80 81       	ld	r24, Z
    2ea8:	91 81       	ldd	r25, Z+1	; 0x01
    2eaa:	cc 01       	movw	r24, r24
    2eac:	a0 e0       	ldi	r26, 0x00	; 0
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	bc 01       	movw	r22, r24
    2eb2:	cd 01       	movw	r24, r26
    2eb4:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    2eb8:	6b 01       	movw	r12, r22
    2eba:	7c 01       	movw	r14, r24
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	88 2f       	mov	r24, r24
    2ec0:	90 e0       	ldi	r25, 0x00	; 0
    2ec2:	01 96       	adiw	r24, 0x01	; 1
    2ec4:	88 0f       	add	r24, r24
    2ec6:	99 1f       	adc	r25, r25
    2ec8:	88 5c       	subi	r24, 0xC8	; 200
    2eca:	9e 4f       	sbci	r25, 0xFE	; 254
    2ecc:	fc 01       	movw	r30, r24
    2ece:	80 81       	ld	r24, Z
    2ed0:	91 81       	ldd	r25, Z+1	; 0x01
    2ed2:	09 2e       	mov	r0, r25
    2ed4:	00 0c       	add	r0, r0
    2ed6:	aa 0b       	sbc	r26, r26
    2ed8:	bb 0b       	sbc	r27, r27
    2eda:	bc 01       	movw	r22, r24
    2edc:	cd 01       	movw	r24, r26
    2ede:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    2ee2:	dc 01       	movw	r26, r24
    2ee4:	cb 01       	movw	r24, r22
    2ee6:	2c 81       	ldd	r18, Y+4	; 0x04
    2ee8:	3d 81       	ldd	r19, Y+5	; 0x05
    2eea:	4e 81       	ldd	r20, Y+6	; 0x06
    2eec:	5f 81       	ldd	r21, Y+7	; 0x07
    2eee:	bc 01       	movw	r22, r24
    2ef0:	cd 01       	movw	r24, r26
    2ef2:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    2ef6:	dc 01       	movw	r26, r24
    2ef8:	cb 01       	movw	r24, r22
    2efa:	9c 01       	movw	r18, r24
    2efc:	ad 01       	movw	r20, r26
    2efe:	c7 01       	movw	r24, r14
    2f00:	b6 01       	movw	r22, r12
    2f02:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__subsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	88 87       	std	Y+8, r24	; 0x08
    2f0c:	99 87       	std	Y+9, r25	; 0x09
    2f0e:	aa 87       	std	Y+10, r26	; 0x0a
    2f10:	bb 87       	std	Y+11, r27	; 0x0b
			
			Lambda = (uint16_t) ((Ip * gain) + offset);
    2f12:	8c 85       	ldd	r24, Y+12	; 0x0c
    2f14:	9d 85       	ldd	r25, Y+13	; 0x0d
    2f16:	09 2e       	mov	r0, r25
    2f18:	00 0c       	add	r0, r0
    2f1a:	aa 0b       	sbc	r26, r26
    2f1c:	bb 0b       	sbc	r27, r27
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    2f26:	dc 01       	movw	r26, r24
    2f28:	cb 01       	movw	r24, r22
    2f2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f2e:	4e 81       	ldd	r20, Y+6	; 0x06
    2f30:	5f 81       	ldd	r21, Y+7	; 0x07
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	28 85       	ldd	r18, Y+8	; 0x08
    2f40:	39 85       	ldd	r19, Y+9	; 0x09
    2f42:	4a 85       	ldd	r20, Y+10	; 0x0a
    2f44:	5b 85       	ldd	r21, Y+11	; 0x0b
    2f46:	bc 01       	movw	r22, r24
    2f48:	cd 01       	movw	r24, r26
    2f4a:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__addsf3>
    2f4e:	dc 01       	movw	r26, r24
    2f50:	cb 01       	movw	r24, r22
    2f52:	bc 01       	movw	r22, r24
    2f54:	cd 01       	movw	r24, r26
    2f56:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__fixunssfsi>
    2f5a:	dc 01       	movw	r26, r24
    2f5c:	cb 01       	movw	r24, r22
    2f5e:	9b 83       	std	Y+3, r25	; 0x03
    2f60:	8a 83       	std	Y+2, r24	; 0x02
		}
		counter++;
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	8f 5f       	subi	r24, 0xFF	; 255
    2f66:	89 83       	std	Y+1, r24	; 0x01
	if (Ip >= ip_values[22])
	{
		Lambda = lambda_values[22];
	}
	
	while ((Lambda == 0) && (counter < 22))
    2f68:	8a 81       	ldd	r24, Y+2	; 0x02
    2f6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6c:	89 2b       	or	r24, r25
    2f6e:	21 f4       	brne	.+8      	; 0x2f78 <calculate_lambda+0x266>
    2f70:	89 81       	ldd	r24, Y+1	; 0x01
    2f72:	86 31       	cpi	r24, 0x16	; 22
    2f74:	08 f4       	brcc	.+2      	; 0x2f78 <calculate_lambda+0x266>
    2f76:	00 cf       	rjmp	.-512    	; 0x2d78 <calculate_lambda+0x66>
			Lambda = (uint16_t) ((Ip * gain) + offset);
		}
		counter++;
	}
	
	if (Lambda > 6600)
    2f78:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7a:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7c:	89 3c       	cpi	r24, 0xC9	; 201
    2f7e:	99 41       	sbci	r25, 0x19	; 25
    2f80:	20 f0       	brcs	.+8      	; 0x2f8a <calculate_lambda+0x278>
	{
		Lambda = 6553;
    2f82:	89 e9       	ldi	r24, 0x99	; 153
    2f84:	99 e1       	ldi	r25, 0x19	; 25
    2f86:	9b 83       	std	Y+3, r25	; 0x03
    2f88:	8a 83       	std	Y+2, r24	; 0x02
	}
	
	return Lambda;
    2f8a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f8c:	9b 81       	ldd	r25, Y+3	; 0x03
}
    2f8e:	2d 96       	adiw	r28, 0x0d	; 13
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	ff 90       	pop	r15
    2fa0:	ef 90       	pop	r14
    2fa2:	df 90       	pop	r13
    2fa4:	cf 90       	pop	r12
    2fa6:	08 95       	ret

00002fa8 <calculate_o2>:

uint16_t calculate_o2(int16_t Ip)
{
    2fa8:	cf 92       	push	r12
    2faa:	df 92       	push	r13
    2fac:	ef 92       	push	r14
    2fae:	ff 92       	push	r15
    2fb0:	cf 93       	push	r28
    2fb2:	df 93       	push	r29
    2fb4:	cd b7       	in	r28, 0x3d	; 61
    2fb6:	de b7       	in	r29, 0x3e	; 62
    2fb8:	2d 97       	sbiw	r28, 0x0d	; 13
    2fba:	0f b6       	in	r0, 0x3f	; 63
    2fbc:	f8 94       	cli
    2fbe:	de bf       	out	0x3e, r29	; 62
    2fc0:	0f be       	out	0x3f, r0	; 63
    2fc2:	cd bf       	out	0x3d, r28	; 61
    2fc4:	9d 87       	std	Y+13, r25	; 0x0d
    2fc6:	8c 87       	std	Y+12, r24	; 0x0c
	uint8_t counter = 0;
    2fc8:	19 82       	std	Y+1, r1	; 0x01
	uint16_t o2 = 0;
    2fca:	1b 82       	std	Y+3, r1	; 0x03
    2fcc:	1a 82       	std	Y+2, r1	; 0x02

	float gain, offset;

	// check against the both ends
	if (Ip <= ip_values_o2[0])
    2fce:	20 91 98 01 	lds	r18, 0x0198	; 0x800198 <ip_values_o2>
    2fd2:	30 91 99 01 	lds	r19, 0x0199	; 0x800199 <ip_values_o2+0x1>
    2fd6:	8c 85       	ldd	r24, Y+12	; 0x0c
    2fd8:	9d 85       	ldd	r25, Y+13	; 0x0d
    2fda:	28 17       	cp	r18, r24
    2fdc:	39 07       	cpc	r19, r25
    2fde:	2c f0       	brlt	.+10     	; 0x2fea <calculate_o2+0x42>
	{
		return o2_values_percent[0];
    2fe0:	80 91 a4 01 	lds	r24, 0x01A4	; 0x8001a4 <o2_values_percent>
    2fe4:	90 91 a5 01 	lds	r25, 0x01A5	; 0x8001a5 <o2_values_percent+0x1>
    2fe8:	11 c1       	rjmp	.+546    	; 0x320c <calculate_o2+0x264>
	}

	if (Ip >= ip_values_o2[5])
    2fea:	20 91 a2 01 	lds	r18, 0x01A2	; 0x8001a2 <ip_values_o2+0xa>
    2fee:	30 91 a3 01 	lds	r19, 0x01A3	; 0x8001a3 <ip_values_o2+0xb>
    2ff2:	8c 85       	ldd	r24, Y+12	; 0x0c
    2ff4:	9d 85       	ldd	r25, Y+13	; 0x0d
    2ff6:	82 17       	cp	r24, r18
    2ff8:	93 07       	cpc	r25, r19
    2ffa:	0c f4       	brge	.+2      	; 0x2ffe <calculate_o2+0x56>
    2ffc:	fd c0       	rjmp	.+506    	; 0x31f8 <calculate_o2+0x250>
	{
		return o2_values_percent[5];
    2ffe:	80 91 ae 01 	lds	r24, 0x01AE	; 0x8001ae <o2_values_percent+0xa>
    3002:	90 91 af 01 	lds	r25, 0x01AF	; 0x8001af <o2_values_percent+0xb>
    3006:	02 c1       	rjmp	.+516    	; 0x320c <calculate_o2+0x264>
	}

	while ((o2 == 0) && (counter < 5))
	{
		// exists an exact value?
		if (ip_values_o2[counter] == Ip)
    3008:	89 81       	ldd	r24, Y+1	; 0x01
    300a:	88 2f       	mov	r24, r24
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	88 0f       	add	r24, r24
    3010:	99 1f       	adc	r25, r25
    3012:	88 56       	subi	r24, 0x68	; 104
    3014:	9e 4f       	sbci	r25, 0xFE	; 254
    3016:	fc 01       	movw	r30, r24
    3018:	20 81       	ld	r18, Z
    301a:	31 81       	ldd	r19, Z+1	; 0x01
    301c:	8c 85       	ldd	r24, Y+12	; 0x0c
    301e:	9d 85       	ldd	r25, Y+13	; 0x0d
    3020:	28 17       	cp	r18, r24
    3022:	39 07       	cpc	r19, r25
    3024:	69 f4       	brne	.+26     	; 0x3040 <calculate_o2+0x98>
		{
			o2 = o2_values_percent[counter];
    3026:	89 81       	ldd	r24, Y+1	; 0x01
    3028:	88 2f       	mov	r24, r24
    302a:	90 e0       	ldi	r25, 0x00	; 0
    302c:	88 0f       	add	r24, r24
    302e:	99 1f       	adc	r25, r25
    3030:	8c 55       	subi	r24, 0x5C	; 92
    3032:	9e 4f       	sbci	r25, 0xFE	; 254
    3034:	fc 01       	movw	r30, r24
    3036:	80 81       	ld	r24, Z
    3038:	91 81       	ldd	r25, Z+1	; 0x01
    303a:	9b 83       	std	Y+3, r25	; 0x03
    303c:	8a 83       	std	Y+2, r24	; 0x02
    303e:	d9 c0       	rjmp	.+434    	; 0x31f2 <calculate_o2+0x24a>
		}

		// ip value is between two values
		else if ((ip_values_o2[counter] <= Ip) && (Ip <= ip_values_o2[counter + 1]))
    3040:	89 81       	ldd	r24, Y+1	; 0x01
    3042:	88 2f       	mov	r24, r24
    3044:	90 e0       	ldi	r25, 0x00	; 0
    3046:	88 0f       	add	r24, r24
    3048:	99 1f       	adc	r25, r25
    304a:	88 56       	subi	r24, 0x68	; 104
    304c:	9e 4f       	sbci	r25, 0xFE	; 254
    304e:	fc 01       	movw	r30, r24
    3050:	20 81       	ld	r18, Z
    3052:	31 81       	ldd	r19, Z+1	; 0x01
    3054:	8c 85       	ldd	r24, Y+12	; 0x0c
    3056:	9d 85       	ldd	r25, Y+13	; 0x0d
    3058:	82 17       	cp	r24, r18
    305a:	93 07       	cpc	r25, r19
    305c:	0c f4       	brge	.+2      	; 0x3060 <calculate_o2+0xb8>
    305e:	c9 c0       	rjmp	.+402    	; 0x31f2 <calculate_o2+0x24a>
    3060:	89 81       	ldd	r24, Y+1	; 0x01
    3062:	88 2f       	mov	r24, r24
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	01 96       	adiw	r24, 0x01	; 1
    3068:	88 0f       	add	r24, r24
    306a:	99 1f       	adc	r25, r25
    306c:	88 56       	subi	r24, 0x68	; 104
    306e:	9e 4f       	sbci	r25, 0xFE	; 254
    3070:	fc 01       	movw	r30, r24
    3072:	20 81       	ld	r18, Z
    3074:	31 81       	ldd	r19, Z+1	; 0x01
    3076:	8c 85       	ldd	r24, Y+12	; 0x0c
    3078:	9d 85       	ldd	r25, Y+13	; 0x0d
    307a:	28 17       	cp	r18, r24
    307c:	39 07       	cpc	r19, r25
    307e:	0c f4       	brge	.+2      	; 0x3082 <calculate_o2+0xda>
    3080:	b8 c0       	rjmp	.+368    	; 0x31f2 <calculate_o2+0x24a>
		{
			gain = (float)(o2_values_percent[counter + 1] - o2_values_percent[counter]) / (ip_values_o2[counter + 1] - ip_values_o2[counter]);
    3082:	89 81       	ldd	r24, Y+1	; 0x01
    3084:	88 2f       	mov	r24, r24
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	01 96       	adiw	r24, 0x01	; 1
    308a:	88 0f       	add	r24, r24
    308c:	99 1f       	adc	r25, r25
    308e:	8c 55       	subi	r24, 0x5C	; 92
    3090:	9e 4f       	sbci	r25, 0xFE	; 254
    3092:	fc 01       	movw	r30, r24
    3094:	20 81       	ld	r18, Z
    3096:	31 81       	ldd	r19, Z+1	; 0x01
    3098:	89 81       	ldd	r24, Y+1	; 0x01
    309a:	88 2f       	mov	r24, r24
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	88 0f       	add	r24, r24
    30a0:	99 1f       	adc	r25, r25
    30a2:	8c 55       	subi	r24, 0x5C	; 92
    30a4:	9e 4f       	sbci	r25, 0xFE	; 254
    30a6:	fc 01       	movw	r30, r24
    30a8:	80 81       	ld	r24, Z
    30aa:	91 81       	ldd	r25, Z+1	; 0x01
    30ac:	a9 01       	movw	r20, r18
    30ae:	48 1b       	sub	r20, r24
    30b0:	59 0b       	sbc	r21, r25
    30b2:	ca 01       	movw	r24, r20
    30b4:	cc 01       	movw	r24, r24
    30b6:	a0 e0       	ldi	r26, 0x00	; 0
    30b8:	b0 e0       	ldi	r27, 0x00	; 0
    30ba:	bc 01       	movw	r22, r24
    30bc:	cd 01       	movw	r24, r26
    30be:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    30c2:	6b 01       	movw	r12, r22
    30c4:	7c 01       	movw	r14, r24
    30c6:	89 81       	ldd	r24, Y+1	; 0x01
    30c8:	88 2f       	mov	r24, r24
    30ca:	90 e0       	ldi	r25, 0x00	; 0
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	88 0f       	add	r24, r24
    30d0:	99 1f       	adc	r25, r25
    30d2:	88 56       	subi	r24, 0x68	; 104
    30d4:	9e 4f       	sbci	r25, 0xFE	; 254
    30d6:	fc 01       	movw	r30, r24
    30d8:	20 81       	ld	r18, Z
    30da:	31 81       	ldd	r19, Z+1	; 0x01
    30dc:	89 81       	ldd	r24, Y+1	; 0x01
    30de:	88 2f       	mov	r24, r24
    30e0:	90 e0       	ldi	r25, 0x00	; 0
    30e2:	88 0f       	add	r24, r24
    30e4:	99 1f       	adc	r25, r25
    30e6:	88 56       	subi	r24, 0x68	; 104
    30e8:	9e 4f       	sbci	r25, 0xFE	; 254
    30ea:	fc 01       	movw	r30, r24
    30ec:	80 81       	ld	r24, Z
    30ee:	91 81       	ldd	r25, Z+1	; 0x01
    30f0:	a9 01       	movw	r20, r18
    30f2:	48 1b       	sub	r20, r24
    30f4:	59 0b       	sbc	r21, r25
    30f6:	ca 01       	movw	r24, r20
    30f8:	09 2e       	mov	r0, r25
    30fa:	00 0c       	add	r0, r0
    30fc:	aa 0b       	sbc	r26, r26
    30fe:	bb 0b       	sbc	r27, r27
    3100:	bc 01       	movw	r22, r24
    3102:	cd 01       	movw	r24, r26
    3104:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3108:	dc 01       	movw	r26, r24
    310a:	cb 01       	movw	r24, r22
    310c:	9c 01       	movw	r18, r24
    310e:	ad 01       	movw	r20, r26
    3110:	c7 01       	movw	r24, r14
    3112:	b6 01       	movw	r22, r12
    3114:	0e 94 06 1e 	call	0x3c0c	; 0x3c0c <__divsf3>
    3118:	dc 01       	movw	r26, r24
    311a:	cb 01       	movw	r24, r22
    311c:	8c 83       	std	Y+4, r24	; 0x04
    311e:	9d 83       	std	Y+5, r25	; 0x05
    3120:	ae 83       	std	Y+6, r26	; 0x06
    3122:	bf 83       	std	Y+7, r27	; 0x07

			offset = (o2_values_percent[counter + 1] - (ip_values_o2[counter + 1] * gain));
    3124:	89 81       	ldd	r24, Y+1	; 0x01
    3126:	88 2f       	mov	r24, r24
    3128:	90 e0       	ldi	r25, 0x00	; 0
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	8c 55       	subi	r24, 0x5C	; 92
    3132:	9e 4f       	sbci	r25, 0xFE	; 254
    3134:	fc 01       	movw	r30, r24
    3136:	80 81       	ld	r24, Z
    3138:	91 81       	ldd	r25, Z+1	; 0x01
    313a:	cc 01       	movw	r24, r24
    313c:	a0 e0       	ldi	r26, 0x00	; 0
    313e:	b0 e0       	ldi	r27, 0x00	; 0
    3140:	bc 01       	movw	r22, r24
    3142:	cd 01       	movw	r24, r26
    3144:	0e 94 ae 1e 	call	0x3d5c	; 0x3d5c <__floatunsisf>
    3148:	6b 01       	movw	r12, r22
    314a:	7c 01       	movw	r14, r24
    314c:	89 81       	ldd	r24, Y+1	; 0x01
    314e:	88 2f       	mov	r24, r24
    3150:	90 e0       	ldi	r25, 0x00	; 0
    3152:	01 96       	adiw	r24, 0x01	; 1
    3154:	88 0f       	add	r24, r24
    3156:	99 1f       	adc	r25, r25
    3158:	88 56       	subi	r24, 0x68	; 104
    315a:	9e 4f       	sbci	r25, 0xFE	; 254
    315c:	fc 01       	movw	r30, r24
    315e:	80 81       	ld	r24, Z
    3160:	91 81       	ldd	r25, Z+1	; 0x01
    3162:	09 2e       	mov	r0, r25
    3164:	00 0c       	add	r0, r0
    3166:	aa 0b       	sbc	r26, r26
    3168:	bb 0b       	sbc	r27, r27
    316a:	bc 01       	movw	r22, r24
    316c:	cd 01       	movw	r24, r26
    316e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	2c 81       	ldd	r18, Y+4	; 0x04
    3178:	3d 81       	ldd	r19, Y+5	; 0x05
    317a:	4e 81       	ldd	r20, Y+6	; 0x06
    317c:	5f 81       	ldd	r21, Y+7	; 0x07
    317e:	bc 01       	movw	r22, r24
    3180:	cd 01       	movw	r24, r26
    3182:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3186:	dc 01       	movw	r26, r24
    3188:	cb 01       	movw	r24, r22
    318a:	9c 01       	movw	r18, r24
    318c:	ad 01       	movw	r20, r26
    318e:	c7 01       	movw	r24, r14
    3190:	b6 01       	movw	r22, r12
    3192:	0e 94 99 1d 	call	0x3b32	; 0x3b32 <__subsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	88 87       	std	Y+8, r24	; 0x08
    319c:	99 87       	std	Y+9, r25	; 0x09
    319e:	aa 87       	std	Y+10, r26	; 0x0a
    31a0:	bb 87       	std	Y+11, r27	; 0x0b

			o2 = (uint16_t)((Ip * gain) + offset);
    31a2:	8c 85       	ldd	r24, Y+12	; 0x0c
    31a4:	9d 85       	ldd	r25, Y+13	; 0x0d
    31a6:	09 2e       	mov	r0, r25
    31a8:	00 0c       	add	r0, r0
    31aa:	aa 0b       	sbc	r26, r26
    31ac:	bb 0b       	sbc	r27, r27
    31ae:	bc 01       	movw	r22, r24
    31b0:	cd 01       	movw	r24, r26
    31b2:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    31b6:	dc 01       	movw	r26, r24
    31b8:	cb 01       	movw	r24, r22
    31ba:	2c 81       	ldd	r18, Y+4	; 0x04
    31bc:	3d 81       	ldd	r19, Y+5	; 0x05
    31be:	4e 81       	ldd	r20, Y+6	; 0x06
    31c0:	5f 81       	ldd	r21, Y+7	; 0x07
    31c2:	bc 01       	movw	r22, r24
    31c4:	cd 01       	movw	r24, r26
    31c6:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    31ca:	dc 01       	movw	r26, r24
    31cc:	cb 01       	movw	r24, r22
    31ce:	28 85       	ldd	r18, Y+8	; 0x08
    31d0:	39 85       	ldd	r19, Y+9	; 0x09
    31d2:	4a 85       	ldd	r20, Y+10	; 0x0a
    31d4:	5b 85       	ldd	r21, Y+11	; 0x0b
    31d6:	bc 01       	movw	r22, r24
    31d8:	cd 01       	movw	r24, r26
    31da:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__addsf3>
    31de:	dc 01       	movw	r26, r24
    31e0:	cb 01       	movw	r24, r22
    31e2:	bc 01       	movw	r22, r24
    31e4:	cd 01       	movw	r24, r26
    31e6:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__fixunssfsi>
    31ea:	dc 01       	movw	r26, r24
    31ec:	cb 01       	movw	r24, r22
    31ee:	9b 83       	std	Y+3, r25	; 0x03
    31f0:	8a 83       	std	Y+2, r24	; 0x02
		}
		counter++;
    31f2:	89 81       	ldd	r24, Y+1	; 0x01
    31f4:	8f 5f       	subi	r24, 0xFF	; 255
    31f6:	89 83       	std	Y+1, r24	; 0x01
	if (Ip >= ip_values_o2[5])
	{
		return o2_values_percent[5];
	}

	while ((o2 == 0) && (counter < 5))
    31f8:	8a 81       	ldd	r24, Y+2	; 0x02
    31fa:	9b 81       	ldd	r25, Y+3	; 0x03
    31fc:	89 2b       	or	r24, r25
    31fe:	21 f4       	brne	.+8      	; 0x3208 <calculate_o2+0x260>
    3200:	89 81       	ldd	r24, Y+1	; 0x01
    3202:	85 30       	cpi	r24, 0x05	; 5
    3204:	08 f4       	brcc	.+2      	; 0x3208 <calculate_o2+0x260>
    3206:	00 cf       	rjmp	.-512    	; 0x3008 <calculate_o2+0x60>

			o2 = (uint16_t)((Ip * gain) + offset);
		}
		counter++;
	}
	return o2;
    3208:	8a 81       	ldd	r24, Y+2	; 0x02
    320a:	9b 81       	ldd	r25, Y+3	; 0x03
}
    320c:	2d 96       	adiw	r28, 0x0d	; 13
    320e:	0f b6       	in	r0, 0x3f	; 63
    3210:	f8 94       	cli
    3212:	de bf       	out	0x3e, r29	; 62
    3214:	0f be       	out	0x3f, r0	; 63
    3216:	cd bf       	out	0x3d, r28	; 61
    3218:	df 91       	pop	r29
    321a:	cf 91       	pop	r28
    321c:	ff 90       	pop	r15
    321e:	ef 90       	pop	r14
    3220:	df 90       	pop	r13
    3222:	cf 90       	pop	r12
    3224:	08 95       	ret

00003226 <sensor_update_ua>:

void sensor_update_ua (tSensor *sensor, uint16_t ua_millis)
{
    3226:	cf 93       	push	r28
    3228:	df 93       	push	r29
    322a:	00 d0       	rcall	.+0      	; 0x322c <sensor_update_ua+0x6>
    322c:	00 d0       	rcall	.+0      	; 0x322e <sensor_update_ua+0x8>
    322e:	cd b7       	in	r28, 0x3d	; 61
    3230:	de b7       	in	r29, 0x3e	; 62
    3232:	9a 83       	std	Y+2, r25	; 0x02
    3234:	89 83       	std	Y+1, r24	; 0x01
    3236:	7c 83       	std	Y+4, r23	; 0x04
    3238:	6b 83       	std	Y+3, r22	; 0x03
	sensor->Ua = ua_millis;
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	9a 81       	ldd	r25, Y+2	; 0x02
    323e:	2b 81       	ldd	r18, Y+3	; 0x03
    3240:	3c 81       	ldd	r19, Y+4	; 0x04
    3242:	fc 01       	movw	r30, r24
    3244:	32 87       	std	Z+10, r19	; 0x0a
    3246:	21 87       	std	Z+9, r18	; 0x09
	sensor->Ip = calculate_ip (sensor->Ua_ref, sensor->Ua, sensor->Amplification);
    3248:	89 81       	ldd	r24, Y+1	; 0x01
    324a:	9a 81       	ldd	r25, Y+2	; 0x02
    324c:	fc 01       	movw	r30, r24
    324e:	42 81       	ldd	r20, Z+2	; 0x02
    3250:	89 81       	ldd	r24, Y+1	; 0x01
    3252:	9a 81       	ldd	r25, Y+2	; 0x02
    3254:	fc 01       	movw	r30, r24
    3256:	21 85       	ldd	r18, Z+9	; 0x09
    3258:	32 85       	ldd	r19, Z+10	; 0x0a
    325a:	89 81       	ldd	r24, Y+1	; 0x01
    325c:	9a 81       	ldd	r25, Y+2	; 0x02
    325e:	fc 01       	movw	r30, r24
    3260:	83 81       	ldd	r24, Z+3	; 0x03
    3262:	94 81       	ldd	r25, Z+4	; 0x04
    3264:	b9 01       	movw	r22, r18
    3266:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <calculate_ip>
    326a:	9c 01       	movw	r18, r24
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	9a 81       	ldd	r25, Y+2	; 0x02
    3270:	fc 01       	movw	r30, r24
    3272:	36 87       	std	Z+14, r19	; 0x0e
    3274:	25 87       	std	Z+13, r18	; 0x0d
	sensor->Lambda = calculate_lambda(sensor->Ip);
    3276:	89 81       	ldd	r24, Y+1	; 0x01
    3278:	9a 81       	ldd	r25, Y+2	; 0x02
    327a:	fc 01       	movw	r30, r24
    327c:	85 85       	ldd	r24, Z+13	; 0x0d
    327e:	96 85       	ldd	r25, Z+14	; 0x0e
    3280:	0e 94 89 16 	call	0x2d12	; 0x2d12 <calculate_lambda>
    3284:	9c 01       	movw	r18, r24
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	9a 81       	ldd	r25, Y+2	; 0x02
    328a:	fc 01       	movw	r30, r24
    328c:	30 8b       	std	Z+16, r19	; 0x10
    328e:	27 87       	std	Z+15, r18	; 0x0f
	sensor->O2 = calculate_o2(sensor->Ip);
    3290:	89 81       	ldd	r24, Y+1	; 0x01
    3292:	9a 81       	ldd	r25, Y+2	; 0x02
    3294:	fc 01       	movw	r30, r24
    3296:	85 85       	ldd	r24, Z+13	; 0x0d
    3298:	96 85       	ldd	r25, Z+14	; 0x0e
    329a:	0e 94 d4 17 	call	0x2fa8	; 0x2fa8 <calculate_o2>
    329e:	9c 01       	movw	r18, r24
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	9a 81       	ldd	r25, Y+2	; 0x02
    32a4:	fc 01       	movw	r30, r24
    32a6:	32 8b       	std	Z+18, r19	; 0x12
    32a8:	21 8b       	std	Z+17, r18	; 0x11
}
    32aa:	00 00       	nop
    32ac:	0f 90       	pop	r0
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	df 91       	pop	r29
    32b6:	cf 91       	pop	r28
    32b8:	08 95       	ret

000032ba <sensor_update_ur>:

void sensor_update_ur (tSensor *sensor, uint16_t ur_millis)
{
    32ba:	cf 93       	push	r28
    32bc:	df 93       	push	r29
    32be:	00 d0       	rcall	.+0      	; 0x32c0 <sensor_update_ur+0x6>
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <sensor_update_ur+0x8>
    32c2:	cd b7       	in	r28, 0x3d	; 61
    32c4:	de b7       	in	r29, 0x3e	; 62
    32c6:	9a 83       	std	Y+2, r25	; 0x02
    32c8:	89 83       	std	Y+1, r24	; 0x01
    32ca:	7c 83       	std	Y+4, r23	; 0x04
    32cc:	6b 83       	std	Y+3, r22	; 0x03
	sensor->Ur = ur_millis;
    32ce:	89 81       	ldd	r24, Y+1	; 0x01
    32d0:	9a 81       	ldd	r25, Y+2	; 0x02
    32d2:	2b 81       	ldd	r18, Y+3	; 0x03
    32d4:	3c 81       	ldd	r19, Y+4	; 0x04
    32d6:	fc 01       	movw	r30, r24
    32d8:	34 87       	std	Z+12, r19	; 0x0c
    32da:	23 87       	std	Z+11, r18	; 0x0b
}
    32dc:	00 00       	nop
    32de:	0f 90       	pop	r0
    32e0:	0f 90       	pop	r0
    32e2:	0f 90       	pop	r0
    32e4:	0f 90       	pop	r0
    32e6:	df 91       	pop	r29
    32e8:	cf 91       	pop	r28
    32ea:	08 95       	ret

000032ec <heater_setVoltage>:

void heater_setVoltage (uint16_t voltageMillis)
{
    32ec:	cf 93       	push	r28
    32ee:	df 93       	push	r29
    32f0:	00 d0       	rcall	.+0      	; 0x32f2 <heater_setVoltage+0x6>
    32f2:	00 d0       	rcall	.+0      	; 0x32f4 <heater_setVoltage+0x8>
    32f4:	cd b7       	in	r28, 0x3d	; 61
    32f6:	de b7       	in	r29, 0x3e	; 62
    32f8:	9c 83       	std	Y+4, r25	; 0x04
    32fa:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t duty = 0;
    32fc:	1a 82       	std	Y+2, r1	; 0x02
    32fe:	19 82       	std	Y+1, r1	; 0x01
	sensor1.HeaterVoltage = voltageMillis;
    3300:	8b 81       	ldd	r24, Y+3	; 0x03
    3302:	9c 81       	ldd	r25, Y+4	; 0x04
    3304:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <sensor1+0x14>
    3308:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <sensor1+0x13>
	
	if (voltageMillis == 0)
    330c:	8b 81       	ldd	r24, Y+3	; 0x03
    330e:	9c 81       	ldd	r25, Y+4	; 0x04
    3310:	89 2b       	or	r24, r25
    3312:	29 f4       	brne	.+10     	; 0x331e <heater_setVoltage+0x32>
	{
		heater_setDuty(0);
    3314:	80 e0       	ldi	r24, 0x00	; 0
    3316:	90 e0       	ldi	r25, 0x00	; 0
    3318:	0e 94 a8 19 	call	0x3350	; 0x3350 <heater_setDuty>
	else
	{
		duty = voltage2duty_cycle (voltageMillis, sensor1.SystemVoltage, 256);
		heater_setDuty(duty);	
	}
}
    331c:	11 c0       	rjmp	.+34     	; 0x3340 <heater_setVoltage+0x54>
	{
		heater_setDuty(0);
	}
	else
	{
		duty = voltage2duty_cycle (voltageMillis, sensor1.SystemVoltage, 256);
    331e:	20 91 e0 01 	lds	r18, 0x01E0	; 0x8001e0 <sensor1+0x15>
    3322:	30 91 e1 01 	lds	r19, 0x01E1	; 0x8001e1 <sensor1+0x16>
    3326:	8b 81       	ldd	r24, Y+3	; 0x03
    3328:	9c 81       	ldd	r25, Y+4	; 0x04
    332a:	40 e0       	ldi	r20, 0x00	; 0
    332c:	51 e0       	ldi	r21, 0x01	; 1
    332e:	b9 01       	movw	r22, r18
    3330:	0e 94 68 14 	call	0x28d0	; 0x28d0 <__voltage2duty_cycle>
    3334:	9a 83       	std	Y+2, r25	; 0x02
    3336:	89 83       	std	Y+1, r24	; 0x01
		heater_setDuty(duty);	
    3338:	89 81       	ldd	r24, Y+1	; 0x01
    333a:	9a 81       	ldd	r25, Y+2	; 0x02
    333c:	0e 94 a8 19 	call	0x3350	; 0x3350 <heater_setDuty>
	}
}
    3340:	00 00       	nop
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	0f 90       	pop	r0
    3348:	0f 90       	pop	r0
    334a:	df 91       	pop	r29
    334c:	cf 91       	pop	r28
    334e:	08 95       	ret

00003350 <heater_setDuty>:

void heater_setDuty (uint16_t duty)
{
    3350:	cf 93       	push	r28
    3352:	df 93       	push	r29
    3354:	00 d0       	rcall	.+0      	; 0x3356 <heater_setDuty+0x6>
    3356:	cd b7       	in	r28, 0x3d	; 61
    3358:	de b7       	in	r29, 0x3e	; 62
    335a:	9a 83       	std	Y+2, r25	; 0x02
    335c:	89 83       	std	Y+1, r24	; 0x01
	if (duty == 0)
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	9a 81       	ldd	r25, Y+2	; 0x02
    3362:	89 2b       	or	r24, r25
    3364:	51 f4       	brne	.+20     	; 0x337a <heater_setDuty+0x2a>
	{
		TCCR1A &= ~(1 << COM1B1);
    3366:	80 e8       	ldi	r24, 0x80	; 128
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	20 e8       	ldi	r18, 0x80	; 128
    336c:	30 e0       	ldi	r19, 0x00	; 0
    336e:	f9 01       	movw	r30, r18
    3370:	20 81       	ld	r18, Z
    3372:	2f 7d       	andi	r18, 0xDF	; 223
    3374:	fc 01       	movw	r30, r24
    3376:	20 83       	st	Z, r18
		if (!(TCCR1A |= (1 << COM1B1)))
		{
			TCCR1A |= (1 << COM1B1);
		}
	}
}
    3378:	10 c0       	rjmp	.+32     	; 0x339a <heater_setDuty+0x4a>
	{
		TCCR1A &= ~(1 << COM1B1);
	}
	else
	{
		OCR1B = duty;
    337a:	8a e8       	ldi	r24, 0x8A	; 138
    337c:	90 e0       	ldi	r25, 0x00	; 0
    337e:	29 81       	ldd	r18, Y+1	; 0x01
    3380:	3a 81       	ldd	r19, Y+2	; 0x02
    3382:	fc 01       	movw	r30, r24
    3384:	31 83       	std	Z+1, r19	; 0x01
    3386:	20 83       	st	Z, r18
		if (!(TCCR1A |= (1 << COM1B1)))
    3388:	80 e8       	ldi	r24, 0x80	; 128
    338a:	90 e0       	ldi	r25, 0x00	; 0
    338c:	20 e8       	ldi	r18, 0x80	; 128
    338e:	30 e0       	ldi	r19, 0x00	; 0
    3390:	f9 01       	movw	r30, r18
    3392:	20 81       	ld	r18, Z
    3394:	20 62       	ori	r18, 0x20	; 32
    3396:	fc 01       	movw	r30, r24
    3398:	20 83       	st	Z, r18
		{
			TCCR1A |= (1 << COM1B1);
		}
	}
}
    339a:	00 00       	nop
    339c:	0f 90       	pop	r0
    339e:	0f 90       	pop	r0
    33a0:	df 91       	pop	r29
    33a2:	cf 91       	pop	r28
    33a4:	08 95       	ret

000033a6 <calc_pid>:

uint16_t calc_pid (uint16_t referenceValue, uint16_t measuredValue, bool inverted)
{
    33a6:	cf 92       	push	r12
    33a8:	df 92       	push	r13
    33aa:	ef 92       	push	r14
    33ac:	ff 92       	push	r15
    33ae:	cf 93       	push	r28
    33b0:	df 93       	push	r29
    33b2:	cd b7       	in	r28, 0x3d	; 61
    33b4:	de b7       	in	r29, 0x3e	; 62
    33b6:	67 97       	sbiw	r28, 0x17	; 23
    33b8:	0f b6       	in	r0, 0x3f	; 63
    33ba:	f8 94       	cli
    33bc:	de bf       	out	0x3e, r29	; 62
    33be:	0f be       	out	0x3f, r0	; 63
    33c0:	cd bf       	out	0x3d, r28	; 61
    33c2:	9c 8b       	std	Y+20, r25	; 0x14
    33c4:	8b 8b       	std	Y+19, r24	; 0x13
    33c6:	7e 8b       	std	Y+22, r23	; 0x16
    33c8:	6d 8b       	std	Y+21, r22	; 0x15
    33ca:	4f 8b       	std	Y+23, r20	; 0x17
	float pTerm = 0, iTerm = 0, dTerm = 0;
    33cc:	19 82       	std	Y+1, r1	; 0x01
    33ce:	1a 82       	std	Y+2, r1	; 0x02
    33d0:	1b 82       	std	Y+3, r1	; 0x03
    33d2:	1c 82       	std	Y+4, r1	; 0x04
    33d4:	1d 82       	std	Y+5, r1	; 0x05
    33d6:	1e 82       	std	Y+6, r1	; 0x06
    33d8:	1f 82       	std	Y+7, r1	; 0x07
    33da:	18 86       	std	Y+8, r1	; 0x08
    33dc:	19 86       	std	Y+9, r1	; 0x09
    33de:	1a 86       	std	Y+10, r1	; 0x0a
    33e0:	1b 86       	std	Y+11, r1	; 0x0b
    33e2:	1c 86       	std	Y+12, r1	; 0x0c
	// calculation error:
	int16_t error = (int16_t) referenceValue - (int16_t) measuredValue;
    33e4:	2b 89       	ldd	r18, Y+19	; 0x13
    33e6:	3c 89       	ldd	r19, Y+20	; 0x14
    33e8:	8d 89       	ldd	r24, Y+21	; 0x15
    33ea:	9e 89       	ldd	r25, Y+22	; 0x16
    33ec:	a9 01       	movw	r20, r18
    33ee:	48 1b       	sub	r20, r24
    33f0:	59 0b       	sbc	r21, r25
    33f2:	ca 01       	movw	r24, r20
    33f4:	98 8b       	std	Y+16, r25	; 0x10
    33f6:	8f 87       	std	Y+15, r24	; 0x0f
	int16_t position = (int16_t) measuredValue;
    33f8:	8d 89       	ldd	r24, Y+21	; 0x15
    33fa:	9e 89       	ldd	r25, Y+22	; 0x16
    33fc:	9a 8b       	std	Y+18, r25	; 0x12
    33fe:	89 8b       	std	Y+17, r24	; 0x11
	
	// calculate p-term;
	if (inverted)
    3400:	8f 89       	ldd	r24, Y+23	; 0x17
    3402:	88 23       	and	r24, r24
    3404:	39 f1       	breq	.+78     	; 0x3454 <calc_pid+0xae>
	{
		pTerm = -pidController.pGain * error;
    3406:	80 91 b3 01 	lds	r24, 0x01B3	; 0x8001b3 <pidController>
    340a:	90 91 b4 01 	lds	r25, 0x01B4	; 0x8001b4 <pidController+0x1>
    340e:	a0 91 b5 01 	lds	r26, 0x01B5	; 0x8001b5 <pidController+0x2>
    3412:	b0 91 b6 01 	lds	r27, 0x01B6	; 0x8001b6 <pidController+0x3>
    3416:	6c 01       	movw	r12, r24
    3418:	7d 01       	movw	r14, r26
    341a:	f7 fa       	bst	r15, 7
    341c:	f0 94       	com	r15
    341e:	f7 f8       	bld	r15, 7
    3420:	f0 94       	com	r15
    3422:	8f 85       	ldd	r24, Y+15	; 0x0f
    3424:	98 89       	ldd	r25, Y+16	; 0x10
    3426:	09 2e       	mov	r0, r25
    3428:	00 0c       	add	r0, r0
    342a:	aa 0b       	sbc	r26, r26
    342c:	bb 0b       	sbc	r27, r27
    342e:	bc 01       	movw	r22, r24
    3430:	cd 01       	movw	r24, r26
    3432:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3436:	dc 01       	movw	r26, r24
    3438:	cb 01       	movw	r24, r22
    343a:	9c 01       	movw	r18, r24
    343c:	ad 01       	movw	r20, r26
    343e:	c7 01       	movw	r24, r14
    3440:	b6 01       	movw	r22, r12
    3442:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3446:	dc 01       	movw	r26, r24
    3448:	cb 01       	movw	r24, r22
    344a:	89 83       	std	Y+1, r24	; 0x01
    344c:	9a 83       	std	Y+2, r25	; 0x02
    344e:	ab 83       	std	Y+3, r26	; 0x03
    3450:	bc 83       	std	Y+4, r27	; 0x04
    3452:	20 c0       	rjmp	.+64     	; 0x3494 <calc_pid+0xee>
	} else {
		pTerm = pidController.pGain * error;
    3454:	c0 90 b3 01 	lds	r12, 0x01B3	; 0x8001b3 <pidController>
    3458:	d0 90 b4 01 	lds	r13, 0x01B4	; 0x8001b4 <pidController+0x1>
    345c:	e0 90 b5 01 	lds	r14, 0x01B5	; 0x8001b5 <pidController+0x2>
    3460:	f0 90 b6 01 	lds	r15, 0x01B6	; 0x8001b6 <pidController+0x3>
    3464:	8f 85       	ldd	r24, Y+15	; 0x0f
    3466:	98 89       	ldd	r25, Y+16	; 0x10
    3468:	09 2e       	mov	r0, r25
    346a:	00 0c       	add	r0, r0
    346c:	aa 0b       	sbc	r26, r26
    346e:	bb 0b       	sbc	r27, r27
    3470:	bc 01       	movw	r22, r24
    3472:	cd 01       	movw	r24, r26
    3474:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3478:	dc 01       	movw	r26, r24
    347a:	cb 01       	movw	r24, r22
    347c:	9c 01       	movw	r18, r24
    347e:	ad 01       	movw	r20, r26
    3480:	c7 01       	movw	r24, r14
    3482:	b6 01       	movw	r22, r12
    3484:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3488:	dc 01       	movw	r26, r24
    348a:	cb 01       	movw	r24, r22
    348c:	89 83       	std	Y+1, r24	; 0x01
    348e:	9a 83       	std	Y+2, r25	; 0x02
    3490:	ab 83       	std	Y+3, r26	; 0x03
    3492:	bc 83       	std	Y+4, r27	; 0x04
	}
	
	
	//Calculate the integral state
	pidController.iState += error;
    3494:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    3498:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    349c:	8f 85       	ldd	r24, Y+15	; 0x0f
    349e:	98 89       	ldd	r25, Y+16	; 0x10
    34a0:	82 0f       	add	r24, r18
    34a2:	93 1f       	adc	r25, r19
    34a4:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    34a8:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	
	// check limits of iState
	if (pidController.iState > pidController.iMax) pidController.iState = pidController.iMax;
    34ac:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    34b0:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    34b4:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pidController+0x12>
    34b8:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pidController+0x13>
    34bc:	82 17       	cp	r24, r18
    34be:	93 07       	cpc	r25, r19
    34c0:	44 f4       	brge	.+16     	; 0x34d2 <calc_pid+0x12c>
    34c2:	80 91 c5 01 	lds	r24, 0x01C5	; 0x8001c5 <pidController+0x12>
    34c6:	90 91 c6 01 	lds	r25, 0x01C6	; 0x8001c6 <pidController+0x13>
    34ca:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    34ce:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	if (pidController.iState < pidController.iMin) pidController.iState = pidController.iMin;
    34d2:	20 91 bf 01 	lds	r18, 0x01BF	; 0x8001bf <pidController+0xc>
    34d6:	30 91 c0 01 	lds	r19, 0x01C0	; 0x8001c0 <pidController+0xd>
    34da:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pidController+0x10>
    34de:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pidController+0x11>
    34e2:	28 17       	cp	r18, r24
    34e4:	39 07       	cpc	r19, r25
    34e6:	44 f4       	brge	.+16     	; 0x34f8 <calc_pid+0x152>
    34e8:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <pidController+0x10>
    34ec:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <pidController+0x11>
    34f0:	90 93 c0 01 	sts	0x01C0, r25	; 0x8001c0 <pidController+0xd>
    34f4:	80 93 bf 01 	sts	0x01BF, r24	; 0x8001bf <pidController+0xc>
	
	//Calculate the integral term.
	if (inverted)
    34f8:	8f 89       	ldd	r24, Y+23	; 0x17
    34fa:	88 23       	and	r24, r24
    34fc:	49 f1       	breq	.+82     	; 0x3550 <calc_pid+0x1aa>
	{
		iTerm = -pidController.iGain * pidController.iState;
    34fe:	80 91 b7 01 	lds	r24, 0x01B7	; 0x8001b7 <pidController+0x4>
    3502:	90 91 b8 01 	lds	r25, 0x01B8	; 0x8001b8 <pidController+0x5>
    3506:	a0 91 b9 01 	lds	r26, 0x01B9	; 0x8001b9 <pidController+0x6>
    350a:	b0 91 ba 01 	lds	r27, 0x01BA	; 0x8001ba <pidController+0x7>
    350e:	6c 01       	movw	r12, r24
    3510:	7d 01       	movw	r14, r26
    3512:	f7 fa       	bst	r15, 7
    3514:	f0 94       	com	r15
    3516:	f7 f8       	bld	r15, 7
    3518:	f0 94       	com	r15
    351a:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <pidController+0xc>
    351e:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <pidController+0xd>
    3522:	09 2e       	mov	r0, r25
    3524:	00 0c       	add	r0, r0
    3526:	aa 0b       	sbc	r26, r26
    3528:	bb 0b       	sbc	r27, r27
    352a:	bc 01       	movw	r22, r24
    352c:	cd 01       	movw	r24, r26
    352e:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3532:	dc 01       	movw	r26, r24
    3534:	cb 01       	movw	r24, r22
    3536:	9c 01       	movw	r18, r24
    3538:	ad 01       	movw	r20, r26
    353a:	c7 01       	movw	r24, r14
    353c:	b6 01       	movw	r22, r12
    353e:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3542:	dc 01       	movw	r26, r24
    3544:	cb 01       	movw	r24, r22
    3546:	8d 83       	std	Y+5, r24	; 0x05
    3548:	9e 83       	std	Y+6, r25	; 0x06
    354a:	af 83       	std	Y+7, r26	; 0x07
    354c:	b8 87       	std	Y+8, r27	; 0x08
    354e:	22 c0       	rjmp	.+68     	; 0x3594 <calc_pid+0x1ee>
	} else {
		iTerm = pidController.iGain * pidController.iState;
    3550:	c0 90 b7 01 	lds	r12, 0x01B7	; 0x8001b7 <pidController+0x4>
    3554:	d0 90 b8 01 	lds	r13, 0x01B8	; 0x8001b8 <pidController+0x5>
    3558:	e0 90 b9 01 	lds	r14, 0x01B9	; 0x8001b9 <pidController+0x6>
    355c:	f0 90 ba 01 	lds	r15, 0x01BA	; 0x8001ba <pidController+0x7>
    3560:	80 91 bf 01 	lds	r24, 0x01BF	; 0x8001bf <pidController+0xc>
    3564:	90 91 c0 01 	lds	r25, 0x01C0	; 0x8001c0 <pidController+0xd>
    3568:	09 2e       	mov	r0, r25
    356a:	00 0c       	add	r0, r0
    356c:	aa 0b       	sbc	r26, r26
    356e:	bb 0b       	sbc	r27, r27
    3570:	bc 01       	movw	r22, r24
    3572:	cd 01       	movw	r24, r26
    3574:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    3578:	dc 01       	movw	r26, r24
    357a:	cb 01       	movw	r24, r22
    357c:	9c 01       	movw	r18, r24
    357e:	ad 01       	movw	r20, r26
    3580:	c7 01       	movw	r24, r14
    3582:	b6 01       	movw	r22, r12
    3584:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    3588:	dc 01       	movw	r26, r24
    358a:	cb 01       	movw	r24, r22
    358c:	8d 83       	std	Y+5, r24	; 0x05
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	af 83       	std	Y+7, r26	; 0x07
    3592:	b8 87       	std	Y+8, r27	; 0x08
	}
	
	//Calculate the derivative term.
	if (inverted)
    3594:	8f 89       	ldd	r24, Y+23	; 0x17
    3596:	88 23       	and	r24, r24
    3598:	79 f1       	breq	.+94     	; 0x35f8 <calc_pid+0x252>
	{
		dTerm = -pidController.dGain * (pidController.dState - position);
    359a:	80 91 bb 01 	lds	r24, 0x01BB	; 0x8001bb <pidController+0x8>
    359e:	90 91 bc 01 	lds	r25, 0x01BC	; 0x8001bc <pidController+0x9>
    35a2:	a0 91 bd 01 	lds	r26, 0x01BD	; 0x8001bd <pidController+0xa>
    35a6:	b0 91 be 01 	lds	r27, 0x01BE	; 0x8001be <pidController+0xb>
    35aa:	6c 01       	movw	r12, r24
    35ac:	7d 01       	movw	r14, r26
    35ae:	f7 fa       	bst	r15, 7
    35b0:	f0 94       	com	r15
    35b2:	f7 f8       	bld	r15, 7
    35b4:	f0 94       	com	r15
    35b6:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <pidController+0xe>
    35ba:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <pidController+0xf>
    35be:	89 89       	ldd	r24, Y+17	; 0x11
    35c0:	9a 89       	ldd	r25, Y+18	; 0x12
    35c2:	a9 01       	movw	r20, r18
    35c4:	48 1b       	sub	r20, r24
    35c6:	59 0b       	sbc	r21, r25
    35c8:	ca 01       	movw	r24, r20
    35ca:	09 2e       	mov	r0, r25
    35cc:	00 0c       	add	r0, r0
    35ce:	aa 0b       	sbc	r26, r26
    35d0:	bb 0b       	sbc	r27, r27
    35d2:	bc 01       	movw	r22, r24
    35d4:	cd 01       	movw	r24, r26
    35d6:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    35da:	dc 01       	movw	r26, r24
    35dc:	cb 01       	movw	r24, r22
    35de:	9c 01       	movw	r18, r24
    35e0:	ad 01       	movw	r20, r26
    35e2:	c7 01       	movw	r24, r14
    35e4:	b6 01       	movw	r22, r12
    35e6:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    35ea:	dc 01       	movw	r26, r24
    35ec:	cb 01       	movw	r24, r22
    35ee:	89 87       	std	Y+9, r24	; 0x09
    35f0:	9a 87       	std	Y+10, r25	; 0x0a
    35f2:	ab 87       	std	Y+11, r26	; 0x0b
    35f4:	bc 87       	std	Y+12, r27	; 0x0c
    35f6:	28 c0       	rjmp	.+80     	; 0x3648 <calc_pid+0x2a2>
	} else {
		dTerm = pidController.dGain * (pidController.dState - position);
    35f8:	c0 90 bb 01 	lds	r12, 0x01BB	; 0x8001bb <pidController+0x8>
    35fc:	d0 90 bc 01 	lds	r13, 0x01BC	; 0x8001bc <pidController+0x9>
    3600:	e0 90 bd 01 	lds	r14, 0x01BD	; 0x8001bd <pidController+0xa>
    3604:	f0 90 be 01 	lds	r15, 0x01BE	; 0x8001be <pidController+0xb>
    3608:	20 91 c1 01 	lds	r18, 0x01C1	; 0x8001c1 <pidController+0xe>
    360c:	30 91 c2 01 	lds	r19, 0x01C2	; 0x8001c2 <pidController+0xf>
    3610:	89 89       	ldd	r24, Y+17	; 0x11
    3612:	9a 89       	ldd	r25, Y+18	; 0x12
    3614:	a9 01       	movw	r20, r18
    3616:	48 1b       	sub	r20, r24
    3618:	59 0b       	sbc	r21, r25
    361a:	ca 01       	movw	r24, r20
    361c:	09 2e       	mov	r0, r25
    361e:	00 0c       	add	r0, r0
    3620:	aa 0b       	sbc	r26, r26
    3622:	bb 0b       	sbc	r27, r27
    3624:	bc 01       	movw	r22, r24
    3626:	cd 01       	movw	r24, r26
    3628:	0e 94 b0 1e 	call	0x3d60	; 0x3d60 <__floatsisf>
    362c:	dc 01       	movw	r26, r24
    362e:	cb 01       	movw	r24, r22
    3630:	9c 01       	movw	r18, r24
    3632:	ad 01       	movw	r20, r26
    3634:	c7 01       	movw	r24, r14
    3636:	b6 01       	movw	r22, r12
    3638:	0e 94 3c 1f 	call	0x3e78	; 0x3e78 <__mulsf3>
    363c:	dc 01       	movw	r26, r24
    363e:	cb 01       	movw	r24, r22
    3640:	89 87       	std	Y+9, r24	; 0x09
    3642:	9a 87       	std	Y+10, r25	; 0x0a
    3644:	ab 87       	std	Y+11, r26	; 0x0b
    3646:	bc 87       	std	Y+12, r27	; 0x0c
	}
	pidController.dState = position;
    3648:	89 89       	ldd	r24, Y+17	; 0x11
    364a:	9a 89       	ldd	r25, Y+18	; 0x12
    364c:	90 93 c2 01 	sts	0x01C2, r25	; 0x8001c2 <pidController+0xf>
    3650:	80 93 c1 01 	sts	0x01C1, r24	; 0x8001c1 <pidController+0xe>
	
	//Calculate regulation (PI).
	int16_t RegulationOutput = pTerm + iTerm + dTerm;
    3654:	2d 81       	ldd	r18, Y+5	; 0x05
    3656:	3e 81       	ldd	r19, Y+6	; 0x06
    3658:	4f 81       	ldd	r20, Y+7	; 0x07
    365a:	58 85       	ldd	r21, Y+8	; 0x08
    365c:	69 81       	ldd	r22, Y+1	; 0x01
    365e:	7a 81       	ldd	r23, Y+2	; 0x02
    3660:	8b 81       	ldd	r24, Y+3	; 0x03
    3662:	9c 81       	ldd	r25, Y+4	; 0x04
    3664:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__addsf3>
    3668:	dc 01       	movw	r26, r24
    366a:	cb 01       	movw	r24, r22
    366c:	29 85       	ldd	r18, Y+9	; 0x09
    366e:	3a 85       	ldd	r19, Y+10	; 0x0a
    3670:	4b 85       	ldd	r20, Y+11	; 0x0b
    3672:	5c 85       	ldd	r21, Y+12	; 0x0c
    3674:	bc 01       	movw	r22, r24
    3676:	cd 01       	movw	r24, r26
    3678:	0e 94 9a 1d 	call	0x3b34	; 0x3b34 <__addsf3>
    367c:	dc 01       	movw	r26, r24
    367e:	cb 01       	movw	r24, r22
    3680:	bc 01       	movw	r22, r24
    3682:	cd 01       	movw	r24, r26
    3684:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <__fixsfsi>
    3688:	dc 01       	movw	r26, r24
    368a:	cb 01       	movw	r24, r22
    368c:	9e 87       	std	Y+14, r25	; 0x0e
    368e:	8d 87       	std	Y+13, r24	; 0x0d
	
	// check limits of pwm here....
	
	if (RegulationOutput > pidController.pwmMax) 
    3690:	20 91 c9 01 	lds	r18, 0x01C9	; 0x8001c9 <pidController+0x16>
    3694:	30 91 ca 01 	lds	r19, 0x01CA	; 0x8001ca <pidController+0x17>
    3698:	8d 85       	ldd	r24, Y+13	; 0x0d
    369a:	9e 85       	ldd	r25, Y+14	; 0x0e
    369c:	28 17       	cp	r18, r24
    369e:	39 07       	cpc	r19, r25
    36a0:	34 f4       	brge	.+12     	; 0x36ae <calc_pid+0x308>
	{
		RegulationOutput = pidController.pwmMax;
    36a2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pidController+0x16>
    36a6:	90 91 ca 01 	lds	r25, 0x01CA	; 0x8001ca <pidController+0x17>
    36aa:	9e 87       	std	Y+14, r25	; 0x0e
    36ac:	8d 87       	std	Y+13, r24	; 0x0d
	}
	
	if (RegulationOutput < pidController.pwmMin)
    36ae:	20 91 c7 01 	lds	r18, 0x01C7	; 0x8001c7 <pidController+0x14>
    36b2:	30 91 c8 01 	lds	r19, 0x01C8	; 0x8001c8 <pidController+0x15>
    36b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    36b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    36ba:	82 17       	cp	r24, r18
    36bc:	93 07       	cpc	r25, r19
    36be:	34 f4       	brge	.+12     	; 0x36cc <calc_pid+0x326>
	{
		 RegulationOutput = pidController.pwmMin;
    36c0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pidController+0x14>
    36c4:	90 91 c8 01 	lds	r25, 0x01C8	; 0x8001c8 <pidController+0x15>
    36c8:	9e 87       	std	Y+14, r25	; 0x0e
    36ca:	8d 87       	std	Y+13, r24	; 0x0d
	}
		
	return  (uint16_t) RegulationOutput;
    36cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    36ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    36d0:	67 96       	adiw	r28, 0x17	; 23
    36d2:	0f b6       	in	r0, 0x3f	; 63
    36d4:	f8 94       	cli
    36d6:	de bf       	out	0x3e, r29	; 62
    36d8:	0f be       	out	0x3f, r0	; 63
    36da:	cd bf       	out	0x3d, r28	; 61
    36dc:	df 91       	pop	r29
    36de:	cf 91       	pop	r28
    36e0:	ff 90       	pop	r15
    36e2:	ef 90       	pop	r14
    36e4:	df 90       	pop	r13
    36e6:	cf 90       	pop	r12
    36e8:	08 95       	ret

000036ea <__make_u16t>:
{
	return (__x << 8)|(__x >> 8);
}

static __inline uint16_t __make_u16t(uint8_t __x1, uint8_t __x2)
{
    36ea:	cf 93       	push	r28
    36ec:	df 93       	push	r29
    36ee:	00 d0       	rcall	.+0      	; 0x36f0 <__make_u16t+0x6>
    36f0:	cd b7       	in	r28, 0x3d	; 61
    36f2:	de b7       	in	r29, 0x3e	; 62
    36f4:	89 83       	std	Y+1, r24	; 0x01
    36f6:	6a 83       	std	Y+2, r22	; 0x02
	// return (uint16_t)((__x2 << 8) + (__x1 & 0x00ff));
	return ((uint16_t) __x1 << 8) | __x2;
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	88 2f       	mov	r24, r24
    36fc:	90 e0       	ldi	r25, 0x00	; 0
    36fe:	38 2f       	mov	r19, r24
    3700:	22 27       	eor	r18, r18
    3702:	8a 81       	ldd	r24, Y+2	; 0x02
    3704:	88 2f       	mov	r24, r24
    3706:	90 e0       	ldi	r25, 0x00	; 0
    3708:	82 2b       	or	r24, r18
    370a:	93 2b       	or	r25, r19
}
    370c:	0f 90       	pop	r0
    370e:	0f 90       	pop	r0
    3710:	df 91       	pop	r29
    3712:	cf 91       	pop	r28
    3714:	08 95       	ret

00003716 <spi_init>:
 */ 

#include "spi.h"

void spi_init (void)
{
    3716:	cf 93       	push	r28
    3718:	df 93       	push	r29
    371a:	cd b7       	in	r28, 0x3d	; 61
    371c:	de b7       	in	r29, 0x3e	; 62
	// mosi (pb1) and sck (pb7) are outputs
	DDRB |= (1 << PINB1)|(1 << PINB7);
    371e:	84 e2       	ldi	r24, 0x24	; 36
    3720:	90 e0       	ldi	r25, 0x00	; 0
    3722:	24 e2       	ldi	r18, 0x24	; 36
    3724:	30 e0       	ldi	r19, 0x00	; 0
    3726:	f9 01       	movw	r30, r18
    3728:	20 81       	ld	r18, Z
    372a:	22 68       	ori	r18, 0x82	; 130
    372c:	fc 01       	movw	r30, r24
    372e:	20 83       	st	Z, r18
	// spi ss is output too
	DDRD |= (1 << PIND5);
    3730:	8a e2       	ldi	r24, 0x2A	; 42
    3732:	90 e0       	ldi	r25, 0x00	; 0
    3734:	2a e2       	ldi	r18, 0x2A	; 42
    3736:	30 e0       	ldi	r19, 0x00	; 0
    3738:	f9 01       	movw	r30, r18
    373a:	20 81       	ld	r18, Z
    373c:	20 62       	ori	r18, 0x20	; 32
    373e:	fc 01       	movw	r30, r24
    3740:	20 83       	st	Z, r18
	// bring them high
	SPI_SS_DESELECT;
    3742:	8b e2       	ldi	r24, 0x2B	; 43
    3744:	90 e0       	ldi	r25, 0x00	; 0
    3746:	2b e2       	ldi	r18, 0x2B	; 43
    3748:	30 e0       	ldi	r19, 0x00	; 0
    374a:	f9 01       	movw	r30, r18
    374c:	20 81       	ld	r18, Z
    374e:	20 62       	ori	r18, 0x20	; 32
    3750:	fc 01       	movw	r30, r24
    3752:	20 83       	st	Z, r18
	
	// enable spi, 2MHz (div 8), master, mode1 (cpol 0, cpha 1)
	// SPCR |= (1 << SPE)|(0 << DORD)|(1 << MSTR)|(0 << CPOL)|(1 << CPHA)|(1 << SPI2X)|(1 << SPR0);
	
	// enable spi, 1MHz (div 16), master, mode1 (cpol 0, cpha 1)
	SPCR = (1 << SPE)|(1 << MSTR)|(1 << CPHA)|(1 << SPR0);
    3754:	8c e4       	ldi	r24, 0x4C	; 76
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	25 e5       	ldi	r18, 0x55	; 85
    375a:	fc 01       	movw	r30, r24
    375c:	20 83       	st	Z, r18
	
	// enable spi, 4MHz (div 16), master, mode1 (cpol 0, cpha 1)
	// SPCR = (1 << SPE)|(1 << MSTR)|(1 << CPHA);
}
    375e:	00 00       	nop
    3760:	df 91       	pop	r29
    3762:	cf 91       	pop	r28
    3764:	08 95       	ret

00003766 <spi_read_write>:

uint16_t spi_read_write (uint16_t data)
{
    3766:	cf 93       	push	r28
    3768:	df 93       	push	r29
    376a:	00 d0       	rcall	.+0      	; 0x376c <spi_read_write+0x6>
    376c:	00 d0       	rcall	.+0      	; 0x376e <spi_read_write+0x8>
    376e:	cd b7       	in	r28, 0x3d	; 61
    3770:	de b7       	in	r29, 0x3e	; 62
    3772:	9c 83       	std	Y+4, r25	; 0x04
    3774:	8b 83       	std	Y+3, r24	; 0x03
	SPI_SS_SELECT;
    3776:	8b e2       	ldi	r24, 0x2B	; 43
    3778:	90 e0       	ldi	r25, 0x00	; 0
    377a:	2b e2       	ldi	r18, 0x2B	; 43
    377c:	30 e0       	ldi	r19, 0x00	; 0
    377e:	f9 01       	movw	r30, r18
    3780:	20 81       	ld	r18, Z
    3782:	2f 7d       	andi	r18, 0xDF	; 223
    3784:	fc 01       	movw	r30, r24
    3786:	20 83       	st	Z, r18
	uint8_t byte1, byte2;
	
	SPDR = (data >> 8);
    3788:	8e e4       	ldi	r24, 0x4E	; 78
    378a:	90 e0       	ldi	r25, 0x00	; 0
    378c:	2b 81       	ldd	r18, Y+3	; 0x03
    378e:	3c 81       	ldd	r19, Y+4	; 0x04
    3790:	23 2f       	mov	r18, r19
    3792:	33 27       	eor	r19, r19
    3794:	fc 01       	movw	r30, r24
    3796:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    3798:	00 00       	nop
    379a:	8d e4       	ldi	r24, 0x4D	; 77
    379c:	90 e0       	ldi	r25, 0x00	; 0
    379e:	fc 01       	movw	r30, r24
    37a0:	80 81       	ld	r24, Z
    37a2:	88 23       	and	r24, r24
    37a4:	d4 f7       	brge	.-12     	; 0x379a <spi_read_write+0x34>
	byte1 = SPDR;
    37a6:	8e e4       	ldi	r24, 0x4E	; 78
    37a8:	90 e0       	ldi	r25, 0x00	; 0
    37aa:	fc 01       	movw	r30, r24
    37ac:	80 81       	ld	r24, Z
    37ae:	89 83       	std	Y+1, r24	; 0x01
	byte1 &= ~((1 << 7)|(1 << 6));	// clear two most significant bits in control byte because of don't care, cj125 manual, page 16
    37b0:	89 81       	ldd	r24, Y+1	; 0x01
    37b2:	8f 73       	andi	r24, 0x3F	; 63
    37b4:	89 83       	std	Y+1, r24	; 0x01
	SPDR = (data & 0xFF);
    37b6:	8e e4       	ldi	r24, 0x4E	; 78
    37b8:	90 e0       	ldi	r25, 0x00	; 0
    37ba:	2b 81       	ldd	r18, Y+3	; 0x03
    37bc:	fc 01       	movw	r30, r24
    37be:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));
    37c0:	00 00       	nop
    37c2:	8d e4       	ldi	r24, 0x4D	; 77
    37c4:	90 e0       	ldi	r25, 0x00	; 0
    37c6:	fc 01       	movw	r30, r24
    37c8:	80 81       	ld	r24, Z
    37ca:	88 23       	and	r24, r24
    37cc:	d4 f7       	brge	.-12     	; 0x37c2 <spi_read_write+0x5c>
	byte2 = SPDR;
    37ce:	8e e4       	ldi	r24, 0x4E	; 78
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	fc 01       	movw	r30, r24
    37d4:	80 81       	ld	r24, Z
    37d6:	8a 83       	std	Y+2, r24	; 0x02
	
	SPI_SS_DESELECT;
    37d8:	8b e2       	ldi	r24, 0x2B	; 43
    37da:	90 e0       	ldi	r25, 0x00	; 0
    37dc:	2b e2       	ldi	r18, 0x2B	; 43
    37de:	30 e0       	ldi	r19, 0x00	; 0
    37e0:	f9 01       	movw	r30, r18
    37e2:	20 81       	ld	r18, Z
    37e4:	20 62       	ori	r18, 0x20	; 32
    37e6:	fc 01       	movw	r30, r24
    37e8:	20 83       	st	Z, r18
	
	return make_u16t (byte1, byte2);
    37ea:	6a 81       	ldd	r22, Y+2	; 0x02
    37ec:	89 81       	ldd	r24, Y+1	; 0x01
    37ee:	0e 94 75 1b 	call	0x36ea	; 0x36ea <__make_u16t>
    37f2:	0f 90       	pop	r0
    37f4:	0f 90       	pop	r0
    37f6:	0f 90       	pop	r0
    37f8:	0f 90       	pop	r0
    37fa:	df 91       	pop	r29
    37fc:	cf 91       	pop	r28
    37fe:	08 95       	ret

00003800 <board_init>:
// #include "../adc/adc.h"

tBoard board;

void board_init (tBoard *board)
{
    3800:	cf 93       	push	r28
    3802:	df 93       	push	r29
    3804:	00 d0       	rcall	.+0      	; 0x3806 <board_init+0x6>
    3806:	cd b7       	in	r28, 0x3d	; 61
    3808:	de b7       	in	r29, 0x3e	; 62
    380a:	9a 83       	std	Y+2, r25	; 0x02
    380c:	89 83       	std	Y+1, r24	; 0x01
	board->input1_state = LOW;
    380e:	89 81       	ldd	r24, Y+1	; 0x01
    3810:	9a 81       	ldd	r25, Y+2	; 0x02
    3812:	fc 01       	movw	r30, r24
    3814:	11 82       	std	Z+1, r1	; 0x01
	board->input2_state = LOW;
    3816:	89 81       	ldd	r24, Y+1	; 0x01
    3818:	9a 81       	ldd	r25, Y+2	; 0x02
    381a:	fc 01       	movw	r30, r24
    381c:	12 82       	std	Z+2, r1	; 0x02
	
	// init the both inputs, in1 = pc6, in2 = pb4
	DDRC  &= ~(1 << PINC6);
    381e:	87 e2       	ldi	r24, 0x27	; 39
    3820:	90 e0       	ldi	r25, 0x00	; 0
    3822:	27 e2       	ldi	r18, 0x27	; 39
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	f9 01       	movw	r30, r18
    3828:	20 81       	ld	r18, Z
    382a:	2f 7b       	andi	r18, 0xBF	; 191
    382c:	fc 01       	movw	r30, r24
    382e:	20 83       	st	Z, r18
	DDRB  &= ~(1 << PINB4);
    3830:	84 e2       	ldi	r24, 0x24	; 36
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	24 e2       	ldi	r18, 0x24	; 36
    3836:	30 e0       	ldi	r19, 0x00	; 0
    3838:	f9 01       	movw	r30, r18
    383a:	20 81       	ld	r18, Z
    383c:	2f 7e       	andi	r18, 0xEF	; 239
    383e:	fc 01       	movw	r30, r24
    3840:	20 83       	st	Z, r18
	
	// init LED2 (pb5) and LED2 (pb6)
	// led1 is power
	DDRB |= (1 << PINB5)|(1 << PINB6);
    3842:	84 e2       	ldi	r24, 0x24	; 36
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	24 e2       	ldi	r18, 0x24	; 36
    3848:	30 e0       	ldi	r19, 0x00	; 0
    384a:	f9 01       	movw	r30, r18
    384c:	20 81       	ld	r18, Z
    384e:	20 66       	ori	r18, 0x60	; 96
    3850:	fc 01       	movw	r30, r24
    3852:	20 83       	st	Z, r18
	// switch them on
	PORTB |= (1 << PINB5)|(1 << PINB6);
    3854:	85 e2       	ldi	r24, 0x25	; 37
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	25 e2       	ldi	r18, 0x25	; 37
    385a:	30 e0       	ldi	r19, 0x00	; 0
    385c:	f9 01       	movw	r30, r18
    385e:	20 81       	ld	r18, Z
    3860:	20 66       	ori	r18, 0x60	; 96
    3862:	fc 01       	movw	r30, r24
    3864:	20 83       	st	Z, r18
}
    3866:	00 00       	nop
    3868:	0f 90       	pop	r0
    386a:	0f 90       	pop	r0
    386c:	df 91       	pop	r29
    386e:	cf 91       	pop	r28
    3870:	08 95       	ret

00003872 <board_read_inputs>:

void board_read_inputs (tBoard *board)
{
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	00 d0       	rcall	.+0      	; 0x3878 <board_read_inputs+0x6>
    3878:	cd b7       	in	r28, 0x3d	; 61
    387a:	de b7       	in	r29, 0x3e	; 62
    387c:	9a 83       	std	Y+2, r25	; 0x02
    387e:	89 83       	std	Y+1, r24	; 0x01
	// is pinc6 high?
	if ((PINC & (1 << PINC6)) == 1)
    3880:	86 e2       	ldi	r24, 0x26	; 38
    3882:	90 e0       	ldi	r25, 0x00	; 0
    3884:	fc 01       	movw	r30, r24
    3886:	80 81       	ld	r24, Z
	{
		board->input1_state = HIGH;
	}
	else
	{
		board->input1_state = LOW;
    3888:	89 81       	ldd	r24, Y+1	; 0x01
    388a:	9a 81       	ldd	r25, Y+2	; 0x02
    388c:	fc 01       	movw	r30, r24
    388e:	11 82       	std	Z+1, r1	; 0x01
	}
	
	// is pinb4 high?
	if ((PINB & (1 << PINB4)) == 1)
    3890:	83 e2       	ldi	r24, 0x23	; 35
    3892:	90 e0       	ldi	r25, 0x00	; 0
    3894:	fc 01       	movw	r30, r24
    3896:	80 81       	ld	r24, Z
	{
		board->input2_state = HIGH;
	}
	else
	{
		board->input2_state = LOW;
    3898:	89 81       	ldd	r24, Y+1	; 0x01
    389a:	9a 81       	ldd	r25, Y+2	; 0x02
    389c:	fc 01       	movw	r30, r24
    389e:	12 82       	std	Z+2, r1	; 0x02
	}
}
    38a0:	00 00       	nop
    38a2:	0f 90       	pop	r0
    38a4:	0f 90       	pop	r0
    38a6:	df 91       	pop	r29
    38a8:	cf 91       	pop	r28
    38aa:	08 95       	ret

000038ac <isEnabled>:

bool isEnabled (void)
{
    38ac:	cf 93       	push	r28
    38ae:	df 93       	push	r29
    38b0:	cd b7       	in	r28, 0x3d	; 61
    38b2:	de b7       	in	r29, 0x3e	; 62
	return (bool) ((PINC & (1 << PINC6)) == 1);
    38b4:	86 e2       	ldi	r24, 0x26	; 38
    38b6:	90 e0       	ldi	r25, 0x00	; 0
    38b8:	fc 01       	movw	r30, r24
    38ba:	80 81       	ld	r24, Z
    38bc:	80 e0       	ldi	r24, 0x00	; 0
}
    38be:	df 91       	pop	r29
    38c0:	cf 91       	pop	r28
    38c2:	08 95       	ret

000038c4 <init_1ms_timer>:
volatile uint8_t timer_250ms;
volatile uint16_t timer_500ms;
volatile uint16_t timer_1000ms;

void init_1ms_timer (void)
{
    38c4:	cf 93       	push	r28
    38c6:	df 93       	push	r29
    38c8:	cd b7       	in	r28, 0x3d	; 61
    38ca:	de b7       	in	r29, 0x3e	; 62
	// timer between interrupts: 0.001s
	// Frequency: 1000Hz
	// F_CPU: 16MHz
	// Prescaler: 64
	// Compare match register: 64
	ms_counter = 0;
    38cc:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <ms_counter>
    38d0:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <ms_counter+0x1>
    38d4:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <ms_counter+0x2>
    38d8:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <ms_counter+0x3>
	timer_10ms = 0;
    38dc:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <timer_10ms>
	timer_20ms = 0;
    38e0:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timer_20ms>
	timer_50ms = 0;
    38e4:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer_50ms>
	timer_100ms = 0;
    38e8:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <timer_100ms>
	timer_250ms = 0;
    38ec:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <timer_250ms>
	timer_500ms = 0;
    38f0:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <timer_500ms+0x1>
    38f4:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <timer_500ms>
	timer_1000ms = 0;
    38f8:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer_1000ms+0x1>
    38fc:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_1000ms>
	TIMER_TASKS = 0;
    3900:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <TIMER_TASKS>

	OCR0A = 249;
    3904:	87 e4       	ldi	r24, 0x47	; 71
    3906:	90 e0       	ldi	r25, 0x00	; 0
    3908:	29 ef       	ldi	r18, 0xF9	; 249
    390a:	fc 01       	movw	r30, r24
    390c:	20 83       	st	Z, r18
	TIMSK0 |= (1 << OCIE0A);			// output compare A interrupt
    390e:	8e e6       	ldi	r24, 0x6E	; 110
    3910:	90 e0       	ldi	r25, 0x00	; 0
    3912:	2e e6       	ldi	r18, 0x6E	; 110
    3914:	30 e0       	ldi	r19, 0x00	; 0
    3916:	f9 01       	movw	r30, r18
    3918:	20 81       	ld	r18, Z
    391a:	22 60       	ori	r18, 0x02	; 2
    391c:	fc 01       	movw	r30, r24
    391e:	20 83       	st	Z, r18
	// TCCR0A |= (1 << COM0A0);			// clear OC0A on compare match
	TCCR0A |= (1<<WGM01);			// Mode = CTC
    3920:	84 e4       	ldi	r24, 0x44	; 68
    3922:	90 e0       	ldi	r25, 0x00	; 0
    3924:	24 e4       	ldi	r18, 0x44	; 68
    3926:	30 e0       	ldi	r19, 0x00	; 0
    3928:	f9 01       	movw	r30, r18
    392a:	20 81       	ld	r18, Z
    392c:	22 60       	ori	r18, 0x02	; 2
    392e:	fc 01       	movw	r30, r24
    3930:	20 83       	st	Z, r18
	TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
    3932:	85 e4       	ldi	r24, 0x45	; 69
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	25 e4       	ldi	r18, 0x45	; 69
    3938:	30 e0       	ldi	r19, 0x00	; 0
    393a:	f9 01       	movw	r30, r18
    393c:	20 81       	ld	r18, Z
    393e:	23 60       	ori	r18, 0x03	; 3
    3940:	fc 01       	movw	r30, r24
    3942:	20 83       	st	Z, r18
}
    3944:	00 00       	nop
    3946:	df 91       	pop	r29
    3948:	cf 91       	pop	r28
    394a:	08 95       	ret

0000394c <timer_delay_ms>:

void timer_delay_ms (uint16_t millis)
{
    394c:	cf 93       	push	r28
    394e:	df 93       	push	r29
    3950:	00 d0       	rcall	.+0      	; 0x3952 <timer_delay_ms+0x6>
    3952:	cd b7       	in	r28, 0x3d	; 61
    3954:	de b7       	in	r29, 0x3e	; 62
    3956:	9a 83       	std	Y+2, r25	; 0x02
    3958:	89 83       	std	Y+1, r24	; 0x01
	do 
	{
		OCR0A = 249;
    395a:	87 e4       	ldi	r24, 0x47	; 71
    395c:	90 e0       	ldi	r25, 0x00	; 0
    395e:	29 ef       	ldi	r18, 0xF9	; 249
    3960:	fc 01       	movw	r30, r24
    3962:	20 83       	st	Z, r18
		TCCR0A |= (1<<WGM01);				// Mode = CTC
    3964:	84 e4       	ldi	r24, 0x44	; 68
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	24 e4       	ldi	r18, 0x44	; 68
    396a:	30 e0       	ldi	r19, 0x00	; 0
    396c:	f9 01       	movw	r30, r18
    396e:	20 81       	ld	r18, Z
    3970:	22 60       	ori	r18, 0x02	; 2
    3972:	fc 01       	movw	r30, r24
    3974:	20 83       	st	Z, r18
		TCCR0B |= (1 << CS01)|(1 << CS00);	// prescaler 64
    3976:	85 e4       	ldi	r24, 0x45	; 69
    3978:	90 e0       	ldi	r25, 0x00	; 0
    397a:	25 e4       	ldi	r18, 0x45	; 69
    397c:	30 e0       	ldi	r19, 0x00	; 0
    397e:	f9 01       	movw	r30, r18
    3980:	20 81       	ld	r18, Z
    3982:	23 60       	ori	r18, 0x03	; 3
    3984:	fc 01       	movw	r30, r24
    3986:	20 83       	st	Z, r18
		while ((TIFR1 & (1 << OCF1A)) == 0);
    3988:	00 00       	nop
    398a:	86 e3       	ldi	r24, 0x36	; 54
    398c:	90 e0       	ldi	r25, 0x00	; 0
    398e:	fc 01       	movw	r30, r24
    3990:	80 81       	ld	r24, Z
    3992:	88 2f       	mov	r24, r24
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	82 70       	andi	r24, 0x02	; 2
    3998:	99 27       	eor	r25, r25
    399a:	89 2b       	or	r24, r25
    399c:	b1 f3       	breq	.-20     	; 0x398a <timer_delay_ms+0x3e>
		TIFR1 |= (1 << OCF1A);
    399e:	86 e3       	ldi	r24, 0x36	; 54
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	26 e3       	ldi	r18, 0x36	; 54
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	f9 01       	movw	r30, r18
    39a8:	20 81       	ld	r18, Z
    39aa:	22 60       	ori	r18, 0x02	; 2
    39ac:	fc 01       	movw	r30, r24
    39ae:	20 83       	st	Z, r18
		millis--;
    39b0:	89 81       	ldd	r24, Y+1	; 0x01
    39b2:	9a 81       	ldd	r25, Y+2	; 0x02
    39b4:	01 97       	sbiw	r24, 0x01	; 1
    39b6:	9a 83       	std	Y+2, r25	; 0x02
    39b8:	89 83       	std	Y+1, r24	; 0x01
	} while (millis > 0);
    39ba:	89 81       	ldd	r24, Y+1	; 0x01
    39bc:	9a 81       	ldd	r25, Y+2	; 0x02
    39be:	89 2b       	or	r24, r25
    39c0:	61 f6       	brne	.-104    	; 0x395a <timer_delay_ms+0xe>
}
    39c2:	00 00       	nop
    39c4:	0f 90       	pop	r0
    39c6:	0f 90       	pop	r0
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	08 95       	ret

000039ce <__vector_15>:

ISR (TIMER0_COMPA_vect)
{
    39ce:	1f 92       	push	r1
    39d0:	0f 92       	push	r0
    39d2:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    39d6:	0f 92       	push	r0
    39d8:	11 24       	eor	r1, r1
    39da:	2f 93       	push	r18
    39dc:	8f 93       	push	r24
    39de:	9f 93       	push	r25
    39e0:	af 93       	push	r26
    39e2:	bf 93       	push	r27
    39e4:	cf 93       	push	r28
    39e6:	df 93       	push	r29
    39e8:	cd b7       	in	r28, 0x3d	; 61
    39ea:	de b7       	in	r29, 0x3e	; 62
	ms_counter++;
    39ec:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <ms_counter>
    39f0:	90 91 ed 01 	lds	r25, 0x01ED	; 0x8001ed <ms_counter+0x1>
    39f4:	a0 91 ee 01 	lds	r26, 0x01EE	; 0x8001ee <ms_counter+0x2>
    39f8:	b0 91 ef 01 	lds	r27, 0x01EF	; 0x8001ef <ms_counter+0x3>
    39fc:	01 96       	adiw	r24, 0x01	; 1
    39fe:	a1 1d       	adc	r26, r1
    3a00:	b1 1d       	adc	r27, r1
    3a02:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <ms_counter>
    3a06:	90 93 ed 01 	sts	0x01ED, r25	; 0x8001ed <ms_counter+0x1>
    3a0a:	a0 93 ee 01 	sts	0x01EE, r26	; 0x8001ee <ms_counter+0x2>
    3a0e:	b0 93 ef 01 	sts	0x01EF, r27	; 0x8001ef <ms_counter+0x3>
	timer_10ms++;
    3a12:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <timer_10ms>
    3a16:	8f 5f       	subi	r24, 0xFF	; 255
    3a18:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <timer_10ms>
	timer_20ms++;
    3a1c:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <timer_20ms>
    3a20:	8f 5f       	subi	r24, 0xFF	; 255
    3a22:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <timer_20ms>
	timer_50ms++;
    3a26:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer_50ms>
    3a2a:	8f 5f       	subi	r24, 0xFF	; 255
    3a2c:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <timer_50ms>
	timer_100ms++;
    3a30:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer_100ms>
    3a34:	8f 5f       	subi	r24, 0xFF	; 255
    3a36:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <timer_100ms>
	timer_250ms++;
    3a3a:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <timer_250ms>
    3a3e:	8f 5f       	subi	r24, 0xFF	; 255
    3a40:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <timer_250ms>
	timer_500ms++;
    3a44:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer_500ms>
    3a48:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer_500ms+0x1>
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <timer_500ms+0x1>
    3a52:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <timer_500ms>
	timer_1000ms++;
    3a56:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_1000ms>
    3a5a:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_1000ms+0x1>
    3a5e:	01 96       	adiw	r24, 0x01	; 1
    3a60:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <timer_1000ms+0x1>
    3a64:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <timer_1000ms>
	
	if (timer_10ms == 10)
    3a68:	80 91 f6 01 	lds	r24, 0x01F6	; 0x8001f6 <timer_10ms>
    3a6c:	8a 30       	cpi	r24, 0x0A	; 10
    3a6e:	39 f4       	brne	.+14     	; 0x3a7e <__vector_15+0xb0>
	{
		timer_10ms = 0;
    3a70:	10 92 f6 01 	sts	0x01F6, r1	; 0x8001f6 <timer_10ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_10ms);
    3a74:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a78:	81 60       	ori	r24, 0x01	; 1
    3a7a:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_20ms == 20)
    3a7e:	80 91 f3 01 	lds	r24, 0x01F3	; 0x8001f3 <timer_20ms>
    3a82:	84 31       	cpi	r24, 0x14	; 20
    3a84:	39 f4       	brne	.+14     	; 0x3a94 <__vector_15+0xc6>
	{
		timer_20ms = 0;
    3a86:	10 92 f3 01 	sts	0x01F3, r1	; 0x8001f3 <timer_20ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_20ms);
    3a8a:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3a8e:	82 60       	ori	r24, 0x02	; 2
    3a90:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_50ms == 50)
    3a94:	80 91 f2 01 	lds	r24, 0x01F2	; 0x8001f2 <timer_50ms>
    3a98:	82 33       	cpi	r24, 0x32	; 50
    3a9a:	39 f4       	brne	.+14     	; 0x3aaa <__vector_15+0xdc>
	{
		timer_50ms = 0;
    3a9c:	10 92 f2 01 	sts	0x01F2, r1	; 0x8001f2 <timer_50ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_50ms);
    3aa0:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3aa4:	84 60       	ori	r24, 0x04	; 4
    3aa6:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_100ms == 100)
    3aaa:	80 91 f4 01 	lds	r24, 0x01F4	; 0x8001f4 <timer_100ms>
    3aae:	84 36       	cpi	r24, 0x64	; 100
    3ab0:	39 f4       	brne	.+14     	; 0x3ac0 <__vector_15+0xf2>
	{
		timer_100ms = 0;
    3ab2:	10 92 f4 01 	sts	0x01F4, r1	; 0x8001f4 <timer_100ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_100ms);
    3ab6:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3aba:	88 60       	ori	r24, 0x08	; 8
    3abc:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_250ms == 250)
    3ac0:	80 91 f5 01 	lds	r24, 0x01F5	; 0x8001f5 <timer_250ms>
    3ac4:	8a 3f       	cpi	r24, 0xFA	; 250
    3ac6:	39 f4       	brne	.+14     	; 0x3ad6 <__vector_15+0x108>
	{
		timer_250ms = 0;
    3ac8:	10 92 f5 01 	sts	0x01F5, r1	; 0x8001f5 <timer_250ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_250ms);
    3acc:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3ad0:	80 61       	ori	r24, 0x10	; 16
    3ad2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_500ms == 500)
    3ad6:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <timer_500ms>
    3ada:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <timer_500ms+0x1>
    3ade:	84 3f       	cpi	r24, 0xF4	; 244
    3ae0:	91 40       	sbci	r25, 0x01	; 1
    3ae2:	49 f4       	brne	.+18     	; 0x3af6 <__vector_15+0x128>
	{
		timer_500ms = 0;
    3ae4:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <timer_500ms+0x1>
    3ae8:	10 92 ea 01 	sts	0x01EA, r1	; 0x8001ea <timer_500ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_500ms);
    3aec:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3af0:	80 62       	ori	r24, 0x20	; 32
    3af2:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
	
	if (timer_1000ms == 1000)
    3af6:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <timer_1000ms>
    3afa:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <timer_1000ms+0x1>
    3afe:	88 3e       	cpi	r24, 0xE8	; 232
    3b00:	93 40       	sbci	r25, 0x03	; 3
    3b02:	49 f4       	brne	.+18     	; 0x3b16 <__vector_15+0x148>
	{
		timer_1000ms = 0;
    3b04:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <timer_1000ms+0x1>
    3b08:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <timer_1000ms>
		BIT_SET(TIMER_TASKS, BIT_TIMER_1000ms);
    3b0c:	80 91 b2 01 	lds	r24, 0x01B2	; 0x8001b2 <TIMER_TASKS>
    3b10:	80 64       	ori	r24, 0x40	; 64
    3b12:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <TIMER_TASKS>
	}
    3b16:	00 00       	nop
    3b18:	df 91       	pop	r29
    3b1a:	cf 91       	pop	r28
    3b1c:	bf 91       	pop	r27
    3b1e:	af 91       	pop	r26
    3b20:	9f 91       	pop	r25
    3b22:	8f 91       	pop	r24
    3b24:	2f 91       	pop	r18
    3b26:	0f 90       	pop	r0
    3b28:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7f805f>
    3b2c:	0f 90       	pop	r0
    3b2e:	1f 90       	pop	r1
    3b30:	18 95       	reti

00003b32 <__subsf3>:
    3b32:	50 58       	subi	r21, 0x80	; 128

00003b34 <__addsf3>:
    3b34:	bb 27       	eor	r27, r27
    3b36:	aa 27       	eor	r26, r26
    3b38:	0e 94 b1 1d 	call	0x3b62	; 0x3b62 <__addsf3x>
    3b3c:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__fp_round>
    3b40:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__fp_pscA>
    3b44:	38 f0       	brcs	.+14     	; 0x3b54 <__addsf3+0x20>
    3b46:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__fp_pscB>
    3b4a:	20 f0       	brcs	.+8      	; 0x3b54 <__addsf3+0x20>
    3b4c:	39 f4       	brne	.+14     	; 0x3b5c <__addsf3+0x28>
    3b4e:	9f 3f       	cpi	r25, 0xFF	; 255
    3b50:	19 f4       	brne	.+6      	; 0x3b58 <__addsf3+0x24>
    3b52:	26 f4       	brtc	.+8      	; 0x3b5c <__addsf3+0x28>
    3b54:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__fp_nan>
    3b58:	0e f4       	brtc	.+2      	; 0x3b5c <__addsf3+0x28>
    3b5a:	e0 95       	com	r30
    3b5c:	e7 fb       	bst	r30, 7
    3b5e:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__fp_inf>

00003b62 <__addsf3x>:
    3b62:	e9 2f       	mov	r30, r25
    3b64:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__fp_split3>
    3b68:	58 f3       	brcs	.-42     	; 0x3b40 <__addsf3+0xc>
    3b6a:	ba 17       	cp	r27, r26
    3b6c:	62 07       	cpc	r22, r18
    3b6e:	73 07       	cpc	r23, r19
    3b70:	84 07       	cpc	r24, r20
    3b72:	95 07       	cpc	r25, r21
    3b74:	20 f0       	brcs	.+8      	; 0x3b7e <__addsf3x+0x1c>
    3b76:	79 f4       	brne	.+30     	; 0x3b96 <__addsf3x+0x34>
    3b78:	a6 f5       	brtc	.+104    	; 0x3be2 <__addsf3x+0x80>
    3b7a:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_zero>
    3b7e:	0e f4       	brtc	.+2      	; 0x3b82 <__addsf3x+0x20>
    3b80:	e0 95       	com	r30
    3b82:	0b 2e       	mov	r0, r27
    3b84:	ba 2f       	mov	r27, r26
    3b86:	a0 2d       	mov	r26, r0
    3b88:	0b 01       	movw	r0, r22
    3b8a:	b9 01       	movw	r22, r18
    3b8c:	90 01       	movw	r18, r0
    3b8e:	0c 01       	movw	r0, r24
    3b90:	ca 01       	movw	r24, r20
    3b92:	a0 01       	movw	r20, r0
    3b94:	11 24       	eor	r1, r1
    3b96:	ff 27       	eor	r31, r31
    3b98:	59 1b       	sub	r21, r25
    3b9a:	99 f0       	breq	.+38     	; 0x3bc2 <__addsf3x+0x60>
    3b9c:	59 3f       	cpi	r21, 0xF9	; 249
    3b9e:	50 f4       	brcc	.+20     	; 0x3bb4 <__addsf3x+0x52>
    3ba0:	50 3e       	cpi	r21, 0xE0	; 224
    3ba2:	68 f1       	brcs	.+90     	; 0x3bfe <__addsf3x+0x9c>
    3ba4:	1a 16       	cp	r1, r26
    3ba6:	f0 40       	sbci	r31, 0x00	; 0
    3ba8:	a2 2f       	mov	r26, r18
    3baa:	23 2f       	mov	r18, r19
    3bac:	34 2f       	mov	r19, r20
    3bae:	44 27       	eor	r20, r20
    3bb0:	58 5f       	subi	r21, 0xF8	; 248
    3bb2:	f3 cf       	rjmp	.-26     	; 0x3b9a <__addsf3x+0x38>
    3bb4:	46 95       	lsr	r20
    3bb6:	37 95       	ror	r19
    3bb8:	27 95       	ror	r18
    3bba:	a7 95       	ror	r26
    3bbc:	f0 40       	sbci	r31, 0x00	; 0
    3bbe:	53 95       	inc	r21
    3bc0:	c9 f7       	brne	.-14     	; 0x3bb4 <__addsf3x+0x52>
    3bc2:	7e f4       	brtc	.+30     	; 0x3be2 <__addsf3x+0x80>
    3bc4:	1f 16       	cp	r1, r31
    3bc6:	ba 0b       	sbc	r27, r26
    3bc8:	62 0b       	sbc	r22, r18
    3bca:	73 0b       	sbc	r23, r19
    3bcc:	84 0b       	sbc	r24, r20
    3bce:	ba f0       	brmi	.+46     	; 0x3bfe <__addsf3x+0x9c>
    3bd0:	91 50       	subi	r25, 0x01	; 1
    3bd2:	a1 f0       	breq	.+40     	; 0x3bfc <__addsf3x+0x9a>
    3bd4:	ff 0f       	add	r31, r31
    3bd6:	bb 1f       	adc	r27, r27
    3bd8:	66 1f       	adc	r22, r22
    3bda:	77 1f       	adc	r23, r23
    3bdc:	88 1f       	adc	r24, r24
    3bde:	c2 f7       	brpl	.-16     	; 0x3bd0 <__addsf3x+0x6e>
    3be0:	0e c0       	rjmp	.+28     	; 0x3bfe <__addsf3x+0x9c>
    3be2:	ba 0f       	add	r27, r26
    3be4:	62 1f       	adc	r22, r18
    3be6:	73 1f       	adc	r23, r19
    3be8:	84 1f       	adc	r24, r20
    3bea:	48 f4       	brcc	.+18     	; 0x3bfe <__addsf3x+0x9c>
    3bec:	87 95       	ror	r24
    3bee:	77 95       	ror	r23
    3bf0:	67 95       	ror	r22
    3bf2:	b7 95       	ror	r27
    3bf4:	f7 95       	ror	r31
    3bf6:	9e 3f       	cpi	r25, 0xFE	; 254
    3bf8:	08 f0       	brcs	.+2      	; 0x3bfc <__addsf3x+0x9a>
    3bfa:	b0 cf       	rjmp	.-160    	; 0x3b5c <__addsf3+0x28>
    3bfc:	93 95       	inc	r25
    3bfe:	88 0f       	add	r24, r24
    3c00:	08 f0       	brcs	.+2      	; 0x3c04 <__addsf3x+0xa2>
    3c02:	99 27       	eor	r25, r25
    3c04:	ee 0f       	add	r30, r30
    3c06:	97 95       	ror	r25
    3c08:	87 95       	ror	r24
    3c0a:	08 95       	ret

00003c0c <__divsf3>:
    3c0c:	0e 94 1a 1e 	call	0x3c34	; 0x3c34 <__divsf3x>
    3c10:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__fp_round>
    3c14:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__fp_pscB>
    3c18:	58 f0       	brcs	.+22     	; 0x3c30 <__divsf3+0x24>
    3c1a:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__fp_pscA>
    3c1e:	40 f0       	brcs	.+16     	; 0x3c30 <__divsf3+0x24>
    3c20:	29 f4       	brne	.+10     	; 0x3c2c <__divsf3+0x20>
    3c22:	5f 3f       	cpi	r21, 0xFF	; 255
    3c24:	29 f0       	breq	.+10     	; 0x3c30 <__divsf3+0x24>
    3c26:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__fp_inf>
    3c2a:	51 11       	cpse	r21, r1
    3c2c:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__fp_szero>
    3c30:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__fp_nan>

00003c34 <__divsf3x>:
    3c34:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__fp_split3>
    3c38:	68 f3       	brcs	.-38     	; 0x3c14 <__divsf3+0x8>

00003c3a <__divsf3_pse>:
    3c3a:	99 23       	and	r25, r25
    3c3c:	b1 f3       	breq	.-20     	; 0x3c2a <__divsf3+0x1e>
    3c3e:	55 23       	and	r21, r21
    3c40:	91 f3       	breq	.-28     	; 0x3c26 <__divsf3+0x1a>
    3c42:	95 1b       	sub	r25, r21
    3c44:	55 0b       	sbc	r21, r21
    3c46:	bb 27       	eor	r27, r27
    3c48:	aa 27       	eor	r26, r26
    3c4a:	62 17       	cp	r22, r18
    3c4c:	73 07       	cpc	r23, r19
    3c4e:	84 07       	cpc	r24, r20
    3c50:	38 f0       	brcs	.+14     	; 0x3c60 <__divsf3_pse+0x26>
    3c52:	9f 5f       	subi	r25, 0xFF	; 255
    3c54:	5f 4f       	sbci	r21, 0xFF	; 255
    3c56:	22 0f       	add	r18, r18
    3c58:	33 1f       	adc	r19, r19
    3c5a:	44 1f       	adc	r20, r20
    3c5c:	aa 1f       	adc	r26, r26
    3c5e:	a9 f3       	breq	.-22     	; 0x3c4a <__divsf3_pse+0x10>
    3c60:	35 d0       	rcall	.+106    	; 0x3ccc <__divsf3_pse+0x92>
    3c62:	0e 2e       	mov	r0, r30
    3c64:	3a f0       	brmi	.+14     	; 0x3c74 <__divsf3_pse+0x3a>
    3c66:	e0 e8       	ldi	r30, 0x80	; 128
    3c68:	32 d0       	rcall	.+100    	; 0x3cce <__divsf3_pse+0x94>
    3c6a:	91 50       	subi	r25, 0x01	; 1
    3c6c:	50 40       	sbci	r21, 0x00	; 0
    3c6e:	e6 95       	lsr	r30
    3c70:	00 1c       	adc	r0, r0
    3c72:	ca f7       	brpl	.-14     	; 0x3c66 <__divsf3_pse+0x2c>
    3c74:	2b d0       	rcall	.+86     	; 0x3ccc <__divsf3_pse+0x92>
    3c76:	fe 2f       	mov	r31, r30
    3c78:	29 d0       	rcall	.+82     	; 0x3ccc <__divsf3_pse+0x92>
    3c7a:	66 0f       	add	r22, r22
    3c7c:	77 1f       	adc	r23, r23
    3c7e:	88 1f       	adc	r24, r24
    3c80:	bb 1f       	adc	r27, r27
    3c82:	26 17       	cp	r18, r22
    3c84:	37 07       	cpc	r19, r23
    3c86:	48 07       	cpc	r20, r24
    3c88:	ab 07       	cpc	r26, r27
    3c8a:	b0 e8       	ldi	r27, 0x80	; 128
    3c8c:	09 f0       	breq	.+2      	; 0x3c90 <__divsf3_pse+0x56>
    3c8e:	bb 0b       	sbc	r27, r27
    3c90:	80 2d       	mov	r24, r0
    3c92:	bf 01       	movw	r22, r30
    3c94:	ff 27       	eor	r31, r31
    3c96:	93 58       	subi	r25, 0x83	; 131
    3c98:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9a:	3a f0       	brmi	.+14     	; 0x3caa <__divsf3_pse+0x70>
    3c9c:	9e 3f       	cpi	r25, 0xFE	; 254
    3c9e:	51 05       	cpc	r21, r1
    3ca0:	78 f0       	brcs	.+30     	; 0x3cc0 <__divsf3_pse+0x86>
    3ca2:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__fp_inf>
    3ca6:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__fp_szero>
    3caa:	5f 3f       	cpi	r21, 0xFF	; 255
    3cac:	e4 f3       	brlt	.-8      	; 0x3ca6 <__divsf3_pse+0x6c>
    3cae:	98 3e       	cpi	r25, 0xE8	; 232
    3cb0:	d4 f3       	brlt	.-12     	; 0x3ca6 <__divsf3_pse+0x6c>
    3cb2:	86 95       	lsr	r24
    3cb4:	77 95       	ror	r23
    3cb6:	67 95       	ror	r22
    3cb8:	b7 95       	ror	r27
    3cba:	f7 95       	ror	r31
    3cbc:	9f 5f       	subi	r25, 0xFF	; 255
    3cbe:	c9 f7       	brne	.-14     	; 0x3cb2 <__divsf3_pse+0x78>
    3cc0:	88 0f       	add	r24, r24
    3cc2:	91 1d       	adc	r25, r1
    3cc4:	96 95       	lsr	r25
    3cc6:	87 95       	ror	r24
    3cc8:	97 f9       	bld	r25, 7
    3cca:	08 95       	ret
    3ccc:	e1 e0       	ldi	r30, 0x01	; 1
    3cce:	66 0f       	add	r22, r22
    3cd0:	77 1f       	adc	r23, r23
    3cd2:	88 1f       	adc	r24, r24
    3cd4:	bb 1f       	adc	r27, r27
    3cd6:	62 17       	cp	r22, r18
    3cd8:	73 07       	cpc	r23, r19
    3cda:	84 07       	cpc	r24, r20
    3cdc:	ba 07       	cpc	r27, r26
    3cde:	20 f0       	brcs	.+8      	; 0x3ce8 <__divsf3_pse+0xae>
    3ce0:	62 1b       	sub	r22, r18
    3ce2:	73 0b       	sbc	r23, r19
    3ce4:	84 0b       	sbc	r24, r20
    3ce6:	ba 0b       	sbc	r27, r26
    3ce8:	ee 1f       	adc	r30, r30
    3cea:	88 f7       	brcc	.-30     	; 0x3cce <__divsf3_pse+0x94>
    3cec:	e0 95       	com	r30
    3cee:	08 95       	ret

00003cf0 <__fixsfsi>:
    3cf0:	0e 94 7f 1e 	call	0x3cfe	; 0x3cfe <__fixunssfsi>
    3cf4:	68 94       	set
    3cf6:	b1 11       	cpse	r27, r1
    3cf8:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__fp_szero>
    3cfc:	08 95       	ret

00003cfe <__fixunssfsi>:
    3cfe:	0e 94 1b 1f 	call	0x3e36	; 0x3e36 <__fp_splitA>
    3d02:	88 f0       	brcs	.+34     	; 0x3d26 <__fixunssfsi+0x28>
    3d04:	9f 57       	subi	r25, 0x7F	; 127
    3d06:	98 f0       	brcs	.+38     	; 0x3d2e <__fixunssfsi+0x30>
    3d08:	b9 2f       	mov	r27, r25
    3d0a:	99 27       	eor	r25, r25
    3d0c:	b7 51       	subi	r27, 0x17	; 23
    3d0e:	b0 f0       	brcs	.+44     	; 0x3d3c <__fixunssfsi+0x3e>
    3d10:	e1 f0       	breq	.+56     	; 0x3d4a <__fixunssfsi+0x4c>
    3d12:	66 0f       	add	r22, r22
    3d14:	77 1f       	adc	r23, r23
    3d16:	88 1f       	adc	r24, r24
    3d18:	99 1f       	adc	r25, r25
    3d1a:	1a f0       	brmi	.+6      	; 0x3d22 <__fixunssfsi+0x24>
    3d1c:	ba 95       	dec	r27
    3d1e:	c9 f7       	brne	.-14     	; 0x3d12 <__fixunssfsi+0x14>
    3d20:	14 c0       	rjmp	.+40     	; 0x3d4a <__fixunssfsi+0x4c>
    3d22:	b1 30       	cpi	r27, 0x01	; 1
    3d24:	91 f0       	breq	.+36     	; 0x3d4a <__fixunssfsi+0x4c>
    3d26:	0e 94 35 1f 	call	0x3e6a	; 0x3e6a <__fp_zero>
    3d2a:	b1 e0       	ldi	r27, 0x01	; 1
    3d2c:	08 95       	ret
    3d2e:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <__fp_zero>
    3d32:	67 2f       	mov	r22, r23
    3d34:	78 2f       	mov	r23, r24
    3d36:	88 27       	eor	r24, r24
    3d38:	b8 5f       	subi	r27, 0xF8	; 248
    3d3a:	39 f0       	breq	.+14     	; 0x3d4a <__fixunssfsi+0x4c>
    3d3c:	b9 3f       	cpi	r27, 0xF9	; 249
    3d3e:	cc f3       	brlt	.-14     	; 0x3d32 <__fixunssfsi+0x34>
    3d40:	86 95       	lsr	r24
    3d42:	77 95       	ror	r23
    3d44:	67 95       	ror	r22
    3d46:	b3 95       	inc	r27
    3d48:	d9 f7       	brne	.-10     	; 0x3d40 <__fixunssfsi+0x42>
    3d4a:	3e f4       	brtc	.+14     	; 0x3d5a <__fixunssfsi+0x5c>
    3d4c:	90 95       	com	r25
    3d4e:	80 95       	com	r24
    3d50:	70 95       	com	r23
    3d52:	61 95       	neg	r22
    3d54:	7f 4f       	sbci	r23, 0xFF	; 255
    3d56:	8f 4f       	sbci	r24, 0xFF	; 255
    3d58:	9f 4f       	sbci	r25, 0xFF	; 255
    3d5a:	08 95       	ret

00003d5c <__floatunsisf>:
    3d5c:	e8 94       	clt
    3d5e:	09 c0       	rjmp	.+18     	; 0x3d72 <__floatsisf+0x12>

00003d60 <__floatsisf>:
    3d60:	97 fb       	bst	r25, 7
    3d62:	3e f4       	brtc	.+14     	; 0x3d72 <__floatsisf+0x12>
    3d64:	90 95       	com	r25
    3d66:	80 95       	com	r24
    3d68:	70 95       	com	r23
    3d6a:	61 95       	neg	r22
    3d6c:	7f 4f       	sbci	r23, 0xFF	; 255
    3d6e:	8f 4f       	sbci	r24, 0xFF	; 255
    3d70:	9f 4f       	sbci	r25, 0xFF	; 255
    3d72:	99 23       	and	r25, r25
    3d74:	a9 f0       	breq	.+42     	; 0x3da0 <__floatsisf+0x40>
    3d76:	f9 2f       	mov	r31, r25
    3d78:	96 e9       	ldi	r25, 0x96	; 150
    3d7a:	bb 27       	eor	r27, r27
    3d7c:	93 95       	inc	r25
    3d7e:	f6 95       	lsr	r31
    3d80:	87 95       	ror	r24
    3d82:	77 95       	ror	r23
    3d84:	67 95       	ror	r22
    3d86:	b7 95       	ror	r27
    3d88:	f1 11       	cpse	r31, r1
    3d8a:	f8 cf       	rjmp	.-16     	; 0x3d7c <__floatsisf+0x1c>
    3d8c:	fa f4       	brpl	.+62     	; 0x3dcc <__floatsisf+0x6c>
    3d8e:	bb 0f       	add	r27, r27
    3d90:	11 f4       	brne	.+4      	; 0x3d96 <__floatsisf+0x36>
    3d92:	60 ff       	sbrs	r22, 0
    3d94:	1b c0       	rjmp	.+54     	; 0x3dcc <__floatsisf+0x6c>
    3d96:	6f 5f       	subi	r22, 0xFF	; 255
    3d98:	7f 4f       	sbci	r23, 0xFF	; 255
    3d9a:	8f 4f       	sbci	r24, 0xFF	; 255
    3d9c:	9f 4f       	sbci	r25, 0xFF	; 255
    3d9e:	16 c0       	rjmp	.+44     	; 0x3dcc <__floatsisf+0x6c>
    3da0:	88 23       	and	r24, r24
    3da2:	11 f0       	breq	.+4      	; 0x3da8 <__floatsisf+0x48>
    3da4:	96 e9       	ldi	r25, 0x96	; 150
    3da6:	11 c0       	rjmp	.+34     	; 0x3dca <__floatsisf+0x6a>
    3da8:	77 23       	and	r23, r23
    3daa:	21 f0       	breq	.+8      	; 0x3db4 <__floatsisf+0x54>
    3dac:	9e e8       	ldi	r25, 0x8E	; 142
    3dae:	87 2f       	mov	r24, r23
    3db0:	76 2f       	mov	r23, r22
    3db2:	05 c0       	rjmp	.+10     	; 0x3dbe <__floatsisf+0x5e>
    3db4:	66 23       	and	r22, r22
    3db6:	71 f0       	breq	.+28     	; 0x3dd4 <__floatsisf+0x74>
    3db8:	96 e8       	ldi	r25, 0x86	; 134
    3dba:	86 2f       	mov	r24, r22
    3dbc:	70 e0       	ldi	r23, 0x00	; 0
    3dbe:	60 e0       	ldi	r22, 0x00	; 0
    3dc0:	2a f0       	brmi	.+10     	; 0x3dcc <__floatsisf+0x6c>
    3dc2:	9a 95       	dec	r25
    3dc4:	66 0f       	add	r22, r22
    3dc6:	77 1f       	adc	r23, r23
    3dc8:	88 1f       	adc	r24, r24
    3dca:	da f7       	brpl	.-10     	; 0x3dc2 <__floatsisf+0x62>
    3dcc:	88 0f       	add	r24, r24
    3dce:	96 95       	lsr	r25
    3dd0:	87 95       	ror	r24
    3dd2:	97 f9       	bld	r25, 7
    3dd4:	08 95       	ret

00003dd6 <__fp_inf>:
    3dd6:	97 f9       	bld	r25, 7
    3dd8:	9f 67       	ori	r25, 0x7F	; 127
    3dda:	80 e8       	ldi	r24, 0x80	; 128
    3ddc:	70 e0       	ldi	r23, 0x00	; 0
    3dde:	60 e0       	ldi	r22, 0x00	; 0
    3de0:	08 95       	ret

00003de2 <__fp_nan>:
    3de2:	9f ef       	ldi	r25, 0xFF	; 255
    3de4:	80 ec       	ldi	r24, 0xC0	; 192
    3de6:	08 95       	ret

00003de8 <__fp_pscA>:
    3de8:	00 24       	eor	r0, r0
    3dea:	0a 94       	dec	r0
    3dec:	16 16       	cp	r1, r22
    3dee:	17 06       	cpc	r1, r23
    3df0:	18 06       	cpc	r1, r24
    3df2:	09 06       	cpc	r0, r25
    3df4:	08 95       	ret

00003df6 <__fp_pscB>:
    3df6:	00 24       	eor	r0, r0
    3df8:	0a 94       	dec	r0
    3dfa:	12 16       	cp	r1, r18
    3dfc:	13 06       	cpc	r1, r19
    3dfe:	14 06       	cpc	r1, r20
    3e00:	05 06       	cpc	r0, r21
    3e02:	08 95       	ret

00003e04 <__fp_round>:
    3e04:	09 2e       	mov	r0, r25
    3e06:	03 94       	inc	r0
    3e08:	00 0c       	add	r0, r0
    3e0a:	11 f4       	brne	.+4      	; 0x3e10 <__fp_round+0xc>
    3e0c:	88 23       	and	r24, r24
    3e0e:	52 f0       	brmi	.+20     	; 0x3e24 <__fp_round+0x20>
    3e10:	bb 0f       	add	r27, r27
    3e12:	40 f4       	brcc	.+16     	; 0x3e24 <__fp_round+0x20>
    3e14:	bf 2b       	or	r27, r31
    3e16:	11 f4       	brne	.+4      	; 0x3e1c <__fp_round+0x18>
    3e18:	60 ff       	sbrs	r22, 0
    3e1a:	04 c0       	rjmp	.+8      	; 0x3e24 <__fp_round+0x20>
    3e1c:	6f 5f       	subi	r22, 0xFF	; 255
    3e1e:	7f 4f       	sbci	r23, 0xFF	; 255
    3e20:	8f 4f       	sbci	r24, 0xFF	; 255
    3e22:	9f 4f       	sbci	r25, 0xFF	; 255
    3e24:	08 95       	ret

00003e26 <__fp_split3>:
    3e26:	57 fd       	sbrc	r21, 7
    3e28:	90 58       	subi	r25, 0x80	; 128
    3e2a:	44 0f       	add	r20, r20
    3e2c:	55 1f       	adc	r21, r21
    3e2e:	59 f0       	breq	.+22     	; 0x3e46 <__fp_splitA+0x10>
    3e30:	5f 3f       	cpi	r21, 0xFF	; 255
    3e32:	71 f0       	breq	.+28     	; 0x3e50 <__fp_splitA+0x1a>
    3e34:	47 95       	ror	r20

00003e36 <__fp_splitA>:
    3e36:	88 0f       	add	r24, r24
    3e38:	97 fb       	bst	r25, 7
    3e3a:	99 1f       	adc	r25, r25
    3e3c:	61 f0       	breq	.+24     	; 0x3e56 <__fp_splitA+0x20>
    3e3e:	9f 3f       	cpi	r25, 0xFF	; 255
    3e40:	79 f0       	breq	.+30     	; 0x3e60 <__fp_splitA+0x2a>
    3e42:	87 95       	ror	r24
    3e44:	08 95       	ret
    3e46:	12 16       	cp	r1, r18
    3e48:	13 06       	cpc	r1, r19
    3e4a:	14 06       	cpc	r1, r20
    3e4c:	55 1f       	adc	r21, r21
    3e4e:	f2 cf       	rjmp	.-28     	; 0x3e34 <__fp_split3+0xe>
    3e50:	46 95       	lsr	r20
    3e52:	f1 df       	rcall	.-30     	; 0x3e36 <__fp_splitA>
    3e54:	08 c0       	rjmp	.+16     	; 0x3e66 <__fp_splitA+0x30>
    3e56:	16 16       	cp	r1, r22
    3e58:	17 06       	cpc	r1, r23
    3e5a:	18 06       	cpc	r1, r24
    3e5c:	99 1f       	adc	r25, r25
    3e5e:	f1 cf       	rjmp	.-30     	; 0x3e42 <__fp_splitA+0xc>
    3e60:	86 95       	lsr	r24
    3e62:	71 05       	cpc	r23, r1
    3e64:	61 05       	cpc	r22, r1
    3e66:	08 94       	sec
    3e68:	08 95       	ret

00003e6a <__fp_zero>:
    3e6a:	e8 94       	clt

00003e6c <__fp_szero>:
    3e6c:	bb 27       	eor	r27, r27
    3e6e:	66 27       	eor	r22, r22
    3e70:	77 27       	eor	r23, r23
    3e72:	cb 01       	movw	r24, r22
    3e74:	97 f9       	bld	r25, 7
    3e76:	08 95       	ret

00003e78 <__mulsf3>:
    3e78:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__mulsf3x>
    3e7c:	0c 94 02 1f 	jmp	0x3e04	; 0x3e04 <__fp_round>
    3e80:	0e 94 f4 1e 	call	0x3de8	; 0x3de8 <__fp_pscA>
    3e84:	38 f0       	brcs	.+14     	; 0x3e94 <__mulsf3+0x1c>
    3e86:	0e 94 fb 1e 	call	0x3df6	; 0x3df6 <__fp_pscB>
    3e8a:	20 f0       	brcs	.+8      	; 0x3e94 <__mulsf3+0x1c>
    3e8c:	95 23       	and	r25, r21
    3e8e:	11 f0       	breq	.+4      	; 0x3e94 <__mulsf3+0x1c>
    3e90:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__fp_inf>
    3e94:	0c 94 f1 1e 	jmp	0x3de2	; 0x3de2 <__fp_nan>
    3e98:	11 24       	eor	r1, r1
    3e9a:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__fp_szero>

00003e9e <__mulsf3x>:
    3e9e:	0e 94 13 1f 	call	0x3e26	; 0x3e26 <__fp_split3>
    3ea2:	70 f3       	brcs	.-36     	; 0x3e80 <__mulsf3+0x8>

00003ea4 <__mulsf3_pse>:
    3ea4:	95 9f       	mul	r25, r21
    3ea6:	c1 f3       	breq	.-16     	; 0x3e98 <__mulsf3+0x20>
    3ea8:	95 0f       	add	r25, r21
    3eaa:	50 e0       	ldi	r21, 0x00	; 0
    3eac:	55 1f       	adc	r21, r21
    3eae:	62 9f       	mul	r22, r18
    3eb0:	f0 01       	movw	r30, r0
    3eb2:	72 9f       	mul	r23, r18
    3eb4:	bb 27       	eor	r27, r27
    3eb6:	f0 0d       	add	r31, r0
    3eb8:	b1 1d       	adc	r27, r1
    3eba:	63 9f       	mul	r22, r19
    3ebc:	aa 27       	eor	r26, r26
    3ebe:	f0 0d       	add	r31, r0
    3ec0:	b1 1d       	adc	r27, r1
    3ec2:	aa 1f       	adc	r26, r26
    3ec4:	64 9f       	mul	r22, r20
    3ec6:	66 27       	eor	r22, r22
    3ec8:	b0 0d       	add	r27, r0
    3eca:	a1 1d       	adc	r26, r1
    3ecc:	66 1f       	adc	r22, r22
    3ece:	82 9f       	mul	r24, r18
    3ed0:	22 27       	eor	r18, r18
    3ed2:	b0 0d       	add	r27, r0
    3ed4:	a1 1d       	adc	r26, r1
    3ed6:	62 1f       	adc	r22, r18
    3ed8:	73 9f       	mul	r23, r19
    3eda:	b0 0d       	add	r27, r0
    3edc:	a1 1d       	adc	r26, r1
    3ede:	62 1f       	adc	r22, r18
    3ee0:	83 9f       	mul	r24, r19
    3ee2:	a0 0d       	add	r26, r0
    3ee4:	61 1d       	adc	r22, r1
    3ee6:	22 1f       	adc	r18, r18
    3ee8:	74 9f       	mul	r23, r20
    3eea:	33 27       	eor	r19, r19
    3eec:	a0 0d       	add	r26, r0
    3eee:	61 1d       	adc	r22, r1
    3ef0:	23 1f       	adc	r18, r19
    3ef2:	84 9f       	mul	r24, r20
    3ef4:	60 0d       	add	r22, r0
    3ef6:	21 1d       	adc	r18, r1
    3ef8:	82 2f       	mov	r24, r18
    3efa:	76 2f       	mov	r23, r22
    3efc:	6a 2f       	mov	r22, r26
    3efe:	11 24       	eor	r1, r1
    3f00:	9f 57       	subi	r25, 0x7F	; 127
    3f02:	50 40       	sbci	r21, 0x00	; 0
    3f04:	9a f0       	brmi	.+38     	; 0x3f2c <__mulsf3_pse+0x88>
    3f06:	f1 f0       	breq	.+60     	; 0x3f44 <__mulsf3_pse+0xa0>
    3f08:	88 23       	and	r24, r24
    3f0a:	4a f0       	brmi	.+18     	; 0x3f1e <__mulsf3_pse+0x7a>
    3f0c:	ee 0f       	add	r30, r30
    3f0e:	ff 1f       	adc	r31, r31
    3f10:	bb 1f       	adc	r27, r27
    3f12:	66 1f       	adc	r22, r22
    3f14:	77 1f       	adc	r23, r23
    3f16:	88 1f       	adc	r24, r24
    3f18:	91 50       	subi	r25, 0x01	; 1
    3f1a:	50 40       	sbci	r21, 0x00	; 0
    3f1c:	a9 f7       	brne	.-22     	; 0x3f08 <__mulsf3_pse+0x64>
    3f1e:	9e 3f       	cpi	r25, 0xFE	; 254
    3f20:	51 05       	cpc	r21, r1
    3f22:	80 f0       	brcs	.+32     	; 0x3f44 <__mulsf3_pse+0xa0>
    3f24:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <__fp_inf>
    3f28:	0c 94 36 1f 	jmp	0x3e6c	; 0x3e6c <__fp_szero>
    3f2c:	5f 3f       	cpi	r21, 0xFF	; 255
    3f2e:	e4 f3       	brlt	.-8      	; 0x3f28 <__mulsf3_pse+0x84>
    3f30:	98 3e       	cpi	r25, 0xE8	; 232
    3f32:	d4 f3       	brlt	.-12     	; 0x3f28 <__mulsf3_pse+0x84>
    3f34:	86 95       	lsr	r24
    3f36:	77 95       	ror	r23
    3f38:	67 95       	ror	r22
    3f3a:	b7 95       	ror	r27
    3f3c:	f7 95       	ror	r31
    3f3e:	e7 95       	ror	r30
    3f40:	9f 5f       	subi	r25, 0xFF	; 255
    3f42:	c1 f7       	brne	.-16     	; 0x3f34 <__mulsf3_pse+0x90>
    3f44:	fe 2b       	or	r31, r30
    3f46:	88 0f       	add	r24, r24
    3f48:	91 1d       	adc	r25, r1
    3f4a:	96 95       	lsr	r25
    3f4c:	87 95       	ror	r24
    3f4e:	97 f9       	bld	r25, 7
    3f50:	08 95       	ret

00003f52 <__mulsi3>:
    3f52:	db 01       	movw	r26, r22
    3f54:	8f 93       	push	r24
    3f56:	9f 93       	push	r25
    3f58:	0e 94 f0 1f 	call	0x3fe0	; 0x3fe0 <__muluhisi3>
    3f5c:	bf 91       	pop	r27
    3f5e:	af 91       	pop	r26
    3f60:	a2 9f       	mul	r26, r18
    3f62:	80 0d       	add	r24, r0
    3f64:	91 1d       	adc	r25, r1
    3f66:	a3 9f       	mul	r26, r19
    3f68:	90 0d       	add	r25, r0
    3f6a:	b2 9f       	mul	r27, r18
    3f6c:	90 0d       	add	r25, r0
    3f6e:	11 24       	eor	r1, r1
    3f70:	08 95       	ret

00003f72 <__udivmodsi4>:
    3f72:	a1 e2       	ldi	r26, 0x21	; 33
    3f74:	1a 2e       	mov	r1, r26
    3f76:	aa 1b       	sub	r26, r26
    3f78:	bb 1b       	sub	r27, r27
    3f7a:	fd 01       	movw	r30, r26
    3f7c:	0d c0       	rjmp	.+26     	; 0x3f98 <__udivmodsi4_ep>

00003f7e <__udivmodsi4_loop>:
    3f7e:	aa 1f       	adc	r26, r26
    3f80:	bb 1f       	adc	r27, r27
    3f82:	ee 1f       	adc	r30, r30
    3f84:	ff 1f       	adc	r31, r31
    3f86:	a2 17       	cp	r26, r18
    3f88:	b3 07       	cpc	r27, r19
    3f8a:	e4 07       	cpc	r30, r20
    3f8c:	f5 07       	cpc	r31, r21
    3f8e:	20 f0       	brcs	.+8      	; 0x3f98 <__udivmodsi4_ep>
    3f90:	a2 1b       	sub	r26, r18
    3f92:	b3 0b       	sbc	r27, r19
    3f94:	e4 0b       	sbc	r30, r20
    3f96:	f5 0b       	sbc	r31, r21

00003f98 <__udivmodsi4_ep>:
    3f98:	66 1f       	adc	r22, r22
    3f9a:	77 1f       	adc	r23, r23
    3f9c:	88 1f       	adc	r24, r24
    3f9e:	99 1f       	adc	r25, r25
    3fa0:	1a 94       	dec	r1
    3fa2:	69 f7       	brne	.-38     	; 0x3f7e <__udivmodsi4_loop>
    3fa4:	60 95       	com	r22
    3fa6:	70 95       	com	r23
    3fa8:	80 95       	com	r24
    3faa:	90 95       	com	r25
    3fac:	9b 01       	movw	r18, r22
    3fae:	ac 01       	movw	r20, r24
    3fb0:	bd 01       	movw	r22, r26
    3fb2:	cf 01       	movw	r24, r30
    3fb4:	08 95       	ret

00003fb6 <__tablejump2__>:
    3fb6:	ee 0f       	add	r30, r30
    3fb8:	ff 1f       	adc	r31, r31
    3fba:	05 90       	lpm	r0, Z+
    3fbc:	f4 91       	lpm	r31, Z
    3fbe:	e0 2d       	mov	r30, r0
    3fc0:	09 94       	ijmp

00003fc2 <__umulhisi3>:
    3fc2:	a2 9f       	mul	r26, r18
    3fc4:	b0 01       	movw	r22, r0
    3fc6:	b3 9f       	mul	r27, r19
    3fc8:	c0 01       	movw	r24, r0
    3fca:	a3 9f       	mul	r26, r19
    3fcc:	70 0d       	add	r23, r0
    3fce:	81 1d       	adc	r24, r1
    3fd0:	11 24       	eor	r1, r1
    3fd2:	91 1d       	adc	r25, r1
    3fd4:	b2 9f       	mul	r27, r18
    3fd6:	70 0d       	add	r23, r0
    3fd8:	81 1d       	adc	r24, r1
    3fda:	11 24       	eor	r1, r1
    3fdc:	91 1d       	adc	r25, r1
    3fde:	08 95       	ret

00003fe0 <__muluhisi3>:
    3fe0:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <__umulhisi3>
    3fe4:	a5 9f       	mul	r26, r21
    3fe6:	90 0d       	add	r25, r0
    3fe8:	b4 9f       	mul	r27, r20
    3fea:	90 0d       	add	r25, r0
    3fec:	a4 9f       	mul	r26, r20
    3fee:	80 0d       	add	r24, r0
    3ff0:	91 1d       	adc	r25, r1
    3ff2:	11 24       	eor	r1, r1
    3ff4:	08 95       	ret

00003ff6 <_exit>:
    3ff6:	f8 94       	cli

00003ff8 <__stop_program>:
    3ff8:	ff cf       	rjmp	.-2      	; 0x3ff8 <__stop_program>
